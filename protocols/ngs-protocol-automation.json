{"id":49735,"title":"NGS Protocol Automation","title_html":"<p>NGS Protocol Automation<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":null,"doi_status":0,"uri":"ngs-protocol-automation-butfnwjn","type_id":1,"template_id":5,"published_on":1620346148,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"butfnwjn","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1620345552,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"erick.rios. ","affiliation":null,"affiliations":[],"username":"m4wle1x1v1s4wle1","note":null,"link":null,"image":{"source":"\/img\/avatars\/015.png","placeholder":"\/img\/avatars\/015.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":1,"authors":[{"name":"erick.rios. ","affiliation":"California State University, Northridge","affiliations":[],"username":"m4wle1x1v1s4wle1","note":"Budding Data Scientist","link":null,"image":{"source":"\/img\/avatars\/015.png","placeholder":"\/img\/avatars\/015.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[{"id":24637,"uri":"novicecodingerick","title":"NoviceCodingErick","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":24637,"uri":"novicecodingerick","title":"NoviceCodingErick","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":true,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"NGS Protocol Automation","title_html":"NGS Protocol Automation","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"ngs-protocol-automation-butfnwjn","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1620346148,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}}],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/ngs-protocol-automation-butfnwjn","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":1,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":1,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"07F0F950AEC711EBB6973F34F839060C","state_version_id":32,"steps":[{"id":1174304,"guid":"73466410AEC711EBB6973F34F839060C","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E080AC29D73948FD8389A1753FE50460","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"ED59331D0BE347B6819D196639AD3219","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">ENTIRE=n\n ALIGNMENTS=n\n REGIONS=n\n MUTATIONS=n\n INDEX=n\n echo -n \"Perform ENTIRE Protocol? (Y\/n): \"<\/div><div class = \"text-block\">read ENTIRE<\/div><div class = \"text-block\">if [[ \u201c$ENTIRE\u201d == Y ]]; then\n echo \u201cWILL perform ENTIRE protocol.\u201d\n fi<\/div><div class = \"text-block\">if [ $ENTIRE != n -a $ENTIRE != Y ]; then\n echo \u201cYou said $ENTIRE, assuming \u2018NO\u2019\u201d\n ENTIRE=n\n fi\n ###################################\n if [[ \u201c$ENTIRE\u201d == n ]]; then\n echo -n \"Perform candidate regions protocol? (Y\/n): \"\n read REGIONS<\/div><div class = \"text-block\">if [ $REGIONS != n -a $REGIONS != Y ]; then\n echo \u201cYou said $REGIONS, assuming \u2018NO\u2019\u201d\n REGIONS=n\n fi<\/div><div class = \"text-block\">echo -n \"Perform candidate mutations protocol? (Y\/n): \"\n read MUTATIONS\n if [ $MUTATIONS != n -a $MUTATIONS != Y ]; then\n echo \u201cYou said $MUTATIONS, assuming \u2018NO\u2019\u201d\n MUTATIONS=n\n fi\n fi\n ####################################\n if [ $ENTIRE == Y -o $ALIGNMENTS == Y -o $REGIONS == Y -o $MUTATIONS == Y ]; then\n echo -n \"Enter representative genome (include file extension): \"\n read GENOME\n echo -n \"Index your representative genome? (Y\/n): \"\n read INDEX\n if [ $INDEX != Y -a $INDEX != n ]; then\n echo \u201cYou said $INDEX, assuming \u2018NO\u2019\u201d\n echo \u201cWill NOT index genome.\u201d\n INDEX=n\n fi\n fi\n ####################################\n if [ \u201c$ENTIRE\u201d == Y -o $MUTATIONS == Y -o $ALIGNMENTS == Y ]; then\n echo -n \"Enter suppressor read 1 (include file extension): \"\n read SUPP_1\n echo -n \"Enter suppressor read 2 (include file extension): \"\n read SUPP_2<\/div><div class = \"text-block\">echo -n \"Enter mutant read 1 (include file extension): \"\n read MUT_1\n echo -n \"Enter mutant read 2 (include file extension): \"\n read MUT_2\n fi\n if [ \u201c$ENTIRE\u201d == Y -o $MUTATIONS == Y ]; then\n echo -n \"Candidate mutations; Enter annotation file (include file extension): \"\n read ANNOTATION\n fi\n if [ \u201c$ENTIRE\u201d == Y -o $REGIONS == Y -o $ALIGNMENTS == Y ]; then\n echo -n \"Enter wild read 1 (include file extension): \"\n read WILD_1\n echo -n \"Enter wild read 2 (include file extension): \"\n read WILD_2<\/div><div class = \"text-block\">echo -n \"Enter map read 1 (include file extension): \"\n read MAP_1\n echo -n \"Enter map read 2 (include file extension): \"\n read MAP_2<\/div><div class = \"text-block\">if [ \u201c$ENTIRE\u201d == Y -o $REGIONS == Y ]; then\n echo -n \"Candidate regions; Enter \u2018Source Code 1\u2019 perl script (include file extension): \"\n read $PERL\n fi\n fi\n ####################################\n if [ $ENTIRE == Y -o $ALIGNMENTS == Y -o $REGIONS == Y -o $MUTATIONS == Y ]; then\n echo -n \"How many CPU threads to dedicate for alignments? (Minimum: 1; Max: 5): \"\n read THREAD\n fi\n ######################################################################################\n if [[ \u201c$INDEX\u201d == Y ]];then\n bwa index $GENOME\n fi\n ####################### REGIONS ######################################################\n if [ \u201c$ENTIRE\u201d == Y -o $REGIONS == Y ]; then\n bwa mem -t THREAD -o WILD.sam $GENOME $WILD_1 $WILD_2\n bwa mem -t THREAD -o MAP.sam $GENOME $MAP_1 $MAP_2<\/div><div class = \"text-block\">samtools view -S -b MAP.sam > MAP_unsorted.bam\n samtools view -S -b WILD.sam > WILD_unsorted.bam<\/div><div class = \"text-block\">samtools sort -o MAP.bam MAP_unsorted.bam\n samtools sort -o WILD.bam WILD_unsorted.bam<\/div><div class = \"text-block\">samtools index MAP.bam\n samtools index WILD.bam<\/div><div class = \"text-block\">rm MAP_unsorted.bam MAP.sam\n rm WILD_unsorted.bam WILD.sam<\/div><div class = \"text-block\">bcftools mpileup -Ou -f $GENOME WILD.bam | bcftools call -mv -Ov -o WILD.vcf<\/div><div class = \"text-block\">awk \u2018{if($6>100) print}\u2019 WILD.vcf | grep -v INDEL |awk \u2018{print $1 \u201c\\t\u201d $2}\u2019 > positions.txt<\/div><div class = \"text-block\">samtools mpileup -f $GENOME -l positions.txt MAP.bam > pileup_data.txt<\/div><div class = \"text-block\">perl count_allele_frequencies.pl pileup_data.txt > mapping_data.txt\n echo \u201cCandidate regions finished; Look for \u2018mapping_data.txt\u2019 file.\u201d\n fi\n ############################### MUTATIONS ############################################\n if [ \u201c$ENTIRE\u201d == Y -o $MUTATIONS == Y ]; then\n bwa mem -t THREAD -o SUPP.sam $GENOME $SUPP_1 $SUPP_2\n bwa mem -t THREAD -o MUT.sam $GENOME $MUT_1 $MUT_2<\/div><div class = \"text-block\">samtools view -S -b SUPP.sam > SUPP_unsorted.bam\n samtools view -S -b MUT.sam > MUT_unsorted.bam<\/div><div class = \"text-block\">samtools sort -o SUPP.bam SUPP_unsorted.bam\n samtools sort -o MUT.bam MUT_unsorted.bam<\/div><div class = \"text-block\">samtools index SUPP.bam\n samtools index MUT.bam<\/div><div class = \"text-block\">rm SUPP_unsorted.bam SUPP.sam\n rm MUT_unsorted.bam MUT.sam<\/div><div class = \"text-block\">bcftools mpileup -Ou -f $GENOME SUPP.bam | bcftools call -mv -Ou | bcftools view -i \u2018%QUAL>=20\u2019 -Oz > SUPP.vcf.gz<\/div><div class = \"text-block\">bcftools mpileup -Ou -f $GENOME MUT.bam | bcftools call -mv -Ou | bcftools view -i \u2018%QUAL>=20\u2019 -Oz > MUT.vcf.gz<\/div><div class = \"text-block\">bcftools index SUPP.vcf.gz<\/div><div class = \"text-block\">bcftools index MUT.vcf.gz<\/div><div class = \"text-block\">bcftools filter -O z SUPP.vcf.gz > SUPP_filtered1.vcf.gz<\/div><div class = \"text-block\">bcftools index SUPP_filtered1.vcf.gz<\/div><div class = \"text-block\">bcftools isec -C SUPP_filtered1.vcf.gz MUT.vcf.gz > pos.txt<\/div><div class = \"text-block\">bcftools filter -O z -R pos.txt SUPP_filtered1.vcf.gz > SUPP_filtered2.vcf.gz<\/div><div class = \"text-block\">bcftools sort -O z SUPP_filtered2.vcf.gz > SUPP_filtered2_sorted.vcf.gz<\/div><div class = \"text-block\">bcftools index SUPP_filtered2_sorted.vcf.gz<\/div><div class = \"text-block\">bcftools csq -p s -f $GENOME -g $ANNOTATION SUPP_filtered2_sorted.vcf.gz >   SUPP_variants_annotated.vcf<\/div><div class = \"text-block\">grep missense SUPP_variants_annotated.vcf > Candidate_Mut.txt\n grep stop_gained SUPP_variants_annotated.vcf >> Candidate_Mut.txt\n grep synonymous SUPP_variants_annotated.vcf >> Candidate_Mut.txt\n grep INDEL SUPP_variants_annotated.vcf >> Candidate_Mut.txt\n echo \u201cCandidate mutations protocol finished; Look for \u2018Candidate_Mut.txt\u2019 file\u201d\n fi\n ######################################################################################\n if [[ $ENTIRE == n ]]; then<\/div><div class = \"text-block\">if [[ \u201c$REGIONS\u201d == n ]]; then\n echo \u201cCandidate regions protocol was not performed.\u201d\n fi\n if [[ \u201c$MUTATIONS\u201d == n ]]; then\n echo \u201cCandidate mutations protocol was not performed.\u201d\n fi\n fi\n if [ $ENTIRE == n -a $REGIONS == n -a $MUTATIONS == n -a $INDEX == n -a $ALIGNMENTS == n ];then\n echo \u201cNothing was accomplished this day.\u201d\n else\n echo \u201cSomething was accomplished!\u201d\n fi<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">Automation_v1_2.sh<\/div><div class = \"text-block\">\tWritten by Erick (02\/05\/2021)<\/div><div class = \"text-block\">--------------------------------------------<\/div><div class = \"text-block\">Hello to \"v1_2\".<\/div><div class = \"text-block\">The current protocol:<\/div><div class = \"text-block\">\"A simplified workflow for the analysis of whole-genome sequencing data from mutant lines<\/div><div class = \"text-block\">\t\twith an application to the nematode Pristionchus pacificus\"<\/div><div class = \"text-block\"> \t\t\twritten by Christian R\u00f6delsperger.<\/div><div class = \"text-block\">Uses BWA, samtools, and bcftools which are tools or packages that can be readily downloaded<\/div><div class = \"text-block\">and installed. These tools are \"linux\/Mac based\" to put it simply.<\/div><div class = \"text-block\">Windows users need to download an \"emulator\" of linux terminal such as \"ubuntu 20.04\" from <\/div><div class = \"text-block\">sources such as the Microsoft store. (I use ubuntu 20.04.)<\/div><div class = \"text-block\">---------------------------------------------<\/div><div class = \"text-block\">Installing Tools<\/div><div class = \"text-block\">For Windows 10:<\/div><div class = \"text-block\">1.\tInstall \u201cubuntu 20.04 LTS\u201d (free) from the Microsoft store<\/div><div class = \"text-block\">2.\tOnce installed correctly<\/div><div class = \"text-block\">3.\tOpen windows command shell and type \u201cbash\u201d; it may take a few moments for first time running.<\/div><div class = \"text-block\">4.\t$ sudo apt-get install bwa<\/div><div class = \"text-block\">5.\t$ sudo apt-get install samtools<\/div><div class = \"text-block\">6.\t$ sudo apt-get install bcftools<\/div><div class = \"text-block\">7.\tYou are now free to continue.<\/div><div class = \"text-block\">For Mac users:<\/div><div class = \"text-block\">1.\tOpen terminal\/console<\/div><div class = \"text-block\">2.\t$ brew install bwa<\/div><div class = \"text-block\">3.\t$ brew install samtools<\/div><div class = \"text-block\">4.\t$ brew install bcftools<\/div><div class = \"text-block\">5.\tYou are now free to continue.<\/div><div class = \"text-block\">-----------------------------------------------<\/div><div class = \"text-block\">Some computer systems may require admin or even root permissions in order to run the bash script.<\/div><div class = \"text-block\">The simplest way ensure the script does not fail mid-way:<\/div><div class = \"text-block\">>sudo -i sudo -s<\/div><div class = \"text-block\">Bash script can now be ran with full permissions.<\/div><div class = \"text-block\">------------------------------------------------<\/div><div class = \"text-block\">Initiating the bash script<\/div><div class = \"text-block\">>.\/Automation_v1_2.sh<\/div><\/div>","changed_on":1620346148}