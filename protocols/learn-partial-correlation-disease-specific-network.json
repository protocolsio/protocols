{"id":41943,"title":"Learn Partial Correlation Disease-Specific Networks","title_html":"<p>Learn Partial Correlation Disease-Specific Networks<\/p>","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch94bfuzx.png","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch94bfuzx.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bk7xkzpn","doi_status":2,"uri":"learn-partial-correlation-disease-specific-network-bk7xkzpn","type_id":1,"template_id":5,"published_on":1607660687,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":1,"version_data":{"id":"1","code":"bk7xkzpn","parent_id":41125,"parent_uri":"learn-partial-correlation-disease-specific-network-bkedkta6","is_same_owner":true,"has_pending_merge_request":false,"has_approved_merge_request":true},"created_on":1599680425,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Lillian R. Thistlethwaite","affiliation":"Baylor College of Medicine","affiliations":[{"affiliation":"Baylor College of Medicine","url":"http:\/\/genboree.org\/site\/bioinformatics_research_laboratory","is_default":1}],"username":"lillian-thistlethwaite","note":null,"link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch47bfuzx.jpeg","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch47bfuzx.jpeg"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"},{"id":6,"image":{"source":"\/img\/badges\/accelerator.svg","placeholder":"\/img\/badges\/accelerator.svg"},"name":"Science accelerator"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":2,"authors":[{"name":"Lillian Thistlethwaite","affiliation":"Baylor College of Medicine","affiliations":[],"username":"lillian-thistlethwaite","note":null,"link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch47bfuzx.jpeg","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/aff7b00e7745383ae11e3af6080e1953f199d3d515fcb352a9ce52f476b677c2\/ch47bfuzx.jpeg"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/learn-partial-correlation-disease-specific-network-bk7xkzpn","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"C7407BB7DCE84DE4911601C3ADAA5962","state_version_id":0,"steps":[{"id":1028485,"guid":"F0D5063FC1A14232A0FE8FAEDE80F83C","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"42D71318EF7746BF82B02136C7D2086F","order_id":1,"type_id":6,"title":"Section","source":{"title":"Prepare dataset"}},{"id":1054724,"guid":"D4613C0BF3C6447CAB3E49F692929935","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><\/div>"}},{"id":1054725,"guid":"D7A3A860E8AB11EA84F06D48B756B5B4","order_id":2,"type_id":15,"title":"command","source":{"id":7853,"name":"require(CTD)","command_name":"Load the CTD R package","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"DF953250E8AB11EA84F06D48B756B5B4","order_id":3,"type_id":15,"title":"command","source":{"id":7854,"name":"data(Miller2015)","command_name":"Load the Miller et al 2015 dataset","command":null,"os_name":null,"os_version":null}},{"id":1054727,"guid":"E96B0CA0E8AB11EA84F06D48B756B5B4","order_id":4,"type_id":15,"title":"command","source":{"id":7855,"name":"data_mx.og = as.matrix(Miller2015[,grep(\"IEM_\", colnames(Miller2015))])","command_name":"Remove metabolite annotation columns from dataset","command":"One sample per column, one metabolite per row.","os_name":null,"os_version":null}},{"id":1054728,"guid":"F8431920E8AB11EA84F06D48B756B5B4","order_id":5,"type_id":15,"title":"command","source":{"id":7856,"name":"cohorts = list()\ndiags = data_mx.og[1,]\ncohorts$mcc = names(diags[which(diags==\"3-methylcrotonyl CoA carboxylase\")])\ncohorts$arg = names(diags[which(diags==\"Argininemia\")])\ncohorts$cit = names(diags[which(diags==\"Citrullinemia\")])\ncohorts$cob = names(diags[which(diags==\"Cobalamin biosynthesis\")])\ncohorts$ga = names(diags[which(diags==\"Glutaric Aciduria\")])\ncohorts$gamt = names(diags[which(diags==\"Guanidinoacetate methyltransferase\")])\ncohorts$msud = names(diags[which(diags==\"Maple syrup urine disease\")])\ncohorts$mma = names(diags[which(diags==\"Methylmalonic aciduria\")])\ncohorts$otc = names(diags[which(diags==\"Ornithine transcarbamoylase\")])\ncohorts$pa = names(diags[which(diags==\"Propionic aciduria\")])\ncohorts$pku = names(diags[which(diags==\"Phenylketonuria\")])\ncohorts$tmhle = names(diags[which(diags==\"Trimethyllysine hydroxylase epsilon\")])\ncohorts$ref = names(diags[which(diags==\"No biochemical genetic diagnosis\")])","command_name":"Create diagnosis-patient mappings","command":"Create a list object that maps patient identifiers to their respective diagnostic class.","os_name":null,"os_version":null}},{"id":1054729,"guid":"010AB7C0E8AC11EA84F06D48B756B5B4","order_id":6,"type_id":15,"title":"command","source":{"id":7857,"name":"data_mx.og = data_mx.og[-c(1, grep(\"x -\", rownames(data_mx.og))),]","command_name":"Remove diagnosis row and x-compounds from data_mx.og","command":"","os_name":null,"os_version":null}},{"id":1054730,"guid":"06E2B080E8AC11EA84F06D48B756B5B4","order_id":7,"type_id":15,"title":"command","source":{"id":7858,"name":"data_mx.og = apply(data_mx.og, c(1,2), as.numeric)","command_name":"Convert data_mx.og to numeric matrix.","command":"All elements should be numeric, not character.","os_name":null,"os_version":null}},{"id":1054731,"guid":"A7DA28A0E8AD11EA84F06D48B756B5B4","order_id":8,"type_id":15,"title":"command","source":{"id":7859,"name":"refs = Miller2015[-c(1, grep(\"x -\", rownames(Miller2015))),which(colnames(Miller2015) %in% cohorts$ref)]\nref_fill = as.numeric(Miller2015$`Times identifed in all 200 samples`[-c(1, grep(\"x -\", rownames(Miller2015)))])\/200\nrefs2 = refs[which(ref_fill>0.8),]","command_name":"Subset data and store reference sample data separately","command":"Reference data is used to construct \"surrogate profiles\" for reference samples.\n\nOnly return metabolite data in reference samples associated with a fill rate >80%. Fill rate is the percentage of samples with a z-scored value for a given metabolite.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":1,"critical":null,"critical_id":null,"duration":1},{"id":1028486,"guid":"78C001F64A8D49198096F9C2D16CE966","previous_id":1028485,"previous_guid":"F0D5063FC1A14232A0FE8FAEDE80F83C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2A02D6B939F5475BA937C0D6B032DA2C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Prepare dataset"}},{"id":1054724,"guid":"20CCD8BA3E3F4363ACB8C65D7393333F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Learn disease-specific network folds for three different network learning paradigms for 5 disease states (citrullinemia, maple syrup urine disease, methylmalonic aciduria, propionic aciduria, phenylketonuria):<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">i)   <\/span><span>latent embedding + network pruning (\"ind\")<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">ii)  <\/span><span>latent embedding + no network pruning (\"noPruning\")<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">iii) <\/span><span>no latent embedding or network pruning (\"noLatent\")<\/span><\/div><div class = \"text-block\">\"ind\" networks will be the ig_pruned R objects saved in .RData files in a folder called ind_foldNets.<\/div><div class = \"text-block\">\"noLatent networks will be the ig R object saved in .RData files in a folder called noLatent_foldNets.<\/div><div class = \"text-block\">\"noPruning\" networks will be the ig R object in the ind_foldNets .RData files.<\/div><div class = \"text-block\">Each disease-specific network takes an average of 3-5 minutes to learn. We learn a total of CIT(9)*2+MSUD(18)*2+MMA(9)*2+PA(9)*2+PKU(8)*2 = 106 network folds, 53 per network learning paradigm (\"ind\" versus \"noLatent\"). In total, all networks were learned within 5-9 hours.<\/div><\/div>"}},{"id":1054725,"guid":"57F24470E8AE11EA86EA7B04A904A31D","order_id":2,"type_id":15,"title":"command","source":{"id":7860,"name":"require(huge)\nfor (type in c(\"ind\", \"noLatent\")) {\n  for (model in c(\"cit\", \"msud\", \"mma\", \"pa\", \"pku\")) {\n    for (fold in 1:length(cohorts[[model]])) {\n      print(sprintf(\"Learning graphs for diag %s, fold %d...\", model, fold))\n      diag_pts = cohorts[[model]][-fold]\n      print(diag_pts)\n      fill.rate = 1-apply(data_mx.og[,which(colnames(data_mx.og) %in% diag_pts)], 1, function(i) sum(is.na(i))\/length(i))\n      diag_data = data_mx.og[intersect(which(ref_fill>0.8), which(fill.rate>0.80)), which(colnames(data_mx.og) %in% diag_pts)]\n      diag_data = diag_data[which(rownames(diag_data) %in% rownames(refs2)),]\n      if (type==\"noLatent\") {\n        print(\"Disease only, no pruning, no latent variable embedded \/ differential networks.\")\n        diag_data = data.surrogateProfiles(data = diag_data, std = 1, ref_data = NULL)\n      } else {\n        print(\"Individual samples as training data. Latent variable embedding and network pruning.\")\n        diag_data = data.surrogateProfiles(data = diag_data, std = 1, ref_data = refs2)\n      }\n      print(dim(diag_data))\n      \n      # Disease Network: GLASSO approach\n      inv_covmatt = huge(t(diag_data), method=\"glasso\")\n      inv_covmatt_select = huge.select(inv_covmatt, criterion = \"stars\")\n      inv_covmat = as.matrix(inv_covmatt_select$icov[[which(inv_covmatt_select$lambda==inv_covmatt_select$opt.lambda)]])\n      diag(inv_covmat) = 0;\n      colnames(inv_covmat) = rownames(diag_data)\n      ig = graph.adjacency(as.matrix(inv_covmat), mode=\"undirected\", weighted=TRUE, add.colnames='name')\n      V(ig)$name = rownames(diag_data)\n      print(ig)\n      \n      if (type==\"ind\") {\n        # Reference Network: GLASSO approach\n        ref_data = data.surrogateProfiles(data = refs2, std = 1, ref_data = refs2)\n        ref_data = ref_data[,-which(duplicated(colnames(ref_data)))]\n        print(dim(ref_data))\n        inv_covmatt = huge(t(ref_data), method=\"glasso\", lambda = inv_covmatt_select$opt.lambda)\n        inv_covmat = as.matrix(inv_covmatt$icov[[1]])\n        diag(inv_covmat) = 0;\n        colnames(inv_covmat) = rownames(ref_data)\n        ig_ref = graph.adjacency(as.matrix(inv_covmat), mode=\"undirected\", weighted=TRUE, add.colnames='name')\n        V(ig_ref)$name = rownames(ref_data)\n        print(ig_ref)\n        \n        ig_pruned = graph.naivePruning(ig, ig_ref)\n        print(ig_pruned)\n        save(ig, ig_ref, ig_pruned, file=sprintf(\"bg_%s_%s_fold%d.RData\", model, type, fold))\n        rm(ig, ig_pruned)\n      } else {\n        save(ig, file=sprintf(\"bg_%s_%s_fold%d.RData\", model, type, fold))\n        rm(ig)\n      }\n    }\n  }\n}","command_name":"Learn disease-specific network structures for rare disease datasets","command":"Two solutions are provided to learn network structures on very underranked (large feature space with small number of examples) data (as is the case for rare disease):\n\n1. Add surrogate profiles to fill in the rank of the data matrix.\n2. Use the glasso algorithm","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":1,"critical":null,"critical_id":null,"duration":18000}],"document":"","materials":[{"id":580452,"mol_weight":0,"name":"NONE","linfor":"","url":"http:\/\/N\/A","sku":"N\/A","cas_number":"","rrid":"N\/A","public":0,"vendor":{"name":"Contributed by users","affiliation":null,"affiliations":[],"username":null,"note":null,"link":"https:\/\/www.protocols.io","image":{"source":"https:\/\/www.protocols.io\/img\/vendors\/1.png","placeholder":"https:\/\/www.protocols.io\/img\/vendors\/1.png"},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false,"id":1},"can_edit":0,"stats":{"total_protocols":0}}],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol describes how to construct disease-specific network structures as described in Thistlethwaite et al. (2020). <\/div><div class = \"text-block\">Thistlethwaite L.R., Petrosyan V., Li X., Miller M.J., Elsea S.H., Milosavljevic A. (2020). CTD: an information-theoretic method to interpret multivariate perturbations in the context of graphical models with applications in metabolomics and transcriptomics. In review.<\/div><\/div>","changed_on":1607660687}