{"id":49085,"title":"Investigating DOIs&#39; classes of errors","title_html":"<p>Investigating DOIs&#x27; classes of errors<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bt65nrg6","doi_status":2,"uri":"investigating-dois-39-classes-of-errors-bt65nrg6","type_id":1,"template_id":5,"published_on":1618332742,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":1,"version_data":{"id":"1","code":"bt65nrg6","parent_id":49031,"parent_uri":"doiclassesoferrors-bt5fnq3n","is_same_owner":true,"has_pending_merge_request":false,"has_approved_merge_request":true},"created_on":1618332619,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Arcangelo Massari","affiliation":null,"affiliations":[],"username":"m4vle152w1s4ple1","note":null,"link":null,"image":{"source":"\/img\/avatars\/010.png","placeholder":"\/img\/avatars\/010.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":9,"authors":[{"name":"Ricarda Boente","affiliation":"University of Bologna","affiliations":[],"username":"m4vle152w1s4vle1","note":null,"link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Deniz Tural","affiliation":"University of Bologna","affiliations":[],"username":"m4vle152x1v4qle1","note":null,"link":null,"image":{"source":"\/img\/avatars\/008.png","placeholder":"\/img\/avatars\/008.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Cristian Santini","affiliation":"University of Bologna","affiliations":[],"username":"m4vle152x1u4yle1","note":null,"link":null,"image":{"source":"\/img\/avatars\/001.png","placeholder":"\/img\/avatars\/001.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Arcangelo Massari","affiliation":"University of Bologna","affiliations":[],"username":"m4vle152w1s4ple1","note":null,"link":null,"image":{"source":"\/img\/avatars\/010.png","placeholder":"\/img\/avatars\/010.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[{"id":22817,"uri":"open-science-20202021","title":"Open Science 2020\/2021","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":22817,"uri":"open-science-20202021","title":"Open Science 2020\/2021","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Investigating DOIs&#39; classes of errors","title_html":"Investigating DOIs&#39; classes of errors","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"investigating-dois-39-classes-of-errors-bt65nrg6","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1618332389,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}}],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/investigating-dois-39-classes-of-errors-bt65nrg6","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"BA8A95D2ABD8409CA66463A46B479DCD","state_version_id":14,"steps":[{"id":1161101,"guid":"5F3A1A21E7E74310978F553C44F5DA1A","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C0510EA512D946F2A7EDE8199DDFDEED","order_id":1,"type_id":6,"title":"Section","source":{"title":"Checking  the DOI names' invalidity"}},{"id":1054724,"guid":"04CA445C5482476E8CFBD396B9A71D61","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We import a CSV containing invalid DOI-to-DOI citations organized as follow: the first column contains valid citing DOIs and the second contains invalid cited DOIs<\/div><\/div>"}},{"id":1054725,"guid":"AD3AB2009AE711EBB6547342859BDF69","order_id":2,"type_id":9,"title":"dataset","source":{"name":"Citations to invalid DOIs obtained from Crossref","link":"https:\/\/zenodo.org\/record\/4625300\/files\/invalid_dois.csv"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161102,"guid":"0CEAAA21AA684066920A1E4586B4CA39","previous_id":1161101,"previous_guid":"5F3A1A21E7E74310978F553C44F5DA1A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"E2EC32826B584E008F3F455C0F63A3AC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Checking  the DOI names' invalidity"}},{"id":1054724,"guid":"3B5C89CB69AC4347BFF72D4BF829A4B1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">First, we check for each cited DOI if it is factually invalid. For this purpose, the DOI Proxy is used (<\/div><div class = \"text-block\"><a href=\"https:\/\/www.doi.org\/factsheets\/DOIProxy.html\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.doi.org\/factsheets\/DOIProxy.html<\/span><\/a><\/div><div class = \"text-block\">): if the status code corresponding to that specific DOI is different from 1, it means that it is not valid; otherwise, that DOI has become valid in the meanwhile and the algorithm returns the same DOI as a correct one. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161103,"guid":"2EF7F8AA85F84B119831AACADB69E3DA","previous_id":1161102,"previous_guid":"0CEAAA21AA684066920A1E4586B4CA39","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"13F58B76C06143C795B8532BFA4C7323","order_id":1,"type_id":6,"title":"Section","source":{"title":"Error analysis"}},{"id":1054724,"guid":"D8A1B74795D040A0933A28C3F076F2AD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Taking as a reference the DOI error's taxonomy by Buchanan (Buchanan, 2006), there are two main classes of errors: author errors, made by authors when creating the list of cited articles for their publication, and database mapping errors, related to a data-entry error. This protocol deals only with the second kind of error, which can be further divided between prefix errors, suffix errors, and other-type errors (Xu et al., 2019). In order to solve our problem, we isolated recurrent strings at the beginning and at the end with corrupted DOI prefix and suffix respectively. In addition, we found other types of errors, like wrongly encoded characters and unwanted characters, that could be removed at the end of the data cleaning process. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161104,"guid":"3C80A71DCB984855B6C15B668013403F","previous_id":1161103,"previous_guid":"2EF7F8AA85F84B119831AACADB69E3DA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0412C2A49D9B4982BB903132FBDFFED9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data cleaning process"}},{"id":1054724,"guid":"1B4E4CD44EA6421D910B657F0C39E5B2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Here we describe the steps through which we carried out the cleaning process of factually invalid DOIs<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161105,"guid":"EDA3BB8365DC42549F3E2246172976EA","previous_id":1161104,"previous_guid":"3C80A71DCB984855B6C15B668013403F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"ECD4E56D9C8B4A758588999B86CA6F40","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data cleaning process"}},{"id":1054724,"guid":"03DE0BDE392146258BA452AE7B0B56CD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We define two regular expressions: one for identifying corruptions at the beginning of the DOI and one for cleaning corruptions at the end.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161106,"guid":"9C72DCE217924ACAAC0B405ACA93F9DE","previous_id":1161105,"previous_guid":"EDA3BB8365DC42549F3E2246172976EA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AA8C15CE3CCD4F8D9D6F427707B62133","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data cleaning process"}},{"id":1054724,"guid":"E65358F0680A46109D3B546CDF78FF19","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">For each factually invalid DOI, we apply the two regular expressions for cleaning prefix-type and suffix-type errors<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161107,"guid":"2AC73C22EEE34A3CA28B7937D5CAF9C1","previous_id":1161106,"previous_guid":"9C72DCE217924ACAAC0B405ACA93F9DE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B48A5A2EA43D4CF3AC6EA460436E8B0D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data cleaning process"}},{"id":1054724,"guid":"EF715B843BBF400EAC93EE1AF4BA5FCD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Once we have cleaned the DOI from the aforementioned error types we remove unwanted characters, that is double underscores, double periods, XML tags, spaces, and forward slashes.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161108,"guid":"A76E87E5CDC747A5945CF70BE3349FAB","previous_id":1161107,"previous_guid":"2AC73C22EEE34A3CA28B7937D5CAF9C1","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D8DB671BDDBD436193C96BD0E51EA37F","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data cleaning process"}},{"id":1054724,"guid":"A79B925D6F684F3B8465F22ED549C355","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">After this procedure, we store the modified DOIs in an output CSV file, where for each cited DOI we also store a value corresponding to the error class to which it belongs.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161109,"guid":"4B747E047F3246BC9C7126219C1CDCB4","previous_id":1161108,"previous_guid":"A76E87E5CDC747A5945CF70BE3349FAB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9A4011CCBC6B4AFFA485C167BF97D328","order_id":1,"type_id":6,"title":"Section","source":{"title":"Checking the modified DOI names"}},{"id":1054724,"guid":"CBB6DE80A80441BCB3D558C7371A44D8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Finally, each modified DOI name is checked through the DOI Proxy, to verify if the aforementioned procedure was able to fix it or not. In the end, we provide the number of DOI names that we were able to fix and the number of DOI names for each class of errors.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">The purpose of this protocol is to describe an automated process to repair invalid DOIs. In particular, four classes of errors are addressed: previously invalid DOIs become valid, prefix errors, suffix errors, and other type errors.<\/div><\/div>","changed_on":1618332742}