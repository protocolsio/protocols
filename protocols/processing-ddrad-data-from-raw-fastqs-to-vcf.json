{"id":40355,"title":"Processing ddRAD data from raw fastqs to vcf","title_html":"<p>Processing ddRAD data from raw fastqs to vcf<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bjnbkman","doi_status":2,"uri":"processing-ddrad-data-from-raw-fastqs-to-vcf-bjnbkman","type_id":1,"template_id":5,"published_on":1626463727,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"bjnbkman","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1597254154,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Colette Sevier Berg","affiliation":null,"affiliations":[{"affiliation":null,"url":null,"is_default":1}],"username":"colette-sevier-berg","note":null,"link":null,"image":{"source":"\/img\/avatars\/011.png","placeholder":"\/img\/avatars\/011.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":6,"authors":[{"name":"Thom Nelson","affiliation":"Embark Veterinary","affiliations":[],"username":"thom-nelson","note":"","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/4ad678b97c53277826e7ea230371c3f7844fee1a30d289bbd2ee744d88536072\/bqsk6ydw.png","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/4ad678b97c53277826e7ea230371c3f7844fee1a30d289bbd2ee744d88536072\/bqsk6ydw.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Findley Finseth","affiliation":"Claremont Colleges","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Lila Fishman","affiliation":"University of Montana","affiliations":[],"username":"lila-fishman3","note":"","link":null,"image":{"source":"\/img\/avatars\/004.png","placeholder":"\/img\/avatars\/004.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Colette Sevier Berg","affiliation":"University of Montana","affiliations":[],"username":"colette-sevier-berg","note":"","link":null,"image":{"source":"\/img\/avatars\/011.png","placeholder":"\/img\/avatars\/011.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/processing-ddrad-data-from-raw-fastqs-to-vcf-bjnbkman","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"0C48EA20DCC311EAB81D87AA2B649A86","state_version_id":482,"steps":[{"id":1001998,"guid":"34942940DCC311EAB81D87AA2B649A86","previous_id":1001999,"previous_guid":"36DE6760DCC311EAB81D87AA2B649A86","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"01C7C2A97DE44A90994FCDA439E12782","order_id":1,"type_id":6,"title":"Section","source":{"title":"Remove PCR duplicates using molecular barcode"}},{"id":1054724,"guid":"4948C609F3C048ED95E526EE847E3C64","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This step removes PCR duplicate using the i5 molecular barcode.<\/div><br\/><div class = \"text-block\">The resulting files will have the same prefix, but will have the suffix .rmdup.1.fastq (forward reads) and .rmdup.2.fastq (reverse reads)<\/div><br\/><\/div>"}},{"id":1054725,"guid":"04775C90DCC911EA84AB2318DA977B91","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/private\/88479279c111048121ba60bbb74528abae76f34ced8bba46c7ff7da670be159c\/chdj6ynw.py","placeholder":"","original_name":"rmdup_molbarcodes.py"}},{"id":1054726,"guid":"11AF4DA0DCC911EA84AB2318DA977B91","order_id":3,"type_id":15,"title":"command","source":{"id":7685,"name":"rmdup_molbarcodes.py -p {filePrefix} -s .fastq","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1001999,"guid":"36DE6760DCC311EAB81D87AA2B649A86","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F4066A102822403A890715EC88C8684B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex plates using i7 barcode"}},{"id":1054724,"guid":"529F85000EA141CE970B9DF3D7D427F9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This step requires 4 fastq files: forward reads, reverse reads, the i7 file, and the i5 file, and then a barcode file. <\/div><br\/><br\/><div class = \"text-block\">The output files will be demultiplexed fastq files with the prefix from the first column of the barcode file.  Each half-plate will have a forward and reverse read. <\/div><\/div>"}},{"id":1054725,"guid":"C824FF30DCC411EAAF3CEB919C8B2D3C","order_id":2,"type_id":15,"title":"command","source":{"id":7684,"name":"demultiplex_i7.py -f forwardFileName.fastq -r reverseFileName.fastq -i7 i7FileName.fastq -i5 i5FileName.fastq -b barcodeFile.txt","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"98B9A500DCC611EA84AB2318DA977B91","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/private\/88479279c111048121ba60bbb74528abae76f34ced8bba46c7ff7da670be159c\/chdi6ynw.py","placeholder":"","original_name":"demultiplex_i7.py"}},{"id":1054727,"guid":"58331DF299B849108FD53B7C00E2BF93","order_id":4,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\">Sample barcode file:<\/div><div class = \"text-block\">plate_name  \\t i7 barcode<\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1002104,"guid":"73C2AF10DCC811EA84AB2318DA977B91","previous_id":1001998,"previous_guid":"34942940DCC311EAB81D87AA2B649A86","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"027043D01C1D4B26BBDCE6FFDE6A26C7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Flip the reads"}},{"id":1054724,"guid":"F727F43BD2BC4098B18A0BD91BA0D9FA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><br\/><br\/><div class = \"text-block\">Use this command to flip the reads for each half-plate. The output file will be called filtered_forward.fastq and filtered_reverse.fastq, so now is a good time to make separate folders for each half-plate and put the resultng files in those folders. <\/div><br\/><\/div>"}},{"id":1054725,"guid":"B6813970DCCD11EA84AB2318DA977B91","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/private\/88479279c111048121ba60bbb74528abae76f34ced8bba46c7ff7da670be159c\/chd96ynw.py","placeholder":"","original_name":"flip2BeRAD.py"}},{"id":1054726,"guid":"D305CAC0DCCD11EA84AB2318DA977B91","order_id":3,"type_id":15,"title":"command","source":{"id":7686,"name":"flip2BeRad.py -c {cutsite sequence, eg: TGCAG} -f {forward file}.rmdup.1.fastq -r {reverse file}.rmdup.2.fastq -b {barcode file}.txt -m 1 -o 2","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054727,"guid":"045B241DE1D44440812889C4B151360E","order_id":4,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\">The barcode file is a list of 48 RAD barcodes used. <\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1002112,"guid":"BADC00B0DCD011EA84AB2318DA977B91","previous_id":1002104,"previous_guid":"73C2AF10DCC811EA84AB2318DA977B91","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F56BBBBC66624FACAA3CE47428C346AD","order_id":1,"type_id":6,"title":"Section","source":{"title":"Demultiplex by individual; join forward and reverse reads"}},{"id":1054724,"guid":"3583AFEA14334EC58EDC98FFE57BEFDA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This uses the process_shortreads bash command to demultiplex wach half-plate into one file for each individual. The input files required are filtered_forward.fastq, filtered_reverse.fastq, and a barcode file. <\/div><br\/><div class = \"text-block\">The outputs will be zipped fastqs for each individual, with the suffix .fq.gz <\/div><\/div>"}},{"id":1054725,"guid":"237AFE00DCD111EA84AB2318DA977B91","order_id":2,"type_id":15,"title":"command","source":{"id":7687,"name":"process_shortreads -1 {filtered_forward}.fastq -2 {filtered_reverse}.fastq -b {barcode File}.txt -o ~\/thatPlatesFolder -i fastq -y gzfastq -r -c -q -E phred33 --inline_null","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"46B99C37337B4266AE7FB479D062E66F","order_id":3,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\">Barcode file format:<\/div><div class = \"text-block\">barcode \\t sample_name<\/div><br\/><div class = \"text-block\">Double and triple check that the barcodes correspond to the correct sample name!<\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1002113,"guid":"4B9BF8D0DCD111EABD5785A52D27D05C","previous_id":1002112,"previous_guid":"BADC00B0DCD011EA84AB2318DA977B91","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D2D2B2B8125543CFAD946A5A1B061E83","order_id":1,"type_id":6,"title":"Section","source":{"title":"Make bams"}},{"id":1054724,"guid":"029FD66BF2A14FDBA7E644AB9FCC1587","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This script uses the tools GATK and Trimmomatic, so those tools need to be installed beforehand. <\/div><br\/><div class = \"text-block\">The input files for this script are the sample fastq and the genome FASTA file. The genome file also needs to have the following index files: .dict, .fa.amb, .fa.bwt, .fa.fai, .fa.pac, .fa.sa with the same prefix as the genome file & stored in the same directory as the genome. <\/div><br\/><div class = \"text-block\">This will output a .bam and a .bai for each individual. Now is a good time to to QC by visually examining the bams in IGV<\/div><\/div>"}},{"id":1054725,"guid":"5F13D6C0DCD211EABD5785A52D27D05C","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/private\/88479279c111048121ba60bbb74528abae76f34ced8bba46c7ff7da670be159c\/chem6ynw.sh","placeholder":"","original_name":"fastq2bam.sh"}},{"id":1054726,"guid":"8504D230DCD211EABD5785A52D27D05C","order_id":3,"type_id":15,"title":"command","source":{"id":7688,"name":"fastq2bam.sh \/file\/path\/prefix \/path\/to\/genome.fa","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1002116,"guid":"B0665200DCD211EABD5785A52D27D05C","previous_id":1002113,"previous_guid":"4B9BF8D0DCD111EABD5785A52D27D05C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C60F978B82F348DC96928C0F637CD93A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Make genomic vcfs (gvcfs)"}},{"id":1054724,"guid":"9239AC0A95B344DCB0D4F7AC20EFB5AC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This step takes bams and makes a gvcf for each individual using the attached script, then combines them all into a vcf. Put all the bams into one directory first, and then edit the script so that there is a path to the directory with all the bams.<\/div><br\/><br\/><\/div>"}},{"id":1054725,"guid":"06207BF0A6AC11EB8D679741E206F5CA","order_id":2,"type_id":15,"title":"command","source":{"id":8748,"name":"bash bams_to_vcf.sh","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"D1750E20A6AB11EB8D679741E206F5CA","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/deuj6ynw.sh","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/sh.png","original_name":"bams_to_vcf.sh"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This is a pipeline that the Fishman lab uses for processing paired-end ddRAD data, from fastq to vcf. These scripts were written and pipeline developed by Findley Finseth and Thom Nelson. <\/div><\/div>","changed_on":1626463727}