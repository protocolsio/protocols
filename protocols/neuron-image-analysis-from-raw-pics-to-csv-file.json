{"id":48167,"title":"Neuron Image Analysis: From raw pics to .csv file","title_html":"<p>Neuron Image Analysis: From raw pics to .csv file<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":null,"doi_status":0,"uri":"neuron-image-analysis-from-raw-pics-to-csv-file-btafnibn","type_id":1,"template_id":5,"published_on":1619820883,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"btafnibn","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1615576317,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Jesse Cohn","affiliation":null,"affiliations":[],"username":"jesse-cohn","note":null,"link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":25,"authors":[{"name":"Jesse Cohn","affiliation":"Washington University, Saint Louis","affiliations":[],"username":"jesse-cohn","note":"","link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/neuron-image-analysis-from-raw-pics-to-csv-file-btafnibn","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":1,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":1,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"CB8D73C0836611EBAC08594487367FE9","state_version_id":3530,"steps":[{"id":1143780,"guid":"3C66CE60836811EBAC08594487367FE9","previous_id":1162712,"previous_guid":"891358109ECE11EB8F41A9C368096D02","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5F4EB8E58000446B9FE53B8105F3B9F9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Cleaning up the folder"}},{"id":1054724,"guid":"72C42AB49E9F4EEBA3B44302AFB3EEEC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Image your plates with the \"<\/span><span style = \"font-weight:bold;\">JCohn_20x_Neurons_2.xaqp<\/span><span>\" acquisition protocol on the InCell. This should produce a Brightfield, Red, and Green image channel for each image field, with 12 image fields per well (3 rows x 4 columns, captured in a Horizontal Serpentine fashion) of a 96-well plate. Usually you'll have 1 folder per day imaged, and will need to run this script for each of those folders. An example of the InCell output file names for a single field of view would be:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">A - 01(fld 01 wv 488 - GreenHS).tif<\/div><div class = \"text-block\">A - 01(fld 01 wv 561 - Orange).tif<\/div><div class = \"text-block\">A - 01(fld 01 wv TL-Brightfield - Orange).tif<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Where, for example, \"A - 01\" is the well, \"fld 01\" is which field (out of 12), \"wv 488\" is the wavelength of the fluorescence, and \"- GreenHS\" is the color name. <\/div><div class = \"text-block\">The folder hierarchy at the moment should be (for simplicity this example uses a well with only 3 fields, each of the real ones would have 12):<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrfbcmhf.jpg\" \/><\/div><\/div>"}},{"id":1054725,"guid":"C29A8B11184E4AEC9B58D792FB51BBBD","order_id":2,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">It is very important that your images are in this exact format, with these exact colors used, as all of the downstream pipelines rely on parsing these file names.<\/span><\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}},{"id":1054726,"guid":"50FC70A37DC5412C9FF70097CBB0D72C","order_id":3,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrfbcmhf.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1143802,"guid":"69763630837111EBAC08594487367FE9","previous_id":1143780,"previous_guid":"3C66CE60836811EBAC08594487367FE9","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"284F9050D04C4B279CF8073337F7AE2B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Cleaning up the folder"}},{"id":1054724,"guid":"2005F1CDB2DC4375BE26733425C3261E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Get the WellFolders.py script: <\/div><div class = \"text-block\"> cd to the directory it is in, and then for each folder run at the command line:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python3 WellFolders.py [filepath] [day]<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For example, if you had your pictures in:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">\/Volumes\/DriveName\/NeuronsProtocolPlate001Day1<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">\/Volumes\/DriveName\/NeuronsProtocolPlate001Day3<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">\/Volumes\/DriveName\/NeuronsProtocolPlate001Day5<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">\/Volumes\/DriveName\/NeuronsProtocolPlate001Day7<\/li><\/ul><\/div><div class = \"text-block\">Then you would run the commands:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python3 WellFolders.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day1 1<\/div><div class = \"text-block\">python3 WellFolders.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day3 3<\/div><div class = \"text-block\">python3 WellFolders.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day5 5<\/div><div class = \"text-block\">python3 WellFolders.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day7 7<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">In each folder, the structure should now be:<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrjbcmhf.jpg\" \/><\/div><div class = \"text-block\">This cleanup step isn't strictly necessary for anything, it just helps to keep things a bit more organized, and I wrote the next script (StitchImages.py) to expect this file structure.<\/div><\/div>"}},{"id":1054725,"guid":"878D26209E3211EB8D4DA5CBA7BF9727","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/ddasbcmhf.py","placeholder":"","original_name":"WellFolders.py"}},{"id":1054726,"guid":"6988267AEB3F47CF9EA4F7E4AF38D6F8","order_id":3,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrjbcmhf.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1145090,"guid":"15E0D1D085CC11EBBC4CD573656F44D3","previous_id":1143802,"previous_guid":"69763630837111EBAC08594487367FE9","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D009FEF31A6F4D5C84422119C1A163A4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"4C77EB63921641F1964D92F1BB8B43D9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">With the folders organized, now get the following files:<\/div><\/div>"}},{"id":1054725,"guid":"44C8B670A84011EB82977FFDCF73DE44","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfd9bcmhf.py","placeholder":"","original_name":"StitchImagesOnGreen.py"}},{"id":1054726,"guid":"6A5B81C0A83F11EB82977FFDCF73DE44","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfd6bcmhf.ijm","placeholder":"","original_name":"FirstStitchGreen.ijm"}},{"id":1054727,"guid":"ADB250F09E3211EB8D4DA5CBA7BF9727","order_id":4,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/ddavbcmhf.ijm","placeholder":"","original_name":"SecondStitch.ijm"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161384,"guid":"055EBCC09C9F11EB9C1AA50DFB240E10","previous_id":1161388,"previous_guid":"EE7D3C109C9F11EB9C1AA50DFB240E10","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D093E8D3E7154D7EAC47746A6306DBB5","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"9C0228CDE1DE463EB24D9C1EB50ED990","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The StitchImagesOnGreen.py script will also call the FirstStitchGreen.ijm and SecondStitch.ijm ImageJ macros, so like above you have two options:<\/div><div class = \"text-block\">1) Hard code their locations into the script itself on lines 48 and 51.<\/div><div class = \"text-block\">2) Pass their location with the --firstlocation and --secondlocation flags when you run the script.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161388,"guid":"EE7D3C109C9F11EB9C1AA50DFB240E10","previous_id":1145090,"previous_guid":"15E0D1D085CC11EBBC4CD573656F44D3","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7A2B89A7E60B4ED9B19E18B8B2B587D1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"BD2BE83354A54893AE263C03B04583A0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The StitchImagesOnGreen.py script will run ImageJ\/Fiji in 'headless' mode, so you have two options:<\/div><div class = \"text-block\">1) Hard code the location of ImageJ\/Fiji executable file into the script itself, on line 56.<\/div><div class = \"text-block\">2) Pass the location of the executable file with the --imagej flag when you run the script.<\/div><div class = \"text-block\">The path needs to point to the location of the actual ImageJ\/Fiji executable file, not just the package. How I found mine was to go to my applications folder where Fiji is located, then right-click on Fiji, and click \"Show Package Contents\". The in the 'Contents' folder, and the 'MacOS' subfolder, the ImageJ executable was called \"ImageJ-macosx\". The path to that file is what you should use.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161427,"guid":"27C41C409CA611EB9C1AA50DFB240E10","previous_id":1161384,"previous_guid":"055EBCC09C9F11EB9C1AA50DFB240E10","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B25222B04A244047BC0E28171FBAD344","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"11164589E48A43D2963809482625797C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">You'll need to run StitchImagesOnGreen on each of the folders you ran WellFolders on above. A call for StitchImagesOnGreen is in the form:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python3 StitchImagesOnGreen.py [path\/to\/folder] [day] --firstmacrolocation [path\/to\/FirstStitchGreen.ijm] --secondmacrolocation [path\/to\/SecondStitch.ijm] --imagej [path\/to\/imagej] --wells [A01 A02 etc.]<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">The --wells flag at the end is an optional flag if you only want to stitch images for some of the wells instead of all of them in the folder. I've never really used it but I included it because hey, why not.<\/div><div class = \"text-block\">So assuming we've hard-coded in the locations of the ImageJ macros and the ImageJ location, we would run it on our example folders from the last step like so:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python3 StitchImagesOnGreen.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day1 1<\/div><div class = \"text-block\">python3 StitchImagesOnGreen.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day3 3<\/div><div class = \"text-block\">python3 StitchImagesOnGreen.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day5 5<\/div><div class = \"text-block\">python3 StitchImagesOnGreen.py \/Volumes\/DriveName\/NeuronsProtocolPlate001Day7 7<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161435,"guid":"0EC089709CA811EB9C1AA50DFB240E10","previous_id":1161427,"previous_guid":"27C41C409CA611EB9C1AA50DFB240E10","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"8345402E29934C21BC5285A830664E98","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"D13460EB284A448A914D0308B9FA8D54","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The stitching steps take a while, since the ImageJ\/Fiji stitching algorithm takes a bit. It usually takes between 45min - 1hr per folder of pictures.<\/div><div class = \"text-block\"><span>At the end, you should have a folder called \"<\/span><span style = \"font-weight:bold;\">Stitched_Images_[day]<\/span><span>\" in each of the folders you passed above, and the folder should contain stitched images with a file format of \"<\/span><span style = \"font-weight:bold;\">[well]_[color]_Stitched.tif<\/span><span>\" , with a Red and a Green image for each well. <\/span><span style = \"font-weight:bold;\">Properly stitched images should have a file size of about 87-89 MB.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161783,"guid":"3CB859609D4911EB8D4DA5CBA7BF9727","previous_id":1169189,"previous_guid":"9A9B1F10A84111EB82977FFDCF73DE44","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"ACAC2F9C45844692AD336C4D6839F77D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"FC4899B44AF043058658BE6D78E74811","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">At this point, we're ready to analyze these images with CellProfiler. What we'll be doing is making a \"Batch\" file with CellProfiler, then uploading everything to the cluster, and running the actual CellProfiler analysis on the cluster.<\/div><div class = \"text-block\">CellProfiler has documentation about how to make these \"Batch\" files here: <\/div><div class = \"text-block\"><a href=\"http:\/\/cellprofiler-manual.s3.amazonaws.com\/CellProfiler-3.0.0\/help\/other_batch.html\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">http:\/\/cellprofiler-manual.s3.amazonaws.com\/CellProfiler-3.0.0\/help\/other_batch.html<\/span><\/a><\/div><div class = \"text-block\">. It's missing a few pieces of information, and is also a bit outdated, so I'll go over what needs to be done in this section too.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161786,"guid":"4341F9709D4A11EB8D4DA5CBA7BF9727","previous_id":1161783,"previous_guid":"3CB859609D4911EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B76CAF223E2942B289FCE16BBCC39BF2","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"D9D432F279C443CDA962866D278D580D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Here you'll move the Stitched_Image folders we made in the last section into a new folder. Make a folder with the following structure:<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrpbcmhf.jpg\" \/><\/div><div class = \"text-block\">The Stitched Images folders are the ones we made in the step above.<\/div><\/div>"}},{"id":1054725,"guid":"8AC5538311084C009B7E1F7F3BEBD295","order_id":2,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrpbcmhf.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161788,"guid":"5BEF59209D4C11EB8D4DA5CBA7BF9727","previous_id":1161786,"previous_guid":"4341F9709D4A11EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1F0D7C04E48E40B9878CCFC62DD709A0","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"FCEF6E2545F14C029792D87870068F68","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Get the pipeline file for CellProfiler to use: <\/div><div class = \"text-block\"><span>Now open up CellProfiler, go to File -> Import -> Pipeline From File... and load the <\/span><span style = \"font-weight:bold;\">JC_CRANIUM_Pipeline.cpipe <\/span><span>pipeline.<\/span><\/div><\/div>"}},{"id":1054725,"guid":"D727E1E0A9FC11EB8621E7A109186BA5","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfrdbcmhf.cppipe","placeholder":"","original_name":"JC_CRANIUM_Pipeline_v2.cppipe"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161803,"guid":"720401009D5811EB8D4DA5CBA7BF9727","previous_id":1161788,"previous_guid":"5BEF59209D4C11EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"537342D9CFA244D6ABE6DAC3644A1A37","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"3A1BA06AB9954620B71C5EE8A7B01157","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Drag the 'Images' folder (that contains all of the Stitched_Images subfolders) into the Images module at the very top where it says \"Drop files and folders here\"<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161804,"guid":"A54B23E09D5811EB8D4DA5CBA7BF9727","previous_id":1161803,"previous_guid":"720401009D5811EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0D3AB4888F3F4086810C3E1985ECCDDE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"4898259F154649B281B248162E51948F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The \"Metadata\", \"NamesAndTypes\", and \"Groups\" modules should recognize and group everything appropriately based on the folder and filenames, so there shouldn't be anything you need to do in those modules.<\/div><div class = \"text-block\"><span>Go to the \"NamesAndTypes\" module, click \"Update\" and <\/span><span style = \"font-weight:bold;\">make a note of how many image sets there are (at the very bottom of the CellProfiler window it should say \"Found __ imaging sets<\/span><span>\"), we'll need this number later when we run this on the cluster.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161805,"guid":"EEBF00F09D5811EB8D4DA5CBA7BF9727","previous_id":1161804,"previous_guid":"A54B23E09D5811EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3668F21A409C4FE38B0CCC9546D9507C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"2D4A7106DFA8483FBC64571D15305275","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Down in the bottom left of the CellProfiler window, click on the <\/span><span style = \"font-weight:bold;\">\"Output Settings\"<\/span><span> button.<\/span><\/div><div class = \"text-block\"><span>For <\/span><span style = \"font-weight:bold;\">\"Default Input Folder:\"<\/span><span> put the absolute path to the \"Images\" folder.<\/span><\/div><div class = \"text-block\">Example: <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">\/Volumes\/SeagateExpansionDrive\/ExamplePlate001\/Images<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>For <\/span><span style = \"font-weight:bold;\">\"Default Output Folder:\"<\/span><span> put the absolute path to the \"output\" folder.<\/span><\/div><div class = \"text-block\">Example:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">\/Volumes\/SeagateExpansionDrive\/ExamplePlate001\/output<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161806,"guid":"4C4093509D5A11EB8D4DA5CBA7BF9727","previous_id":1161805,"previous_guid":"EEBF00F09D5811EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6A36B820EC6148E1BE05054F9374A4E0","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"A82C92ADDDE84461BCBCDB475B0D9C30","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span> Next click on the \"<\/span><span style = \"font-weight:bold;\">CreateBatchFiles<\/span><span>\" module.<\/span><\/div><div class = \"text-block\"><span>For <\/span><span style = \"font-weight:bold;\">Local Root Path:<\/span><span> put all of the path preceding the main parent folder name. So based on the last step, we'd put:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">\/Volumes\/SeagateExpansionDrive\/<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>and for <\/span><span style = \"font-weight:bold;\">Cluster Root Path:<\/span><span> put the directory on the cluster you intend to move these files to. For example, I put everything into my main folder on scratch, which is:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">\/scratch\/rmlab\/1\/Jesse\/<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">The idea here is that the Batch module will take all of the file paths for your images, and replace the \"Local Root Path\" with the \"Cluster Root Path\" so that the file paths will correctly point to the right places on the cluster.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161807,"guid":"915F78B09D5B11EB8D4DA5CBA7BF9727","previous_id":1161806,"previous_guid":"4C4093509D5A11EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"03D2FE2CF13D478E91B41C737E7D2550","order_id":1,"type_id":6,"title":"Section","source":{"title":"Making the CellProfiler Batch file"}},{"id":1054724,"guid":"3539A18CEC4D4278BD5FA30589957B33","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>In the bottom left, click on the \"<\/span><span style = \"font-weight:bold;\">Analyze Images<\/span><span>\" button. <\/span><\/div><div class = \"text-block\"><span>This will take a sec, and then it should create a file called \"<\/span><span style = \"font-weight:bold;\">Batch_Data.h5<\/span><span>\" in the output folder.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1161808,"guid":"F7F805609D6011EB8D4DA5CBA7BF9727","previous_id":1161807,"previous_guid":"915F78B09D5B11EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B2CFEAB725E54E0C83249725A81DA9E1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Getting things ready on the cluster"}},{"id":1054724,"guid":"D5FE413610C14914B0E5A803395E3945","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Now we'll move the whole folder to the cluster. Be sure you're moving it to the exact directory you specified above as the \"Cluster Root Path\".<\/div><div class = \"text-block\">Do this with rsync with the -r flag to move all the subfolders also. To continue our example:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">rsync -r \/Volumes\/SeagateExpansionDrive\/ExamplePlate001 jessecohn@htcf.wustl.edu:\/scratch\/rmlab\/1\/Jesse<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1162147,"guid":"82CE49E09E0311EB8D4DA5CBA7BF9727","previous_id":1161808,"previous_guid":"F7F805609D6011EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DB2221723BF6468B99FFD715B3D8FB03","order_id":1,"type_id":6,"title":"Section","source":{"title":"Getting things ready on the cluster"}},{"id":1054724,"guid":"B5B47BB5BE4140D995F3FE06FEFCD138","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The other two things we'll need are a 'lookup' file to tell each instance of CellProfiler which image sets to analyze, and the sbatch job submission. These are just text files so you can either write them on your computer and move them onto the cluster with rsync or make them in place with vim or nano.<\/div><div class = \"text-block\"><span>The way I like to do this is to have each instance of CellProfiler run on a node with 25GB of memory, and to analyze at most 10 images each. I've never had this run out of memory before. So each line of the lookup file will be telling each instance of cell profiler which Image sets to analyze in the space-delimited format \"<\/span><span style = \"font-weight:bold;\">First Last<\/span><span>\". For instance if you had 45 image sets, your .txt lookup file would just be:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">1 10<\/div><div class = \"text-block\">11 20<\/div><div class = \"text-block\">21 30<\/div><div class = \"text-block\">31 40<\/div><div class = \"text-block\">41 45<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For this example I'd save this as ExamplePlate001_lookup.txt<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1162157,"guid":"E768F5A09E0611EB8D4DA5CBA7BF9727","previous_id":1166712,"previous_guid":"D2216700A47711EB82977FFDCF73DE44","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"329512ABEC474A8D90FC10F7F88E0894","order_id":1,"type_id":6,"title":"Section","source":{"title":"Submitting the job and getting the results"}},{"id":1054724,"guid":"9FA3C8F6ACD646CC8D00EC6707A273AD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Next, for the job submission file, make a .sh file with this as the body:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#!\/bin\/bash<\/div><div class = \"text-block\">#SBATCH --cpus-per-task=1<\/div><div class = \"text-block\">#SBATCH --mem=25000<\/div><div class = \"text-block\">#SBATCH --array=1-20%8<\/div><div class = \"text-block\">module load python\/3.8.8<\/div><div class = \"text-block\">module load py-virtualenv\/16.4.1-python-3.8.8<\/div><div class = \"text-block\">module load jdk<\/div><div class = \"text-block\">read startimage stopimage < <(sed -n ${SLURM_ARRAY_TASK_ID}p ExamplePlate001_lookup.txt )<\/div><div class = \"text-block\">. \/home\/jessecohn\/env\/bin\/activate<\/div><div class = \"text-block\">cellprofiler -p \/scratch\/rmlab\/1\/Jesse\/ExamplePlate001\/output\/Batch_data.h5 -c -r -f ${startimage} -l ${stopimage}<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Also can download here: <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Several parts will need editing:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#SBATCH --array=1-20%8<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span>Change this line to have however many lines are in your lookup file (which you can get with wc -l on your lookup file). Like if you had <\/span><span style = \"font-weight:bold;\">30<\/span><span> lines in your lookup file, it would become <\/span><span style = \"font-weight:bold;\">#SBATCH --array=1-30%8<\/span><span> (the %8 just specifies to only run 8 instances of CellProfiler at a time).<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">read startimage stopimage < <(sed -n ${SLURM_ARRAY_TASK_ID}p ExamplePlate001_lookup.txt )<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Change \"ExamplePlate001_lookup.txt\" to point to your lookup file.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">. \/home\/jessecohn\/env\/bin\/activate<\/div><div class = \"text-block\">cellprofiler -p \/scratch\/rmlab\/1\/Jesse\/ExamplePlate001\/output\/Batch_data.h5 -c -r -f ${startimage} -l ${stopimage}<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">The first line of this section will need to be edited to point to the env where you have CellProfiler. If you installed it using the code from the very first step of the protocol, this will probably just be a matter of replacing 'jessecohn' with your cluster user name.<\/div><div class = \"text-block\">Then in the second line, replace '\/scratch\/rmlab\/1\/Jesse\/ExamplePlate001\/output\/Batch_data.h5' with the path to your Batch_data.h5 file.<\/div><\/div>"}},{"id":1054725,"guid":"A038F4A09E3311EB8D4DA5CBA7BF9727","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/ddaxbcmhf.sh","placeholder":"","original_name":"CellProfilerCall.sh"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1162334,"guid":"02C4F0309E2D11EB8D4DA5CBA7BF9727","previous_id":1166728,"previous_guid":"2E5C1A20A47C11EB82977FFDCF73DE44","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6B075DA38D394B64802BD6115DD748AA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Submitting the job and getting the results"}},{"id":1054724,"guid":"D2AAE7F6AB6C4A1A9B3298FFD76CCC31","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>This will take a while to run, usually a few hours. The output folder should start to fill up with .csv files in the format of \"<\/span><span style = \"font-weight:bold;\">[well]_[day]_output.csv<\/span><span>\" , one for each well on each day. Once all instances of CellProfiler are done running and all of the .csv files have accumulated, you can concatenate them all into one final file by running this command in the output directory:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk 'FNR==1 && NR!=1{next;}{print}' *.csv > ExamplePlate001_Final.csv<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">That's it! The data should be ready to analyze. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1162712,"guid":"891358109ECE11EB8F41A9C368096D02","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2F7062F913B6495F824D613D8CD0B472","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installing a local version of CellProfiler"}},{"id":1054724,"guid":"6DECECD723714373B096170197E82D58","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This step will only need to be done the first time you do this. The version of CellProfiler on the cluster is old, so Eric Martin suggested installing a local version to use. To do this, start up an interactive node on the cluster with a good amount of memory (I can't remember how much I used but I remember it failed the first few times so I ended up requesting quite a bit) and run this code:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">module load python\/3.8.8<\/div><div class = \"text-block\">module load py-pip\/19.0.3-python-3.8.8<\/div><div class = \"text-block\">module load py-virtualenv\/16.4.1-python-3.8.8<\/div><div class = \"text-block\">module load py-wheel\/0.33.1-python-3.8.8<\/div><div class = \"text-block\">module load jdk<\/div><div class = \"text-block\">python3 -m venv env<\/div><div class = \"text-block\">. env\/bin\/activate<\/div><div class = \"text-block\">python3 -m pip install numpy<\/div><div class = \"text-block\">python3 -m pip install\u00a0cellprofiler<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If it fails, request more memory in your interactive node and try again. Get in contact with Eric if you're still having trouble with it.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1166710,"guid":"09A369E0A47711EB82977FFDCF73DE44","previous_id":1162147,"previous_guid":"82CE49E09E0311EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"42F4263135944ABF962C67067416F356","order_id":1,"type_id":6,"title":"Section","source":{"title":"Getting things ready on the cluster"}},{"id":1054724,"guid":"A917F67FED334C369B670CF4D1437F45","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">If you have a lot of image sets, you can use python to quickly make the lookup file. First enter the python interactive mode:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python3<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1166711,"guid":"682B6530A47711EB82977FFDCF73DE44","previous_id":1166710,"previous_guid":"09A369E0A47711EB82977FFDCF73DE44","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"CCEDBF19D27849DFBB179EBAB2DEE16E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Getting things ready on the cluster"}},{"id":1054724,"guid":"77FC61235ED0441389F4F0BBC41F54B3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Change the following code to make the file in the right directory and with a useful name, and change the \"total\" variable to reflect the total number of image sets you have:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">with open('\/scratch\/rmlab\/1\/Jesse\/ExamplePlate001_lookup.txt', 'w') as file:<\/div><div class = \"text-block\">    total = 45<\/div><div class = \"text-block\">    starts = list(range(1, (total + 1), 10))<\/div><div class = \"text-block\">    stops = list(range(10, total, 10)) + [total]<\/div><div class = \"text-block\">    for start, stop in zip(starts, stops):<\/div><div class = \"text-block\">        _ = file.write('{} {}\\n'.format(start, stop))<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1166712,"guid":"D2216700A47711EB82977FFDCF73DE44","previous_id":1166711,"previous_guid":"682B6530A47711EB82977FFDCF73DE44","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B3ED35C84C06466D9246AB6A72232AC4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Getting things ready on the cluster"}},{"id":1054724,"guid":"02DBE4BC865A44F287363BF3F060B472","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Exit the python interactive mode:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">exit()<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">You should now have the lookup file in the place you specified in the above code.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1166728,"guid":"2E5C1A20A47C11EB82977FFDCF73DE44","previous_id":1162157,"previous_guid":"E768F5A09E0611EB8D4DA5CBA7BF9727","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5D9BF5AA19F24FCDA8292BE87D771ECC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Submitting the job and getting the results"}},{"id":1054724,"guid":"BC4EF2732E0446E898A9EEA6AA76063D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Submit the sbatch file.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">sbatch CellProfilerCall.sh<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1169189,"guid":"9A9B1F10A84111EB82977FFDCF73DE44","previous_id":1161435,"previous_guid":"0EC089709CA811EB9C1AA50DFB240E10","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1494F44E658E4AF39F56078E6324D3AC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Stitching Images"}},{"id":1054724,"guid":"CEAABA7DE65B4893A10905D33D7D5DE3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Occasionally this may not make properly stitched images for some wells. You can usually tell quickly because the filesize will be significantly different from 87-89 MB. In that case you can try the \"StitchImagesOnBF\" script, which uses the Brightfield channel instead of the Green channel to do the stitching:<\/div><div class = \"text-block\">and the same 2nd stitch macro from above. Do the same process as above but pointing the firstmacro location to FirstStitchBF.ijm<\/div><\/div>"}},{"id":1054725,"guid":"C6CDAA80A84111EB82977FFDCF73DE44","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfedbcmhf.py","placeholder":"","original_name":"StitchImagesOnBF.py"}},{"id":1054726,"guid":"D23AF840A84211EB82977FFDCF73DE44","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dfefbcmhf.ijm","placeholder":"","original_name":"FirstStitchBF.ijm"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol describes the pipeline I've been using to analyze images from the InCell of the Kampmann i3N-CRISPRi cell lines. The broad overall steps are:<\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">Clean up the folder of images from the InCell (makes a folder per well, with subfolders for Red, Green, Brightfield)<\/li><li style = \"counter-reset:ol0;\">Use Fiji\/ImageJ to stitch together the images from each well<\/li><li style = \"counter-reset:ol0;\">Create a CellProfiler batch file for the stitched images<\/li><li style = \"counter-reset:ol0;\">Run the CellProfiler analysis on the cluster<\/li><li style = \"counter-reset:ol0;\">Collapse all of the CellProfiler output csv's to a single file for analysis<\/li><\/ol><\/div><div class = \"text-block\">Some of these steps could likely still be streamlined, I just haven't done it yet.<\/div><div class = \"text-block\">To follow this pipeline you'll need to be using the same settings on the InCell that I used for imaging (the JCohn_20x_Neurons_2 protocol on the InCell).<\/div><div class = \"text-block\">If you change any of the settings for these things, there are places in the pipeline that will need tweaking accordingly.<\/div><div class = \"text-block\"><span>All of the scripts and pipelines needed at various steps are attached to that step or available at: <\/span><a href=\"https:\/\/github.com\/jc6213\/CRANIUM\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/jc6213\/CRANIUM<\/span><\/a><span> . There are also example analysis Jupyter Notebooks there for ease.<\/span><\/div><\/div>","changed_on":1619820883}