{"id":50919,"title":"Using polyan: a Python package for modelling polysome profiles from ribosome density data","title_html":"<p>Using polyan: a Python package for modelling polysome profiles from ribosome density data<\/p>","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/duqbfnq6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/duqbfnq6.jpg"},"doi":"dx.doi.org\/10.17504\/protocols.io.bvyfn7tn","doi_status":2,"uri":"using-polyan-a-python-package-for-modelling-polyso-bvyfn7tn","type_id":1,"template_id":5,"published_on":1624179986,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":1,"version_data":{"id":"1","code":"bvyfn7tn","parent_id":38776,"parent_uri":"using-polyan-a-python-package-for-modelling-polyso-bh4yj8xw","is_same_owner":true,"has_pending_merge_request":false,"has_approved_merge_request":true},"created_on":1624174241,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Tobias von der Haar","affiliation":"University of Kent","affiliations":[{"affiliation":"University of Kent","url":"www.kent.ac.uk","is_default":1}],"username":"tobias-von-der-haar","note":null,"link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":5,"image":{"source":"\/img\/badges\/star.svg","placeholder":"\/img\/badges\/star.svg"},"name":"Early adopter"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":12,"authors":[{"name":"Tobias von der Haar","affiliation":"University of Kent","affiliations":[],"username":"tobias-von-der-haar","note":null,"link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/using-polyan-a-python-package-for-modelling-polyso-bvyfn7tn","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"8C2BE896F22844188DB0EBE0DAD03670","state_version_id":719,"steps":[{"id":1199350,"guid":"9D69F8027612424D988FAB3C370C3D0A","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"BDA830C7019E495E931927252E3F5D07","order_id":1,"type_id":6,"title":"Section","source":{"title":"General Functionality"}},{"id":1054724,"guid":"2DDC28488BA7485397EE9E6851D6A315","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan provides Python functions for modelling polysome profiles from input data that specify transcript abundance and ribosome occupancy of transripts for an organism or cell. Typically, such data are intended to be the result of <\/div><div class = \"text-block\"><a href=\"https:\/\/en.wikipedia.org\/wiki\/Ribosome_profiling\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ribosome footprinting<\/span><\/a><\/div><div class = \"text-block\"> experiments, but in principle any experimental or computational technique that yields information on how many ribosomes are bound to the transcripts can be used as input.<\/div><div class = \"text-block\">polyan currently provides three main functions: fp2poly() calculates peak volume information for a modelled polysome profile, based on a single input dataset. plot_poly() generates plotting coordinates for the modelled profile, which can then be plotted using standard Python plotting functions. nrmsd_profile() calculates a numerical value for the similarity between two polysome profiles.<\/div><div class = \"text-block\">A fourth function, compare_profiles(), reads in ribosome density data for two conditions and maps the principal shifts between modelled polysome peaks between these two conditions, thereby providing a coarse road map of translational control under these conditions.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199351,"guid":"FFFC676A37FB4BB092C37EC6B26DA950","previous_id":1199350,"previous_guid":"9D69F8027612424D988FAB3C370C3D0A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A69FBB48F2CC4A86BD46A89D35E9012D","order_id":1,"type_id":6,"title":"Section","source":{"title":"General Functionality"}},{"id":1054724,"guid":"39625A58430348DF87778B4B946AC8CD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/duqdfnq6.jpg\" \/><\/div><\/div>"}},{"id":1054725,"guid":"4D22634F7AE6475EBC5B1A925F810CC4","order_id":2,"type_id":17,"title":"result","source":{"body":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Example output from polyan is shown below, including a modelled polysome profile calculated from NCBI GEO dataset <\/span><a href=\"https:\/\/www.ncbi.nlm.nih.gov\/geo\/query\/acc.cgi?acc=GSE87614\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">GSE87614<\/span><\/a><span> from <\/span><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/28546148\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Zinshteyn et al. 2017<\/span><\/a><span> (left), and the compare_profile() output for two datasets from <\/span><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/26052047\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Nedialkova and Leidel 2015<\/span><\/a><span> (right), mapping the major upward and downward movement of mRNAs upon treatment with rapamycin.<\/span><\/div><\/div>"}},{"id":1054726,"guid":"01405F92BE204B0C9ABBDB93B3086868","order_id":3,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/duqdfnq6.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199352,"guid":"CB5390A7C4B74B2DA0BA831C1CAA7A88","previous_id":1199351,"previous_guid":"FFFC676A37FB4BB092C37EC6B26DA950","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"BE559DB3A4A94F6F844A907724609100","order_id":1,"type_id":6,"title":"Section","source":{"title":"Prerequisites"}},{"id":1054724,"guid":"D27AD290CD314D8BBC530E2DF5ACAA1C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan has been tested on Windows and Linux systems running Python 3.7.6, which was installed as part of the <\/div><div class = \"text-block\"><a href=\"https:\/\/www.anaconda.com\/products\/individual\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Anaconda package<\/span><\/a><\/div><div class = \"text-block\">. However, polyan should run in all Python 3-based environments.<\/div><div class = \"text-block\">polyan has a number of dependencies on other packages, all of which should be available as part of any standard python installation, including pandas, numpy, pyplot, scipy and json.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199353,"guid":"9A107DB3150144DABA96DE0CEB479EFA","previous_id":1199352,"previous_guid":"CB5390A7C4B74B2DA0BA831C1CAA7A88","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7540441BC8944BCC8DDDF7E9159D81B4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installation"}},{"id":1054724,"guid":"793A2EF5C2CC4AF99DF87B0A1C811B70","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The polyan package is available from pypi using the pip installer, which is included with most Python distributions. For installation , execute<\/div><div class = \"text-block\">Where Python was installed as part of Anaconda in windows, this command may need to be executed in an Anaconda prompt window rather than a general command prompt window.<\/div><\/div>"}},{"id":1054725,"guid":"7BFF13E0BB7A11EAB7ED93B330C6025A","order_id":2,"type_id":15,"title":"command","source":{"id":8927,"name":"pip install polyan","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199354,"guid":"265CD7A29D4F413F815044048E78B3A5","previous_id":1199353,"previous_guid":"9A107DB3150144DABA96DE0CEB479EFA","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"65A05D81F1394C87A1FFE72C46FD244C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installation"}},{"id":1054724,"guid":"3187836D55CB49899B9042DCDEE30DFF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Import polyan into your Python environment by executing<\/div><\/div>"}},{"id":1054725,"guid":"F38770E0BB7C11EAB7ED93B330C6025A","order_id":2,"type_id":15,"title":"command","source":{"id":8928,"name":"import polyan","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199355,"guid":"7C6B70A4368641ADBA9CB2BA6785B649","previous_id":1199354,"previous_guid":"265CD7A29D4F413F815044048E78B3A5","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"016EC5940E644341BEE0C04D1D206643","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data preparation"}},{"id":1054724,"guid":"FDEAD024723742FA8C956CC5AB5C12C1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan requires the source data to be formatted as a Pandas dataframe, which needs to contain at least two columns for gene names and Ribo-Seq data, and may contain a third column for RNA-Seq data. Where no RNA abundance data are specified, a reference dataset is used for RNA abundances. The dataframe can contain additional columns but this will result in a warning of columns not being used for calculations.<\/div><div class = \"text-block\">Dataset columns must be in the order gene names, Ribo-Seq data, RNA-Seq data. The Seq data must be provided as counts per gene (ie not as RPK or RPKM values which are normalised to gene length). Recommended gene names are systematic gene names for yeast (eg YAL005C), and ENSEMBL gene names for human genes (eg ENSG00000210100). Conventional gene names or systematic transcript names may work as well.<\/div><div class = \"text-block\">An example yeast dataset is attached ( <\/div><div class = \"text-block\"> ), which if present in the working directory can be loaded into a dataframe by executing<\/div><\/div>"}},{"id":1054725,"guid":"03590B50D19D11EB8AAFD93A622B5E0F","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dup7fnq6.csv","placeholder":"","original_name":"GSE87614.csv"}},{"id":1054726,"guid":"066540A0BB9D11EA9D7F5B4BEBAE1C4D","order_id":3,"type_id":15,"title":"command","source":{"id":8929,"name":"import pandas as pd\ndf = pd.read_csv('GSE87614.csv')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199356,"guid":"BBFC6191EFF044629B30BA6B40E018E5","previous_id":1199355,"previous_guid":"7C6B70A4368641ADBA9CB2BA6785B649","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A1BD3E1527B448598E63992048AE4356","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data preparation"}},{"id":1054724,"guid":"65FECABB0BD4482297CF9251B9C228F9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>At the time of publication, polyan provides support datasets for <\/span><span style = \"font-style:italic;\">Saccharomyces cereisiae<\/span><span> and for human HEK293 cells. It is possible to use polyan with any other organism, but then support datasets need to be provided by the user including a reference list of gene names with corresponding transcript lengths.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199358,"guid":"CBC182FBB90D40428CA90226B97940DD","previous_id":1199356,"previous_guid":"BBFC6191EFF044629B30BA6B40E018E5","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4128ACA16E71445EAB59FEAF457FB49B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Modelling polysome profiles"}},{"id":1054724,"guid":"BA712AFB180440619F6BAE1853AD0393","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Polysome profiles can be modelled by consecutive execution of the fp2poly() and plot_poly() functions, followed by plotting of the x and y coordinates returned by plot_poly() using general plotting packages such as pyplot. The default settings of fp2poly() work on yeast data including RNA-Seq data as part of the dataset and conforming to the requirements explained in steps 6-8, as is the case for the dataset loaded in step 6. Provided that polyan has been installed and imported correctly, peak volumes for this dataset can be generated by executing<\/div><div class = \"text-block\">and coordinates for the polysome trace can be calculated from peak_vols by executing<\/div><div class = \"text-block\">\"trace\" is a list containing two vectors corresponding to the x- and y-axis coordinates, respectively.<\/div><div class = \"text-block\">These coordinates can then be plotted  via any suitable plotting package. The example output shown in step 2 can be reproduced using pyplot by executing<\/div><\/div>"}},{"id":1054725,"guid":"8CF7CBC0BBA111EA9D7F5B4BEBAE1C4D","order_id":2,"type_id":15,"title":"command","source":{"id":8930,"name":"peak_vols = polyan.fp2poly(df)","command_name":"","command":null,"os_name":"python","os_version":"3"}},{"id":1054726,"guid":"AAA1A330BBA111EA9D7F5B4BEBAE1C4D","order_id":3,"type_id":15,"title":"command","source":{"id":8931,"name":"trace = polyan.plot_poly(peak_vols)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054727,"guid":"180574E0BCFD11EA8DC571BF9637D72B","order_id":4,"type_id":15,"title":"command","source":{"id":8932,"name":"import matplotlib.pyplot as plt\nfig,ax = plt.subplots()\nax.scatter(trace[0],trace[1],s=2,c='black')\nplt.show()","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199359,"guid":"E615FAF3D04B4A6C826C063DB08DAB55","previous_id":1199362,"previous_guid":"75D439A0D19F11EB8AAFD93A622B5E0F","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F7A5D82583CE4B75B122616AB5DED601","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping movement between polysome peaks"}},{"id":1054724,"guid":"D8896A9749B44FA391ECB7FBB4FB7A94","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Changes in ribosome density between two conditions can be mapped using the compare_profiles() function of polyan. the results are trturned as pyplot fig and ax objects, which can be visualised using the plt.show() function of pyplot. To compare how transcripts shift between modelled polysome peaks eg when comparing  two datasets stored in two dataframes df1 and df2, execute <\/div><div class = \"text-block\">The example output shown in step 2 was generated by comparing datasets <\/div><div class = \"text-block\"> and <\/div><div class = \"text-block\"> , from the data by <\/div><div class = \"text-block\"><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/26052047\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Nedialkova and Leidel (2015)<\/span><\/a><\/div><div class = \"text-block\">.<\/div><\/div>"}},{"id":1054725,"guid":"6CDA0340BD0311EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":8933,"name":"polyan.compare_profiles(df1,df2)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"89CF8960BD0411EA9AB10931DCB43981","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdppfnq6.csv","placeholder":"\/img\/extensions\/csv.png","original_name":"GSE67387_WT.csv"}},{"id":1054727,"guid":"964D5230BD0411EA9AB10931DCB43981","order_id":4,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdpqfnq6.csv","placeholder":"\/img\/extensions\/csv.png","original_name":"GSE67387_rapamycin.csv"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199360,"guid":"E022C33E03A844FF842E9BF88FFA6116","previous_id":1199361,"previous_guid":"5ACCA31BF6D44ECA8971701B95D85EF2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0FA73DF01C0743E0B2DC80C5501A772E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Changing parameters for fp2poly()"}},{"id":1054724,"guid":"EA8AE114EB254C3296B3ABB9DBFA29C3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Where datasets only contain gene names and Ribo_seq data, the inbuilt reference RNA dataset can be used by setting has_RNA to False.<\/div><div class = \"text-block\">Where multiple dataset are being processed some of which contain RNA data and some of which don't, these can be processed using Python try and except.<\/div><\/div>"}},{"id":1054725,"guid":"5C222850BD0511EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":8934,"name":"polyan.fp2poly(df, has_RNA=False)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"8D5DD270D1A411EB9EA8CF96BD2A4661","order_id":3,"type_id":15,"title":"command","source":{"id":8936,"name":"try:\n    polyan.fp2poly(df)\nexcept:\n    polyan.fp2poly(df, has_RNA=False)","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199361,"guid":"5ACCA31BF6D44ECA8971701B95D85EF2","previous_id":1199358,"previous_guid":"CBC182FBB90D40428CA90226B97940DD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3CA9EF2A511A46F1985E0FC330429272","order_id":1,"type_id":6,"title":"Section","source":{"title":"Changing parameters for fp2poly()"}},{"id":1054724,"guid":"7F7DDFA4658F4F1D8C624C0D5DF5C1AB","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>fp2_poly currently provides context data (gene lengths and generic RNA abundance data) for <\/span><span style = \"font-style:italic;\">S.cerevisiae<\/span><span> and for HEK293 cells (the HEK293 parameters will likely work for many cultured human cell types if RNA-Seq data are provided as part of the dataset). <\/span><\/div><div class = \"text-block\">Which parameter set to use is specified by the parset parameter, which can either be 'Scer' (default) or 'HEK'. To calculate peak volumes for a HEK293 dataset containing RNA-Seq data, the command is<\/div><div class = \"text-block\">The order of the column names must always be Gene names, then Ribosome density data, then RNA abundance data (if used). <\/div><\/div>"}},{"id":1054725,"guid":"89A09F40BD0611EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":8935,"name":"peak_vols = polyan.fp2poly(df,parset='HEK')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1199362,"guid":"75D439A0D19F11EB8AAFD93A622B5E0F","previous_id":1199360,"previous_guid":"E022C33E03A844FF842E9BF88FFA6116","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C214ED0245FA4D32A624D465BC599AFA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Calculating nRMSD"}},{"id":1054724,"guid":"1BD5C8AC5E204578BF1D1CB278E95B8D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To assess the similarity between two datasets, polyan.nrmsd_profile() can be used on two peak volume arrays calculated with fp2poly.<\/div><div class = \"text-block\">It is also possible to calculate the nRMSD to an inbuilt reference profile, but then the organism must be specified by setting the parset parameter (currently 'Scer' or 'HEK', 'Scer' being default).<\/div><div class = \"text-block\">The nRMSD expresses the similarity relative to the average similarity expected when two random profiles are drawn from the collection of datasets we used in our work. <\/div><div class = \"text-block\">The intended use is for comparing candidate data against a \"known good\" dataset, in which case nRMSD values below 0.7 indicate that the modelled polysome profile of the candidate dataset is relatively similar to the \"known good\" reference, whereas values approaching or exceeding 1 indicate that the profiles are not similr and candidate dataset may be problematic. This assessment should be accompanied by a visual inspection of the modeled profiles using polyan.plot_poly() as shown above.<\/div><\/div>"}},{"id":1054725,"guid":"A048A810D1A411EB9EA8CF96BD2A4661","order_id":2,"type_id":15,"title":"command","source":{"id":8937,"name":"pv1 = polyan.fp2poly(df1)\npv2 = polyan.fp2poly(df2)\npolyan.nrmsd_profile(pv1,pv2)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"AFA526D0D1A411EB9EA8CF96BD2A4661","order_id":3,"type_id":15,"title":"command","source":{"id":8938,"name":"pv1 = polyan.fp2poly(df1)\npolyan.nrmsd_profile(pv1,'ref, parset='Scer')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">The assessment of transcriptome-wide ribosome binding to mRNAs is useful for studying the dynamic regulation of protein synthesis in living cells. Two methods frequently applied in eukaryotic cells that operate at different levels of resolution are polysome profiling, which reveals the distribution of ribosome loads across the transcriptome, and ribosome footprinting (also termed ribosome profiling or Ribo-Seq), which when combined with appropriate data on mRNA expression levels can reveal ribosome densities on individual transcripts. we have provided Python functions for relating the information content of these two methods to one another, by reconstructing theoretical polysome profiles from ribosome footprinting data. Modelled polysomes are useful for assessing dataset quality in a simple, visual approach that is useful for validating and analysing ribosome footprinting datasets .<\/div><\/div>","changed_on":1624179986}