{"id":38776,"title":"Using polyan: a Python package for modelling polysome profiles from ribosome density data","title_html":"<p>Using polyan: a Python package for modelling polysome profiles from ribosome density data<\/p>","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdp4fnq6.jpeg","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdp4fnq6.jpeg"},"doi":null,"doi_status":0,"uri":"using-polyan-a-python-package-for-modelling-polyso-bh4yj8xw","type_id":1,"template_id":5,"published_on":1593772596,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"created_on":1593594162,"categories":null,"creator":{"name":"Tobias von der Haar","affiliation":"University of Kent","affiliations":[{"affiliation":"University of Kent","url":"www.kent.ac.uk","is_default":1}],"username":"tobias-von-der-haar","link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[{"id":3,"image":{"source":"\/img\/badges\/silver.svg","placeholder":"\/img\/badges\/silver.svg"},"name":"Power author!"},{"id":5,"image":{"source":"\/img\/badges\/star.svg","placeholder":"\/img\/badges\/star.svg"},"name":"Early adopter"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":12,"authors":[{"name":"Tobias von der Haar","affiliation":"University of Kent","affiliations":[],"username":"tobias-von-der-haar","link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/using-polyan-a-python-package-for-modelling-polyso-bh4yj8xw","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":1,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":1,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"98A07170BB7911EAB7ED93B330C6025A","state_version_id":1437,"steps":[{"id":971540,"guid":"A0094360BB7911EAB7ED93B330C6025A","previous_id":971541,"previous_guid":"9EDB5540BB7A11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"91F22653B3714524B99A0680EED84C79","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installation"}},{"id":1054724,"guid":"F550073B2B634834ACB31DA2CE30BED6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The polyan package is available from pypi using the pip installer, which is included with most Python distributions. For installation , execute<\/div><div class = \"text-block\">Where Python was installed as part of Anaconda in windows, this command may need to be executed in an Anaconda prompt window rather than a general command prompt window.<\/div><\/div>"}},{"id":1054725,"guid":"7BFF13E0BB7A11EAB7ED93B330C6025A","order_id":2,"type_id":15,"title":"command","source":{"id":7541,"name":"pip install polyan","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971541,"guid":"9EDB5540BB7A11EAB7ED93B330C6025A","previous_id":971641,"previous_guid":"80AA0C10BB7F11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"45E9EBC3106B438799107034E6E9960C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Prerequisites"}},{"id":1054724,"guid":"CE9772C39FC84901870045D04D5DF323","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan has been tested on Windows and Linux systems running Python 3.7.6, which was installed as part of the <\/div><div class = \"text-block\"><a href=\"https:\/\/www.anaconda.com\/products\/individual\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Anaconda package<\/span><\/a><\/div><div class = \"text-block\">. However, polyan should run in all Python 3-based environments.<\/div><div class = \"text-block\">polyan has a number of dependencies on other packages, all of which should be available as part of any standard python installation, including pandas, numpy, pyplot, scipy and json.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971542,"guid":"AD6074E0BB7C11EAB7ED93B330C6025A","previous_id":971540,"previous_guid":"A0094360BB7911EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5DE0CBCA96DF40A29B52BDAA77AE18E7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installation"}},{"id":1054724,"guid":"690A74C013FB4F868DD10C741FB91B85","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Import polyan into your Python environment by executing<\/div><\/div>"}},{"id":1054725,"guid":"F38770E0BB7C11EAB7ED93B330C6025A","order_id":2,"type_id":15,"title":"command","source":{"id":7542,"name":"import polyan","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971545,"guid":"90760060BB7D11EAB7ED93B330C6025A","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"298689FB758B4D8EBA622BA6C632796D","order_id":1,"type_id":6,"title":"Section","source":{"title":"General Functionality"}},{"id":1054724,"guid":"0483C073CF0046A8ACD81E0B96548BF0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan provides a number of Python functions for modelling polysome profiles from input data that relate to the transcript abundance and Ribosome occupancy for an organism. Typically, such data are intended to be the result of <\/div><div class = \"text-block\"><a href=\"https:\/\/en.wikipedia.org\/wiki\/Ribosome_profiling\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">ribosome footprinting<\/span><\/a><\/div><div class = \"text-block\"> experiments, but in principle any experimental or computational technique that yields information on how many rbosomes are bound to the transcripts of an organisms can be used as input.<\/div><div class = \"text-block\">polyan currently provides three functions: fp2poly() calculates peak volume information for a modelled polysome profile, based on a single input dataset. plot_poly() generates plotting coordinates for the modelled profile, which can then be plotted using standard Python plotting functions. compare_profiles() reads in ribosome density data for two conditions and maps the principal shifts between modelled polysome peaks between these two conditions, thereby providing a road map of translational control under these conditions.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971639,"guid":"53FD6EA0BB7F11EAB7ED93B330C6025A","previous_id":971542,"previous_guid":"AD6074E0BB7C11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7A5B1DD267B04E6A904988121041E553","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data preparation"}},{"id":1054724,"guid":"7B715ABD52A4457DB6A4F189B929F482","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">polyan requires the source data to be formatted as a pandas dataframe, which needs to contain at least two columns for gene names and Ribosome binding data, and may contain a third column for RNA abundance data. Where no RNA abundance data are specified, generic RNA abundance data are used.<\/div><div class = \"text-block\">An example dataset is attached ( <\/div><div class = \"text-block\"> ), which if present in a working directory can be loaded into a dataframe by executing<\/div><\/div>"}},{"id":1054725,"guid":"79B3F2F0BB9C11EA9D7F5B4BEBAE1C4D","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdgifnq6.csv","placeholder":"\/img\/extensions\/csv.png","original_name":"GSE87614.csv"}},{"id":1054726,"guid":"066540A0BB9D11EA9D7F5B4BEBAE1C4D","order_id":3,"type_id":15,"title":"command","source":{"id":7543,"name":"import pandas as pd\ndf = pd.read_csv('GSE87614.csv')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971640,"guid":"5C62C900BB7F11EAB7ED93B330C6025A","previous_id":971806,"previous_guid":"DC8CC740BB9B11EA9D7F5B4BEBAE1C4D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A66F8017E16B48B0BEBAB5509DBE0F42","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data preparation"}},{"id":1054724,"guid":"62C732ACEA30418C819ED3EF343E8E8F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The default column names of the dataframe are ORF, RNA_Prints and Ribo_Prints. Other column names can be used but then columns containing the data need to be explicitly listed when the polyan functions are executed. The ORF column must list systematic gene names for S. cerevisiae (eg YAL004W), and the ENSEMBL gene name for human genes (eg ENSG00000210100). RNA_Prints and RIbo_Prints must contain data proportional to the number of observed prints in Next Generation Sequencing (NGS) experiments, ie must not contain RPKM data. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971641,"guid":"80AA0C10BB7F11EAB7ED93B330C6025A","previous_id":971545,"previous_guid":"90760060BB7D11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A2A2B2847EB74F9B9D2A8C79DE35D1F4","order_id":1,"type_id":6,"title":"Section","source":{"title":"General Functionality"}},{"id":1054724,"guid":"7D132D43AE704DE0BD8DEBEE0D01D211","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Example output from polyan is shown below, including a modelled polysome profile calculated from NCBI GEO dataset <\/div><div class = \"text-block\"><a href=\"https:\/\/www.ncbi.nlm.nih.gov\/geo\/query\/acc.cgi?acc=GSE87614\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">GSE87614<\/span><\/a><\/div><div class = \"text-block\"> from <\/div><div class = \"text-block\"><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/28546148\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Zinshteyn et al. 2017<\/span><\/a><\/div><div class = \"text-block\"> (left), and the compare_profile() output for two datasets from <\/div><div class = \"text-block\"><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/26052047\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Nedialkova and Leidel 2015<\/span><\/a><\/div><div class = \"text-block\"> (right), mapping the major upward and downward movement of mRNAs upon treatment with rapamycin.<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdgefnq6.png\" \/><\/div><\/div>"}},{"id":1054725,"guid":"60A9FCA76D874E9B88C2495B6BD24B5B","order_id":2,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdgefnq6.png\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971806,"guid":"DC8CC740BB9B11EA9D7F5B4BEBAE1C4D","previous_id":971639,"previous_guid":"53FD6EA0BB7F11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3ECC82D4F782412BA8064BB4F2DF342E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Data preparation"}},{"id":1054724,"guid":"42625D1C09EB4501BFB71D0FBC75BDB3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>polyan provides support datasets for <\/span><span style = \"font-style:italic;\">Saccharomyces cereisiae<\/span><span> and for human HEK293 cells. It is possible to use polyan with any other organism, but then support datasets need to be provided by the user including a reference list of gene names with corresponding transcript lengths.<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":971819,"guid":"FC434CB0BB9D11EA9D7F5B4BEBAE1C4D","previous_id":971640,"previous_guid":"5C62C900BB7F11EAB7ED93B330C6025A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DDB9AA89228A42889B07D7DDA5984BB4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Modelling polysome profiles"}},{"id":1054724,"guid":"A9A0518B23BA46618B6EFBD19287E6AD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Polysome profiles can be modelled by consecutive execution of the fp2poly() and plot_poly() functions, followed by plotting of the x and y coordinates provided by plot_poly() using general plotting packages such as pyplot. The default settings of fp2poly() work on yeast data conforming to the requirements explained in steps 6-8, as is the case for the dataset loaded in step 6. provided that polyan has been installed and imported correctly, peak volumes for this dataset can be generated by executing<\/div><div class = \"text-block\">and coordinates for the polysome trace can be calculated from peak_vols by executing<\/div><div class = \"text-block\">\"trace\" is a list containing two vectors corresponding to the x- and y-axis coordinates, respectively.<\/div><div class = \"text-block\">These coordinates can then be plotted  via any suitable plotting package. The example output shown in step 2 can be reproduced using pyplot by executing<\/div><\/div>"}},{"id":1054725,"guid":"8CF7CBC0BBA111EA9D7F5B4BEBAE1C4D","order_id":2,"type_id":15,"title":"command","source":{"id":7544,"name":"peak_vols = polyan.fp2poly(df)","command_name":"","command":null,"os_name":"python","os_version":"3"}},{"id":1054726,"guid":"AAA1A330BBA111EA9D7F5B4BEBAE1C4D","order_id":3,"type_id":15,"title":"command","source":{"id":7545,"name":"trace = polyan.plot_poly(peak_vols)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054727,"guid":"180574E0BCFD11EA8DC571BF9637D72B","order_id":4,"type_id":15,"title":"command","source":{"id":7549,"name":"import matplotlib.pyplot as plt\nfig,ax = plt.subplots()\nax scatter(trace[0],trace[1],s=2,c='black')\nplt.show()","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":973857,"guid":"29D00610BD0011EA9AB10931DCB43981","previous_id":971819,"previous_guid":"FC434CB0BB9D11EA9D7F5B4BEBAE1C4D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0B62C7C810FF44B288BE67D48D877AD3","order_id":1,"type_id":6,"title":"Section","source":{"title":"Mapping movement between polysome peaks"}},{"id":1054724,"guid":"E9D634F438A34D4C93DABE52E95C384F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Changes in ribosome density between two conditions can be mapped using the compare_profiles() function of polyan. the results are trturned as pyplot fig and ax objects, which can be visualised using the plt.show() function of pyplot. To compare how transcripts shift between modelled polysome peaks eg when comparing  two datasets stored in two dataframes df1 and df2, execute <\/div><div class = \"text-block\">The example otuput shown in step 2 was generated by comparing datasets <\/div><div class = \"text-block\"> and <\/div><div class = \"text-block\"> , from the data by <\/div><div class = \"text-block\"><a href=\"https:\/\/pubmed.ncbi.nlm.nih.gov\/26052047\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Nedialkova and Leidel (2015)<\/span><\/a><\/div><div class = \"text-block\">.<\/div><\/div>"}},{"id":1054725,"guid":"6CDA0340BD0311EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":7550,"name":"polyan.compare_profiles(df1,df2)","command_name":"","command":null,"os_name":null,"os_version":null}},{"id":1054726,"guid":"89CF8960BD0411EA9AB10931DCB43981","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdppfnq6.csv","placeholder":"\/img\/extensions\/csv.png","original_name":"GSE67387_WT.csv"}},{"id":1054727,"guid":"964D5230BD0411EA9AB10931DCB43981","order_id":4,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/bd3a48f2c5f7674e3e0f7a1b37d9018c6b2795a480ed0d52bca19cc007dfa5b9\/cdpqfnq6.csv","placeholder":"\/img\/extensions\/csv.png","original_name":"GSE67387_rapamycin.csv"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":973861,"guid":"CB7988C0BD0411EA9AB10931DCB43981","previous_id":973857,"previous_guid":"29D00610BD0011EA9AB10931DCB43981","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"72A39E1F98174803AA7D23DB09967F6E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Changing parameters for fp2poly()"}},{"id":1054724,"guid":"03BE0AE98C304E12ACDFBFC4D97C42A8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Where column names in the dataframes differ from the pre-specified \"ORF\",\"RNA_Prints\" and \"Ribo_Prints\", column names to be used can be specified for both fp2poly() and compare profiles. For example where gene names are given in col1, Ribo_Prints in col2 and RNA_Prints in col3:<\/div><div class = \"text-block\">The order of the column names must be Gene names, then Ribosome density data, then RNA abundance data (if used). <\/div><\/div>"}},{"id":1054725,"guid":"5C222850BD0511EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":7551,"name":"polyan.fp2poly(df, df_columns=['col1','col2','col3')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":973862,"guid":"D46C60A0BD0511EA9AB10931DCB43981","previous_id":973861,"previous_guid":"CB7988C0BD0411EA9AB10931DCB43981","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5F899E3957794F6BB7B3BA9AB77A0A35","order_id":1,"type_id":6,"title":"Section","source":{"title":"Changing parameters for fp2poly()"}},{"id":1054724,"guid":"731ACAF91DB34C1684C8FD04E2A35C33","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>fp2_poly currently provides context data (gene lengths and generic RNA abundance data) for <\/span><span style = \"font-style:italic;\">s.cerevisiae<\/span><span> and for HEK293 cells. which parameter set to use is specified by the parset parameter, which can either be parset = 'Scer' (default) or parset = 'HEK'. To calculate peak volumes for a HEK293 dataset with standard column names, the command is<\/span><\/div><\/div>"}},{"id":1054725,"guid":"89A09F40BD0611EA9AB10931DCB43981","order_id":2,"type_id":15,"title":"command","source":{"id":7552,"name":"peak_vols = polyan.fp2poly(df,parset='HEK')","command_name":"","command":null,"os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":null,"changed_on":1593772789}