{"id":51550,"title":"Plasmid Sequence Analysis from Long Reads","title_html":"<p>Plasmid Sequence Analysis from Long Reads<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bwj6pcre","doi_status":2,"uri":"plasmid-sequence-analysis-from-long-reads-bwj6pcre","type_id":1,"template_id":1,"published_on":1626218738,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":4,"version_data":{"id":"4","code":"bwj6pcre","parent_id":45691,"parent_uri":"plasmid-sequence-analysis-from-long-reads-bqu3mwyn","is_same_owner":true,"has_pending_merge_request":false,"has_approved_merge_request":true},"created_on":1626217792,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","note":null,"link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"},{"id":6,"image":{"source":"\/img\/badges\/accelerator.svg","placeholder":"\/img\/badges\/accelerator.svg"},"name":"Science accelerator"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":"","total_collections":0,"number_of_steps":13,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","note":null,"link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/plasmid-sequence-analysis-from-long-reads-bwj6pcre","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"4AC92DDB1B25459081C8BD7D082512A5","state_version_id":71,"steps":[{"id":1212952,"guid":"185E1BC8C4794EEABCD2AC491CB079B0","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7272B01EB7794B199C508E635A9097F6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read file preparation"}},{"id":1054724,"guid":"ED1C6F79119A4C8FB7D929D143C26109","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Demultiplex reads as per protocol <\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.7vmhn46\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><\/div><div class = \"text-block\">.<\/div><br\/><div class = \"text-block\">If this has been done, then the following command should produce output without errors:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls demultiplexed\/reads_${bc}.fq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><div class = \"text-block\">Example output:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">demultiplexed\/reads_BC02.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC03.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC04.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC05.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC07.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC09.fq.gz<\/div><\/div><\/code><\/pre><\/div><br\/><div class = \"text-block\">If the barcode_counts.txt file is missing, the output will look like this:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">awk: fatal: cannot open file `barcode_counts.txt' for reading (No such file or directory)<\/div><\/div><\/code><\/pre><\/div><br\/><div class = \"text-block\">If one or more of the barcode-demultiplexed files are missing, the output will look something like this:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">demultiplexed\/reads_BC02.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC03.fq.gz<\/div><div class = \"text-block\">demultiplexed\/reads_BC04.fq.gz<\/div><div class = \"text-block\">ls: cannot access 'demultiplexed\/reads_BC05.fq.gz': No such file or directory<\/div><div class = \"text-block\">ls: cannot access 'demultiplexed\/reads_BC07.fq.gz': No such file or directory<\/div><div class = \"text-block\">demultiplexed\/reads_BC09.fq.gz<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212953,"guid":"77E2434D78B94EEDBB96640216C49A1C","previous_id":1212964,"previous_guid":"8FCA5590E42F11EB817CD7CADF3AD033","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"65E37895C7F7472C9CBC20D75E684B70","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read file preparation"}},{"id":1054724,"guid":"EF8953A483F64667ADA4706294CA04F8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create a directory to store results files<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir results<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212954,"guid":"8621B8A6D27D42AFA54ADACE0D31165C","previous_id":1212953,"previous_guid":"77E2434D78B94EEDBB96640216C49A1C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4427B6527CE74AEAB00DA78B73F7A92A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read file preparation"}},{"id":1054724,"guid":"B8A62F6D8603448894833140BEE6E05D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Determine the N50\/L50 read length for each barcode. This will be used as the initial guess at the assembly size.<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">(for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">    do echo -n ${bc};<\/div><div class = \"text-block\">    fastx-length.pl demultiplexed\/reads_${bc}.fq.gz 2>&1 > \/dev\/null | \\<\/div><div class = \"text-block\">      grep L50 | awk '{print \"\\t\"$5$6}' | perl -pe 's\/b$\/\/';<\/div><div class = \"text-block\"> done) > results\/read_L50.txt<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">This file can be viewed to confirm the assembly lengths:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">BC02    347<\/div><div class = \"text-block\">BC03    8.904k<\/div><div class = \"text-block\">BC04    8.888k<\/div><div class = \"text-block\">BC05    10.262k<\/div><div class = \"text-block\">BC07    11.076k<\/div><div class = \"text-block\">BC09    11.093k<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-style:italic;\">Note: this file will be used for subsequent downstream processing. If any of these barcodes shouldn't be processed further, feel free to remove the corresponding lines from this file<\/span><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212955,"guid":"034B7CE914934AEE87E087FBE93AE79B","previous_id":1212954,"previous_guid":"8621B8A6D27D42AFA54ADACE0D31165C","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6EE9A163276B4D7F8899919DBB7740A9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read filitering"}},{"id":1054724,"guid":"E1A5584337214631B87D36D0530C0471","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Filter out any reads that are less than half of the target read length, and determine the average quality of the remainder, keeping information on (at most) 100 of the highest-quality reads:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do echo ${bc} ${len};<\/div><div class = \"text-block\">  ~\/scripts\/fastx-compstats.pl demultiplexed\/reads_${bc}.fq.gz | \\<\/div><div class = \"text-block\">    sort -t ',' -k 16rn,16 | \\<\/div><div class = \"text-block\">    awk -F ',' -v \"len=${len}\" \\<\/div><div class = \"text-block\">      'BEGIN{if(match(len, \"k\") > 0){sub(\"k\",\"\",len); len=len*1000}}<\/div><div class = \"text-block\">       {if($18 > (len \/ 2)){print}}' | \\<\/div><div class = \"text-block\">    head -n 100 | grep -v '^name' > results\/bestLong_100X_${bc}.csv;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Check how successful the sequencer was at getting 100X coverage by counting lines:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">wc -l results\/bestLong_100X_*.csv<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output. In this case BC02 has fewer than 100 reads, so the assembly is less likely to be high-quality:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">  90 results\/bestLong_100X_BC02.csv<\/div><div class = \"text-block\"> 100 results\/bestLong_100X_BC03.csv<\/div><div class = \"text-block\"> 100 results\/bestLong_100X_BC04.csv<\/div><div class = \"text-block\"> 100 results\/bestLong_100X_BC05.csv<\/div><div class = \"text-block\"> 100 results\/bestLong_100X_BC07.csv<\/div><div class = \"text-block\"> 100 results\/bestLong_100X_BC09.csv<\/div><div class = \"text-block\">590 total<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212956,"guid":"AC2578001D134DEB9CFD81CEB12866BE","previous_id":1212955,"previous_guid":"034B7CE914934AEE87E087FBE93AE79B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"349FC8FEA502412396C4BE438A452D26","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read filitering"}},{"id":1054724,"guid":"8D0176FF491043E49BC9FC11DFE166D0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Subset the original read sets to only include the high-quality long reads:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do echo ${bc} ${len};<\/div><div class = \"text-block\">  ~\/scripts\/fastx-fetch.pl -i results\/bestLong_100X_${bc}.csv \\<\/div><div class = \"text-block\">    demultiplexed\/reads_${bc}.fq.gz > results\/bestLong_100X_${bc}.fastq; done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212957,"guid":"59DAF822218140C0AE4166A4ED30838D","previous_id":1212956,"previous_guid":"AC2578001D134DEB9CFD81CEB12866BE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7FD8C852350B4D83A7629FEE2E1AC179","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 1: mapping to a reference sequence"}},{"id":1054724,"guid":"A8C03B1F5C8F41FD998CAE74620A688C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create a LAST index for the reference sequence:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">lastdb -uNEAR -R01 reference\/refName.fa reference\/refName.fa<\/div><\/div><\/code><\/pre><\/div><br\/><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212958,"guid":"C0332D378BDD478F9CAE83A0D16C6E65","previous_id":1212957,"previous_guid":"59DAF822218140C0AE4166A4ED30838D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6FBEAEA97CAC468EA512AACE368B6907","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 1: mapping to a reference sequence"}},{"id":1054724,"guid":"3BE332F2A4984C599DEC32B7C7D87FF7","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><br\/><div class = \"text-block\">Prepare a substitution matrix for barcode mapping. The default substitution matrix is swayed too much by INDELs in the barcode sequences, so here's one that I've developed using a combination of trial & error and last-train. This should work at least for reads called with Guppy v4.2.2:<\/div><br\/><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">#last -Q 0<\/div><div class = \"text-block\">#last -t4.385<\/div><div class = \"text-block\">#last -a 16<\/div><div class = \"text-block\">#last -A 19<\/div><div class = \"text-block\">#last -b 4<\/div><div class = \"text-block\">#last -B 3<\/div><div class = \"text-block\">#last -S 1<\/div><div class = \"text-block\"># score matrix (query letters = columns, reference letters = rows):<\/div><div class = \"text-block\">       A      C      G      T<\/div><div class = \"text-block\">A      7    -26    -10    -24<\/div><div class = \"text-block\">C    -26      5    -32    -22<\/div><div class = \"text-block\">G    -10    -32      5    -29<\/div><div class = \"text-block\">T    -24    -22    -29      7<\/div><\/div><\/code><\/pre><\/div><br\/><br\/><div class = \"text-block\">This matrix has a moderate penalty for opening gaps (i.e. insertions and deletions), and a lower penalty for inserting them. Insertions are slightly less likely than deletions. It also has a moderate penalty for A\/G transition variants, and a higher penalty for C\/T transition variants (but still lower than other substitution penalties).<\/div><br\/><div class = \"text-block\"><span>If you're interested in training your own model based on this one, you can use <\/span><span style = \"font-style:italic;\">last-train<\/span><span> as follows:<\/span><\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">last-train --matsym -Q 0 -p plasmid_best100.mat \\<\/div><div class = \"text-block\">  reference\/refName.fa results\/bestLong_100X_BC*.fastq<\/div><\/div><\/code><\/pre><\/div><br\/><div class = \"text-block\"><span>Copy the last few lines from the output into a text file (e.g. `<\/span><span style = \"font-style:italic;\">plasmid_better.mat<\/span><span>`)<\/span><\/div><\/div>"}},{"id":1054725,"guid":"1A6B48C040BC11EBB6BA27DC30446EAE","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/ctvvjpt6.mat","placeholder":"","original_name":"plasmid_best100.mat"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212959,"guid":"96D3D1E17CA94678AB943861ADD0AEFE","previous_id":1212958,"previous_guid":"C0332D378BDD478F9CAE83A0D16C6E65","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"543313C918D54EB2B49D69B4D96BCEAE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 1: mapping to a reference sequence"}},{"id":1054724,"guid":"472D2C06D5BF42BD804AAF00A253F664","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Map reads to the reference and convert to BAM format using <\/span><span style = \"font-style:italic;\">maf-convert<\/span><span> and <\/span><span style = \"font-style:italic;\">samtools<\/span><span style = \"font-style:italic;\">:<\/span><\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do echo ${bc} ${len};<\/div><div class = \"text-block\">  lastal -j 7 -Q 0 -p plasmid_best100.mat reference\/refName.fa \\<\/div><div class = \"text-block\">      results\/bestLong_100X_${bc}.fastq | last-split -n -m 0.99 | last-postmask | \\<\/div><div class = \"text-block\">    maf-convert sam | samtools view -h --reference reference\/refName.fa | \\<\/div><div class = \"text-block\">    samtools sort > results\/${bc}_vs_refName.bam<\/div><div class = \"text-block\">  samtools index results\/${bc}_vs_refName.bam<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212960,"guid":"A3BF064C28684A62847855B2675A6E0B","previous_id":1212959,"previous_guid":"96D3D1E17CA94678AB943861ADD0AEFE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"64587AB074A24A2EB336AC9243CE7BE8","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 1: mapping to a reference sequence"}},{"id":1054724,"guid":"B5EF63F1F2B146BA9CDF66C16CC2AC29","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Split reads into forward and reverse-mapped sequences, and tally up base counts at each location:<\/div><br\/><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do echo ${bc} ${len};<\/div><div class = \"text-block\">  samtools view -b -F 0x10 results\/${bc}_vs_refName.bam | \\<\/div><div class = \"text-block\">    samtools mpileup --reference reference\/refName.fa -B -Q 0 - | \\<\/div><div class = \"text-block\">    ~\/scripts\/readstomper.pl -c > results\/fwd_stomped_${bc}_vs_refName.csv<\/div><div class = \"text-block\">  samtools view -b -f 0x10 results\/${bc}_vs_refName.bam | \\<\/div><div class = \"text-block\">    samtools mpileup --reference reference\/refName.fa -B -Q 0 - | \\<\/div><div class = \"text-block\">    ~\/scripts\/readstomper.pl -c > results\/rev_stomped_${bc}_vs_refName.csv<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212961,"guid":"4BD6FED64DA6411D86916DEC959EC2E1","previous_id":1212960,"previous_guid":"A3BF064C28684A62847855B2675A6E0B","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0549EA579A814ABD87F901D52983CF3B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 1: mapping to a reference sequence"}},{"id":1054724,"guid":"009322332A8644C090B5A43EB9EA8740","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Create a visualisation of the base-stomped output:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;\n  do echo ${bc} ${len};\n  ~\/scripts\/stomp_plotter.r -f results\/fwd_stomped_BC02_vs_refName.csv \\<\/div><div class = \"text-block\">    -r results\/rev_stomped_BC02_vs_refName.csv -prefix results\/BC02\ndone<\/div><\/div><\/code><\/pre><\/div><br\/><div class = \"text-block\"><span>Example output (<\/span><span style = \"font-style:italic;\">`results\/BC02_stompPlot_reference_seq.png<\/span><span>`):<\/span><\/div><br\/><br\/><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dzfajpt6.jpg\" \/><\/div><br\/><br\/><\/div>"}},{"id":1054725,"guid":"ED0257B3D8B64082B12AFB43EFFC754F","order_id":2,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/dzfajpt6.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212962,"guid":"65E5682E2F30427092BF5DA757E5EDE2","previous_id":1212961,"previous_guid":"4BD6FED64DA6411D86916DEC959EC2E1","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"12F6DA2DD8DA4476A4B60A6B4F9F3445","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 2: De-novo Canu Assembly"}},{"id":1054724,"guid":"AE79A7BA2B544596885443EE95F75248","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Run a Canu assembly on each read set, using default options:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do canu -nanopore results\/bestLong_100X_${bc}.fastq \\<\/div><div class = \"text-block\">    -p ${bc} -d results\/canu_${bc} genomeSize=${len};<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212963,"guid":"E0E157CA862742C8B54703D8C3C6BDCA","previous_id":1212962,"previous_guid":"65E5682E2F30427092BF5DA757E5EDE2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"157FA2ADD9444C1EB4A3B500D39C60C2","order_id":1,"type_id":6,"title":"Section","source":{"title":"Choice 2: De-novo Canu Assembly"}},{"id":1054724,"guid":"30734310BBAF436D84DF2DB05A07BE52","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Trim the assembled contigs based on Canu's trim recommendations:<\/div><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat results\/read_L50.txt | while read bc len;<\/div><div class = \"text-block\">  do echo ${bc} ${len};<\/div><div class = \"text-block\">  samtools faidx results\/canu_${bc}\/${bc}.contigs.fasta \\<\/div><div class = \"text-block\">    $(grep '^>' results\/canu_${bc}\/${bc}.contigs.fasta | \\<\/div><div class = \"text-block\">      perl -pe 's\/^>(.*?) .*trim=(.*)\/$1:$2\/') > results\/circTrimmed_${bc}.fasta;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1212964,"guid":"8FCA5590E42F11EB817CD7CADF3AD033","previous_id":1212952,"previous_guid":"185E1BC8C4794EEABCD2AC491CB079B0","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3775C42565A5450394818642F55D1303","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read file preparation"}},{"id":1054724,"guid":"24290D36EA834328838E1B96962BCB06","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">If reads have been demultiplexed by MinKNOW, then the following approach should work to create the right input format:<\/div><br\/><br\/><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir demultiplexed;<\/div><div class = \"text-block\"># readlocation is the directory that contains barcode subdirectories<\/div><div class = \"text-block\">readLocation = \"..\/*\/fastq_pass\"; # or \"..\/*\/pass\" for Guppy<\/div><div class = \"text-block\">for x in $(ls ${readLocation}); do<\/div><div class = \"text-block\">  echo ${x};<\/div><div class = \"text-block\">  cat ${readLocation}\/${x}\/*.fastq | gzip > demultiplexed\/reads_${x}.fq.gz;<\/div><div class = \"text-block\">  echo \"1 ${x}\" >> barcode_counts.txt;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><br\/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol demonstrates how to assemble reads from plasmid DNA, and generate a circularised and non-repetitive consensus sequence<\/div><br\/><div class = \"text-block\">At the moment, this protocol uses Canu to de-novo assemble high-quality single-cut reads.<\/div><br\/><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: <\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>demultiplexed fastq files (see protocol <\/span><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.7vmhn46\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Demultiplexing Nanopore reads with LAST<\/span><\/a><span>). I've noticed that the default demultiplexing carried out by Guppy (at least up to v4.2.2, as used in the first version of this protocol) has issues with <\/span><a href=\"https:\/\/doi.org\/10.12688\/f1000research.11547.2\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">chimeric reads<\/span><\/a><span>, which can affect assembly.<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">Output(s):<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Consensus sequence per barcode as a fasta file<\/li><\/ul><\/div><br\/><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><\/ul><\/div><\/div>","changed_on":1626218738}