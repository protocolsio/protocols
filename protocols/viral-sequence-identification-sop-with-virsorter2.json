{"id":48340,"title":"Viral sequence identification SOP with VirSorter2","title_html":"<p>Viral sequence identification SOP with VirSorter2<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":null,"doi_status":0,"uri":"viral-sequence-identification-sop-with-virsorter2-btfunjnw","type_id":1,"template_id":5,"published_on":1617333965,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"btfunjnw","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1616040710,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Jiarong Guo","affiliation":null,"affiliations":[{"affiliation":null,"url":null,"is_default":1}],"username":"jiarong-guo","note":null,"link":null,"image":{"source":"\/img\/avatars\/002.png","placeholder":"\/img\/avatars\/002.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":5,"authors":[{"name":"Jiarong Guo","affiliation":"Ohio State University, Columbus","affiliations":[],"username":"jiarong-guo","note":"","link":null,"image":{"source":"\/img\/avatars\/002.png","placeholder":"\/img\/avatars\/002.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Dean Vic","affiliation":"Ohio State University, Columbus","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Akbar Adjie Pratama","affiliation":"Ohio State University, Columbus","affiliations":[],"username":"akbar-adjie-pratama","note":"","link":null,"image":{"source":"\/img\/avatars\/005.png","placeholder":"\/img\/avatars\/005.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Simon Roux","affiliation":"LBNL, DOE Joint Genome Institute","affiliations":[],"username":"simon-roux","note":"","link":null,"image":{"source":"\/img\/avatars\/014.png","placeholder":"\/img\/avatars\/014.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Matthew Sullivan","affiliation":"Ohio State University, Columbus","affiliations":[],"username":"matthew-sullivan2","note":"","link":null,"image":{"source":"\/img\/avatars\/017.png","placeholder":"\/img\/avatars\/017.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[{"id":50,"uri":"sullivan-lab","title":"Sullivan Lab","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/fxc3an.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/fxc3an.jpg"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":50,"uri":"sullivan-lab","title":"Sullivan Lab","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/fxc3an.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/fxc3an.jpg"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Viral sequence identification SOP with VirSorter2","title_html":"Viral sequence identification SOP with VirSorter2","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"viral-sequence-identification-sop-with-virsorter2-btfunjnw","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1617333965,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}},{"id":166,"uri":"ivirus","title":"iVirus","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":166,"uri":"ivirus","title":"iVirus","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Viral sequence identification SOP with VirSorter2","title_html":"Viral sequence identification SOP with VirSorter2","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"viral-sequence-identification-sop-with-virsorter2-btfunjnw","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1617333965,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}}],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/viral-sequence-identification-sop-with-virsorter2-btfunjnw","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":1,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":1,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"16AA2010879F11EBAB03633977FA4B11","state_version_id":585,"steps":[{"id":1154929,"guid":"EFE46560935811EB976915E4113C19EB","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"98D787C20E274A948165ED7B56EE707A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Install dependencies and prep test data"}},{"id":1054724,"guid":"F327DBFB3012460598A93E2DD3B7814A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Install dependencies<\/span><\/div><div class = \"text-block\">We need following three tools for this SOP:<\/div><div class = \"text-block\"><a href=\"https:\/\/bitbucket.org\/MAVERICLab\/virsorter2\/src\/master\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">VirSorter2<\/span><\/a><\/div><div class = \"text-block\">(version >=2.2.1)<\/div><div class = \"text-block\"><a href=\"https:\/\/bitbucket.org\/berkeleylab\/checkv\/src\/master\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">CheckV<\/span><\/a><\/div><div class = \"text-block\">(version >=0.7.0)<\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/shafferm\/DRAM\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">DRAMv<\/span><\/a><\/div><div class = \"text-block\">(version >=1.2.0)<\/div><div class = \"text-block\">First lets create new conda environment for this tutorial:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># install VirSorter2, checkV and DRAMv <\/div><div class = \"text-block\">conda create -n viral-id-sop virsorter=2 checkv dram <\/div><div class = \"text-block\"># activate env <\/div><div class = \"text-block\">conda activate viral-id-sop<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Each tool has its own database. VirSorter2 database takes ~10 mins to download;<\/div><div class = \"text-block\">CheckV database takes <5 mins; DRAMv database setup can take a long time ~5h and ~60GB of memory.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># vs2 db: db-vs2<\/div><div class = \"text-block\">virsorter setup -d db-vs2 -j 4<\/div><div class = \"text-block\"># checkv db: checkv-db-v1.0<\/div><div class = \"text-block\">checkv download_database .<\/div><div class = \"text-block\"># DRAMv: db-dramv<\/div><div class = \"text-block\">DRAM-setup.py prepare_databases --skip_uniref --output_dir db-dramv<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Note: DRAMv by default use KOfam HMMs to get KEGG orthology identifiers. If you have access to KEGG database (not open source), you can link it to the DRAMv too. See details in <\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/shafferm\/DRAM\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">DRAMv documentation<\/span><\/a><\/div><div class = \"text-block\">.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1154932,"guid":"05C94BB0935A11EB976915E4113C19EB","previous_id":1154929,"previous_guid":"EFE46560935811EB976915E4113C19EB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F53E2BFE4A3F413FBDFC273A187CD670","order_id":1,"type_id":6,"title":"Section","source":{"title":"Install dependencies and prep test data"}},{"id":1054724,"guid":"E835168992EA484EB5DC296D890419A9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Prep test data<\/span><\/div><div class = \"text-block\">We need a small test data for this tutorial. Here we grab seven sequences identified by VirSorter2 from a soil sample  the sequence names are named after their categories in manual curation step that we will discuss later.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">wget -O test.fa https:\/\/bitbucket.org\/MAVERICLab\/virsorter2\/raw\/15a21fa9c1ee1d2af52b0148b167292e549d356e\/test\/test-for-sop.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1154933,"guid":"68B1C580935B11EB976915E4113C19EB","previous_id":1154932,"previous_guid":"05C94BB0935A11EB976915E4113C19EB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"FAE5CEEBCF394B2488ED58186E2C7CF9","order_id":1,"type_id":6,"title":"Section","source":{"title":"SOP"}},{"id":1054724,"guid":"83761D02744A4FAA96518BA115CE18D2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Run VirSorter2<\/span><\/div><div class = \"text-block\">First, run VirSorter2 with a loose cutoff of 0.5 for maximal sensitivity. We are only interested in phages (dsDNA and ssDNA phage). A minimal length 5000 bp is chosen since it is the minimum required by downstream viral<\/div><div class = \"text-block\">classification. You can adjust the \"-j\" option based on the availability of CPU cores. Note that the \"--keep-original-seq\" option preserves the original sequence of circular and (near) fully viral contigs (score >0.8 as a whole sequence) and we are passing them to checkV to trim possible host genes left at ends and handle duplicate segments of circular contigs.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">virsorter run --keep-original-seq -i 5seq.fa -w vs2-pass1 --include-groups dsDNAphage,ssDNA --min-length 5000 --min-score 0.5 -j 28 all<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Run checkV<\/span><\/div><div class = \"text-block\">There could be some non-viral sequences or regions in the VirSorter2 results with a minimal score cutoff of 0.5. Here we use CheckV to quality control the VirSorter2 results and also to trim potential host regions left at the ends of proviruses. You can adjust the \"-t\" option based on the availability of CPU cores.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">checkv end_to_end vs2-pass1\/final-viral-combined.fa checkv -t 28 -d \/fs\/project\/PAS1117\/jiarong\/db\/checkv-db-v1.0<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Run VirSorter2 again<\/span><\/div><div class = \"text-block\">Then we run the checkV-trimmed sequences through VirSorter2 again to generate \"affi-contigs.tab\" files needed by DRAMv to identify AMGs. You can adjust the \"-j\" option based on the availability of CPU cores. Note the \"--seqname-suffix-off\" option preserves the original input sequence name since we are sure there is no chance of getting >1 proviruses from the same contig in this second pass, and the \"--viral-gene-enrich-off\" option turns off the requirement of having more viral genes than host genes to make sure that VirSorter2 is not doing any screening at this step. The above two options require VirSorter2 version >=2.2.1.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">cat checkv\/proviruses.fna checkv\/viruses.fna > checkv\/combined.fna<\/div><div class = \"text-block\">virsorter run --seqname-suffix-off --viral-gene-enrich-off --prep-for-dramv -i checkv\/combined.fna -w vs2-pass2 --include-groups dsDNAphage,ssDNA --min-length 5000 --min-score 0.5 -j 28 all<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Run DRAMv<\/span><\/div><div class = \"text-block\">Then run DRAMv to annotate the identified sequences, which can be used for manual curation. You can adjust the \"--threads\" option based on availability of CPU cores.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># step 1 annotate<\/div><div class = \"text-block\">DRAM-v.py annotate -i vs2-pass2\/for-dramv\/final-viral-combined-for-dramv.fa -v vs2-pass2\/for-dramv\/viral-affi-contigs-for-dramv.tab -o dramv-annotate --skip_trnascan --threads 28 --min_contig_size 1000<\/div><div class = \"text-block\">#step 2 summarize anntotations<\/div><div class = \"text-block\">DRAM-v.py distill -i dramv-annotate\/annotations.tsv -o dramv-distill<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1154934,"guid":"23EB2760935C11EB976915E4113C19EB","previous_id":1154933,"previous_guid":"68B1C580935B11EB976915E4113C19EB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5A0E36B6EB7C4C3CB812257D8EA43609","order_id":1,"type_id":6,"title":"Section","source":{"title":"Manual curation"}},{"id":1054724,"guid":"AA117A83787241E2A373F14958679C9F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Screening based on viral and host gene counts, score, hallmark gene counts, and contig length<\/span><\/div><div class = \"text-block\">The viral and host gene counts from checkV can be used for false positive screen ing. Since checkV is very conservative on calling viral genes, those sequences with viral genes called by checkV should be viral. Those with no viral gene called by checkV are more likely to be non-viral. Based on our benchmark with a soil bulk metagenome, those with no viral and no host gene called are viral; those with no viral gene and 2 or more host genes are mostly non-viral; those with no viral gene and 1 host gene are hard to tell viral from non-viral (likely mobile genetic elements, similar to category 3 in VirSorter1), and should be discarded unless manually checked. Here we only select those >10kb for manual curation since shorter ones are too short to tell. Also those with VirSorter2 score >0.95 or hallmark gene count >2 are mostly viral. These empirical screening criteria are summarized below:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">keep<\/span><span> viral_gene >0 OR score >=0.95 OR hallmark >2 OR (viral_gene =0 AND host_gene =0)<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">discard<\/span><span> viral_gene =0 AND host_gene >1 OR (viral_gene =0 AND host_gene =1 AND length <10kb)<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">manual check<\/span><span> viral_gene =0 AND host_gene =1 AND length >=10kb<\/span><\/li><\/ul><\/div><div class = \"text-block\">To look at the viral_gene, host_gene, score, and hallmark of sequences you can merge \"vs2-pass1\/final-viral-score.tsv\" and \"checkv\/contamination.tsv\", and filter in a spreadsheet.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1154936,"guid":"454D12E0935E11EB976915E4113C19EB","previous_id":1154934,"previous_guid":"23EB2760935C11EB976915E4113C19EB","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"79A4FAB9B2484947A415CF05AF1F4DA8","order_id":1,"type_id":6,"title":"Section","source":{"title":"Manual curation"}},{"id":1054724,"guid":"06CF21E2EED44F5882885C575F60B2D6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Manual curation<\/span><\/div><div class = \"text-block\">For those in \u201cmanual check\u201d category, you can look through their annotations in \"dramv-annotate\/annotations.tsv\", in which each gene of every contig is a line and has annotation from multiple databases. This step is hard to standardize, but below are some criteria based on our experience.<\/div><div class = \"text-block\">Criteria for calling a contig viral:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Structural genes, hallmark genes, depletion in annotations or enrichment for hypotheticals (~10% genes having non-hypothetical annotations)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Lacking hallmarks but >=50% of annotated genes hit to a virus and at least half of those have viral bitcore >100 and the contig is <50kb in length<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Provirus: Integrase\/recombinase\/excisionase\/repressor, enrichment of viral genes on one side<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Provirus: \u201cbreak\u201d in the genome: gap between two genes corresponding to a strand switch, higher coding density, depletion in annotations, and an enrichment for phage genes on one side<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Few annotations only ~1-3 genes, but with at least half hitting to viruses, and where the genes hitting cells have a bitscore no more than 150% that of the viral bitscores and\/or viral bitscores are >100<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">LPS (lipopolysaccharide) looking regions if also has very strong hits to viral genes bitscore > 100<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Criteria for callling a contig non-viral:<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">>3x cellular like genes than viral, nearly all genes annotated, no genes hitting to only viruses and no viral hallmark genes<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Lacking any viral hallmark genes and >50kb<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Strings of many obvious cellular genes, with no other viral hallmark genes. Examples encountered in our benchmarking include 1) CRISPR Cas, 2) ABC transporters, 3) Sporulation proteins, 4) Two-component systems, 5) Secretion system. Some of these may be encoded by viruses, but are not indicative of a viral contig without further evidence.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Multiple plasmid genes or transposases but no clear genes hitting only to viruses<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Few annotations, only ~1-3 genes hitting to both viruses and cellular genes but with stronger bitscores for the cellular genes.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">LPS looking regions if no strong viral hits. Enriched in genes commonly associated with Lipopolysaccharide or LPS, such as epimerases, glycosyl transferases, acyltransferase, short-chain dehydrogenase\/reductase, dehydratase<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Genes annotated as Type IV and\/or Type VI secretion system surrounded by non-viral genes<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Few annotations, only ~1-3 genes all hitting to cellular genes (even if bitscore <100) with no viral hits<\/li><\/ul><\/div><div class = \"text-block\">Criteria for callling a contig non-viral:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">>3x cellular like genes than viral, nearly all genes annotated, no genes hitting to only viruses and no viral hallmark genes<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Lacking any viral hallmark genes and >50kb<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Strings of many obvious cellular genes, with no other viral hallmark genes. Examples encountered in our benchmarking include 1) CRISPR Cas, 2) ABC transporters, 3) Sporulation proteins, 4) Two-component systems, 5) Secretion system. Some of these may be encoded by viruses, but are not indicative of a viral contig without further evidence.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Multiple plasmid genes or transposases but no clear genes hitting only to viruses<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Few annotations, only ~1-3 genes hitting to both viruses and cellular genes but with stronger bitscores for the cellular genes.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">LPS looking regions if no strong viral hits. Enriched in genes commonly associated with Lipopolysaccharide or LPS, such as epimerases, glycosyl transferases, acyltransferase, short-chain dehydrogenase\/reductase, dehydratase<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Genes annotated as Type IV and\/or Type VI secretion system surrounded by non-viral genes<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Few annotations, only ~1-3 genes all hitting to cellular genes (even if bitscore <100) with no viral hits<\/li><\/ul><\/div><div class = \"text-block\">Lastly, user beware that any provirus boundary predicted by VirSorter 2 and\/or checkV is an approximate estimate only (calling \u201cends\u201d is quite a challenging problem in prophage discovery), and needs to be manually inspected carefully too, especially for AMG studies.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>This is an SOP used in <\/span><a href=\"https:\/\/u.osu.edu\/viruslab\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Sullivan Lab<\/span><\/a><span> for viral identification, which might be updated regularly. You can refer to the current version using the DOI of this protocol (last updated 04\/01\/2021).<\/span><\/div><\/div>","changed_on":1617333965}