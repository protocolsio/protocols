{"id":39055,"title":"Getting started with VirSorter2 ","title_html":"<p>Getting started with VirSorter2 <\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bidpka5n","doi_status":2,"uri":"getting-started-with-virsorter2-bidpka5n","type_id":1,"template_id":5,"published_on":1594262083,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":1,"created_on":1594254390,"categories":null,"creator":{"name":"Jiarong Guo","affiliation":null,"affiliations":[{"affiliation":null,"url":null,"is_default":1}],"username":"jiarong-guo","link":null,"image":{"source":"\/img\/avatars\/002.png","placeholder":"\/img\/avatars\/002.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"public":1,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":7,"authors":[{"name":"Jiarong Guo","affiliation":"Ohio State University, Columbus","affiliations":[],"username":"jiarong-guo","link":null,"image":{"source":"\/img\/avatars\/002.png","placeholder":"\/img\/avatars\/002.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[{"id":166,"uri":"ivirus","title":"iVirus","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":166,"uri":"ivirus","title":"iVirus","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/ddtbvtw.png"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Getting started with VirSorter2 ","title_html":"Getting started with VirSorter2 ","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"getting-started-with-virsorter2-bidpka5n","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1594262083,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}}],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/getting-started-with-virsorter2-bidpka5n","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"1C76802BE01442D2A9F3DBCBA8A1C9F3","state_version_id":356,"steps":[{"id":976913,"guid":"F52F80EFBA744FB08DAF044179122041","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C1F2E790149544D29A5F0643A488FC7C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Installation"}},{"id":1054724,"guid":"97B9EB100CDA472586930352D923CE93","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Skip this step if you already have VirSorter2 installed. You can find out by type in the following command in terminal:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">virsorter -h<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If you see message like below, then you have VirSorter2 installed already.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">Usage: virsorter [OPTIONS] COMMAND [ARGS]...<\/div><div class = \"text-block\">  virsorter - workflow for identifying viral sequences<\/div><div class = \"text-block\">Options:<\/div><div class = \"text-block\">  --version   Show the version and exit.<\/div><div class = \"text-block\">  -h, --help  Show this message and exit.<\/div><div class = \"text-block\">Commands:<\/div><div class = \"text-block\">  run            run virsorter main workflow<\/div><div class = \"text-block\">  setup          download reference files (~10GB) and install dependencies<\/div><div class = \"text-block\">  train-feature  subcommand for training feature of customized classifier<\/div><div class = \"text-block\">  train-model    subcommand for training customized classifier model<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">A message like this means VirSorter2 is not installed.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">-bash: virsorter: command not found<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Option 1:<\/span><\/div><div class = \"text-block\">Conda is the easiest way to install VirSorter2. Conda can install by following <\/div><div class = \"text-block\"><a href=\"https:\/\/docs.conda.io\/projects\/conda\/en\/latest\/user-guide\/install\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">this link<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">conda intall -c bioconda virsorter<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Option 2:<\/span><\/div><div class = \"text-block\">To install the development version (most updated but may not work all the time):<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">conda create -n vs2 python=3 scikit-learn=0.22.1 imbalanced-learn pandas seaborn hmmer prodigal screed ruamel.yaml snakemake=5.16.0 click<\/div><div class = \"text-block\">conda activate vs2 <\/div><div class = \"text-block\">git clone https:\/\/github.com\/jiarong\/VirSorter2.git <\/div><div class = \"text-block\">cd VirSorter2 <\/div><div class = \"text-block\">pip install -e .<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976914,"guid":"AFA7B4A27D354782873EB54D7C3021CE","previous_id":976913,"previous_guid":"F52F80EFBA744FB08DAF044179122041","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3D382B62580544BA88B0AA1CDD06C07B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Download database and dependencies"}},{"id":1054724,"guid":"C56F6F4F3AB342A18E1307BF7AF99CE5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Before running VirSorter2, users must download all databases and install dependencies (takes 10+ mins, but this only need to be done once). The following command line downloads databases and dependencies to \"db\" directory, and its location is recorded in the tool configuration as a default, so you do not need to type \"--db-dir\" for other VirSorter2 subcommands.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">virsorter setup -d db -j 4<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976915,"guid":"9991CF6CD04244F6AF9D27EB171507A7","previous_id":976914,"previous_guid":"AFA7B4A27D354782873EB54D7C3021CE","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C2AF729E5FCD4258865FF3B53B48CF20","order_id":1,"type_id":6,"title":"Section","source":{"title":"Quick run"}},{"id":1054724,"guid":"8C37FADFBDB8494D9D499C7E699A1E9A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To run viral sequence identification:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># fetch testing data<\/div><div class = \"text-block\">wget -O test.fa https:\/\/raw.githubusercontent.com\/jiarong\/VirSorter2\/master\/test\/8seq.fa <\/div><div class = \"text-block\"># run classification with 4 threads (-j) and test-out as output diretory (-w) virsorter run -w test.out -i test.fa -j 4 <\/div><div class = \"text-block\"># check output<\/div><div class = \"text-block\">ls test.out<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Due to large HMM database that VirSorter2 uses, this small dataset takes a few mins to finish. In the output directory (test.out), three files are useful:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">final-viral-combined.fa:      identified viral sequences<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">final-viral-score.tsv:            table with score of each viral sequences across groups<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">final-viral-boundary.tsv:     table with boundary information<\/li><\/ul><\/div><div class = \"text-block\">More details of output files can be found in Section \"Detailed description on output files\" below.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">NOTE<\/span><\/div><div class = \"text-block\">Note that suffix \"||full\" or \"||{i}index_partial\" have been added to original sequence names to differentiate sub-sequences in case of multiple viral subsequences found in one contig (\"{i}\" can be numbers starting from 0 to max number of viral fragments found in that contig).<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976916,"guid":"DFABCE96446E46B39F9C0F949B7960E2","previous_id":976915,"previous_guid":"9991CF6CD04244F6AF9D27EB171507A7","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"613A96CC41134FBD83C5AADD10FE43FD","order_id":1,"type_id":6,"title":"Section","source":{"title":"More options"}},{"id":1054724,"guid":"464C43BF13EA43CAB92F03A567C5C86D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">Choosing viral groups (\"--include-groups\")<\/span><\/div><div class = \"text-block\"><span>VirSorter2 finds all viral groups currently included (ssDNAphage, NCLDV , RNA, ssDNA virus, and<\/span><span style = \"font-style:italic;\">lavidavirida<\/span><span>) by default. You can use--include-groupsto chose specific groups:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">rm -rf test.out <\/div><div class = \"text-block\">virsorter run -w test.out -i test.fa --include-groups \"dsDNAphage,ssDNA\" -j 4<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Re-run with different score cutoff (\"--min-score\")<\/span><\/div><div class = \"text-block\">VirSorter2 takes one positional argument, \"all\" or \"classify\". The default is all, which means running the whole pipeline, including 1) preprocessing, 2) annotation (feature extraction), and 3) classification. The main computational bottleneck is the annotation step, taking about 95% of CPU time. In case you just want to re-run with different score cutoff (--min-score), the \"classify\" argument can skip the annotation steps, and only re-run classify step.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">virsorter run -w test.out -i test.fa --include-groups \"dsDNAphage,ssDNA\" -j 4 --min-score 0.8 classify<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Speed up a run (--provirus-off)<\/span><\/div><div class = \"text-block\">In case you need to have some results quickly, there are two options: 1) turn off provirus step with \"--provirus-off\"; this reduces sensitivity on sequences that are only partially virus; 2) subsample ORFs (Open Reading Frame) from each sequence with \"--max-orf-per-seq\"; This option subsamples ORFs to a cutoff if a sequence has more ORFs than that. Note that this option is only availale when--provirus-offis used.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">rm -rf test.out <\/div><div class = \"text-block\">virsorter run -w test.out -i test.fa --provirus-off --max-orf-per-seq 20<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Other options<\/span><\/div><div class = \"text-block\">You can \"runvirsorter run -h\" to see all options. VirSorter2 is a wrapper around <\/div><div class = \"text-block\"><a href=\"https:\/\/snakemake.readthedocs.io\/en\/stable\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">snakemake<\/span><\/a><\/div><div class = \"text-block\">, a great pipeline management tool designed for reproducibility, and running on computer clusters. All snakemake options still works here. You just need to append those snakemake option to virsorter options (after the \"all\" or \"classify\" argument). For example, the \"--forceall\" snakemake option can be used to re-run the pipeline.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">virsorter run -w test.out -i test.fa --provirus-off --max-orf-per-seq 20 --forceall<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">NOTE<\/span><span style = \"font-weight:bold;\">:<\/span><\/div><div class = \"text-block\">When you re-run any VirSorter2 command, it will pick up at the step (rule in snakemake term) where it stopped last time. It will do nothing if it suceeded last time. The \"--forceall\" option can be used to enforce the re-run.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976917,"guid":"46378A5EF21843AEA76645D58464A23E","previous_id":976916,"previous_guid":"DFABCE96446E46B39F9C0F949B7960E2","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"08ED9528B4DF4DABAE2BEA63ECB72802","order_id":1,"type_id":6,"title":"Section","source":{"title":"Detailed description on output files"}},{"id":1054724,"guid":"92829454841847A481683EFA2B904DD6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">1. \"final-viral-combined.fa\": <\/span><\/div><div class = \"text-block\">Identified viral sequences, including two types. Full sequences identified as viral (added with suffix \"||full\"); partial sequences identified as viral (added with suffix \"||{i}index_partial\"); here \"{i}\" can be numbers starting from 0 to max number of viral fragments found in that contig.<\/div><div class = \"text-block\">Headers of sequences looks likes:<\/div><div class = \"text-block\">>Caudo-circular||full    shape:circular||start:327||end:32076||group:dsDNAphage||score:0.993||hallmark:4<\/div><div class = \"text-block\">There is a some information in description filed, including: \"shape\", \"start\" and \"end\" position on contig of a viral sequence, best classifier (\"group\"), \"score\" from the classfier (ranging from 0 to 1, higher means more like to be viral), number of \"hallmark\" genes.j<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">NOTE<\/span><\/div><div class = \"text-block\">Note that classifiers of different viral groups are not exclusive from each other, and may have overlap in their target viral sequence space, which means this info should not be used as reliable classification. We limit the purpose of VirSorter2 to viral idenfication only.<\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><span style = \"font-weight:bold;\">2. \"final-viral-score.tsv\": <\/span><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\">A tab delimited table on score of each viral sequences across groups.<\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><span style = \"font-weight:bold;\">3. \"final-viral-boundary.tsv\":<\/span><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\">Only some of the columns in this file are useful:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">seqname:  original sequence name<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_orf_index_start, trim_orf_index_end:  start and end ORF index on orignal sequence of identified viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_bp_start, trim_bp_end:  start and end position on orignal sequence of identified viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_pr:  score of final trimmed viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">partial:  full sequence as viral or partial sequence as viral; this is defined when a full sequence has score > score cutoff, it is full (0), or else any viral sequence extracted within it is partial (1)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_orf_index_start, trim_orf_index_end:  start and end ORF index on orignal sequence of identified viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_bp_start, trim_bp_end:  start and end position on orignal sequence of identified viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_pr:  score of final trimmed viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">partial:  full sequence as viral or partial sequence as viral; this is defined when a full sequence has score > score cutoff, it is full (0), or else any viral sequence extracted within it is partial (1)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_bp_start, trim_bp_end:  start and end position on orignal sequence of identified viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_pr:  score of final trimmed viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">partial:  full sequence as viral or partial sequence as viral; this is defined when a full sequence has score > score cutoff, it is full (0), or else any viral sequence extracted within it is partial (1)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">trim_pr:  score of final trimmed viral sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">partial:  full sequence as viral or partial sequence as viral; this is defined when a full sequence has score > score cutoff, it is full (0), or else any viral sequence extracted within it is partial (1)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">partial:  full sequence as viral or partial sequence as viral; this is defined when a full sequence has score > score cutoff, it is full (0), or else any viral sequence extracted within it is partial (1)<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">pr_full:  score of the original sequence<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark_cnt:  hallmark gene count<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>group:  the classifier of viral group that gives high score; this should <\/span><span style = \"font-weight:bold;\">NOT <\/span><span>be used as reliable classification<\/span><\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><\/ul><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">NOTE<\/span><\/div><div class = \"text-block\">VirSorter2 tends overestimate the size of viral sequence during provirus extraction procedure in order to achieve better sensitity. We recommend cleaning these provirus predictions to remove potential host genes on the edge of the predicted viral region, e.g. using a tool like CheckV (<\/div><div class = \"text-block\"><a href=\"https:\/\/bitbucket.org\/berkeleylab\/checkv\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/bitbucket.org\/berkeleylab\/checkv<\/span><\/a><\/div><div class = \"text-block\">).<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976927,"guid":"1D307850C17D11EA8AFADF0493EB6E28","previous_id":976917,"previous_guid":"46378A5EF21843AEA76645D58464A23E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1997690EBD534D64818CABA655B2CE38","order_id":1,"type_id":6,"title":"Section","source":{"title":"Training customized classifier"}},{"id":1054724,"guid":"81604CD07C734ED3BE8D58F865DB235E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>VirSorter2 currently has classifiers of five viral groups (dsDNAphage, NCLDV, RNA, ssNA virus, and<\/span><span style = \"font-style:italic;\">lavidaviridae<\/span><span>). It's designed for easy addition of more classifiers. The information of classifiers are store in the database (-d) specified during \"Download database and dependencies\" section. For each viral group, it needs four files below:<\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">model: andom forest classifier model for identifying viral sequences<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">customized.hmm (optional): a collection of viral HMMs for gene annotation; if not specified, the one in \"db\/hmm\/viral\/combined.hmm\" is used.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark-gene.list (optional): names of hallmark gene hmm in the above viral hmm database file; These hallmark gene hmms can be collected by literature search or identified by comparing hallmark gene sequences (protein) against HMMs database above withhmmsearch; if not specified, no hallmark genes are counted in feature table<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">rbs-prodigal-train.db (optional): prodigal RBS (ribosomal binding site) motif training model; this can be produced with-toption in prodigal; This is useful feature for NCLDV due to large genome size for training; For other viral groups, it's OK to skip this file.<\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">customized.hmm (optional): a collection of viral HMMs for gene annotation; if not specified, the one in \"db\/hmm\/viral\/combined.hmm\" is used.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark-gene.list (optional): names of hallmark gene hmm in the above viral hmm database file; These hallmark gene hmms can be collected by literature search or identified by comparing hallmark gene sequences (protein) against HMMs database above withhmmsearch; if not specified, no hallmark genes are counted in feature table<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">rbs-prodigal-train.db (optional): prodigal RBS (ribosomal binding site) motif training model; this can be produced with-toption in prodigal; This is useful feature for NCLDV due to large genome size for training; For other viral groups, it's OK to skip this file.<\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">hallmark-gene.list (optional): names of hallmark gene hmm in the above viral hmm database file; These hallmark gene hmms can be collected by literature search or identified by comparing hallmark gene sequences (protein) against HMMs database above withhmmsearch; if not specified, no hallmark genes are counted in feature table<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">rbs-prodigal-train.db (optional): prodigal RBS (ribosomal binding site) motif training model; this can be produced with-toption in prodigal; This is useful feature for NCLDV due to large genome size for training; For other viral groups, it's OK to skip this file.<\/li><\/ul><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><\/ul><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976928,"guid":"30BCE520C17D11EA8AFADF0493EB6E28","previous_id":976927,"previous_guid":"1D307850C17D11EA8AFADF0493EB6E28","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"53D3CED711BC4AB396B175CC04B3C3C3","order_id":1,"type_id":6,"title":"Section","source":{"title":"Training customized classifier"}},{"id":1054724,"guid":"F80DF8F1A528491FA15DC2A3CFE65AEE","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Here I will show how to make a model for <\/span><span style = \"font-style:italic;\">autolykiviridae<\/span><span style = \"font-style:italic;\">.<\/span><\/div><div class = \"text-block\">First, prepare the dataset needed: 1) high quality viral genomes 2) protein sequence of hallmark gene; and install two more dependecies.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># download genome sequences <\/div><div class = \"text-block\">wget https:\/\/github.com\/jiarong\/small-dataset\/raw\/master\/autolyki\/vibrio_autolyki.fna.gz -O autolyki.fna.gz <\/div><div class = \"text-block\"># download hallmark gene seqs <\/div><div class = \"text-block\">wget https:\/\/raw.githubusercontent.com\/jiarong\/small-dataset\/master\/autolyki\/DJR.fa -O DJR.fa <\/div><div class = \"text-block\"># download source code <\/div><div class = \"text-block\">git clone https:\/\/github.com\/jiarong\/VirSorter2.git # install two more dependencies conda install -c bioconda -y screed hmmer<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Then identify hallmark gene HMMs by protein sequences of hallmark genes.<\/div><div class = \"text-block\">Note that we will need the VirSorter2 database here. If you skip the tutorial above, you can download the database by \"virsorter setup -d db -j 4\". This will take 10+ mins.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># compare all HMMs and protein sequences of hallmark gene# this will take 10+ mins due to large hmm database file <\/div><div class = \"text-block\">hmmsearch -T 50 --tblout DJR.hmmtbl --cpu 4 -o \/dev\/null db\/hmm\/viral\/combined.hmm DJR.fa<\/div><div class = \"text-block\"># get HMMs names that are signicant hits with protein sequences of hallmark gene python <\/div><div class = \"text-block\">VirSorter2\/virsorter\/scripts\/prepdb-train-get-seq-from-hmm-domtbl.py 50 DJR.hmmtbl > hallmark-gene.list<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">With \"hallmark-gene.list\" and the high quality genomes \"autolyki.fna.gz\", you can train the features that are used for the classifier model.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># train feature file<\/div><div class = \"text-block\">virsorter train-feature --seqfile autolyki.fna.gz --hallmark hallmark-gene.list --hmm db\/hmm\/viral\/combined.hmm --frags-per-genome 5 --jobs 4 -w autolyki-feature.out<\/div><div class = \"text-block\"># check output <\/div><div class = \"text-block\">ls autolyki-feature.out<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">In the output directory (\"autolyki-feature.out\"), \"all.pdg.ftr\" is the feature file needed for next step.<\/div><div class = \"text-block\">To make the classifier model, we also need a feature file from cellular organisms. This can be done by collecting genomes from cellular organisms and repeat the above step. Note number of cellular genomes are very large (>200K). Here I will re-use the feature file I have prepared before.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># fetch feature file for cellular organisms<\/div><div class = \"text-block\">wget https:\/\/zenodo.org\/record\/3823805\/files\/nonviral-common-random-fragments.ftr.gz?download=1 -O nonviral.ftr.gz<\/div><div class = \"text-block\">gzip -d nonviral.ftr.gz<\/div><div class = \"text-block\"># train the classifier model<\/div><div class = \"text-block\">virsorter train-model --viral-ftrfile autolyki-feature.out\/all.pdg.ftr --nonviral-ftrfile nonviral.ftr --balanced --jobs 4 -w autolyki-model.out<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">In \"autolyki-model.out\", \"feature-importances.tsv\" shows the importance of each feature used. \"model\" is the classifier model we need. Then put the \"model\" and \"hallmark-gene.list\" in database directory as the existing viral groups.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">mkdir db\/group\/autolykiviridae<\/div><div class = \"text-block\">cp autolyki-model.out\/model db\/group\/autolykiviridae<\/div><div class = \"text-block\">cp hallmark-gene.list db\/group\/autolykiviridae<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Now you can try this new classifier on the testing dataset, and compare with \"dsDNAphage\" classifier:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\"># download the testing dataset<\/div><div class = \"text-block\">wget -O test.fa https:\/\/raw.githubusercontent.com\/jiarong\/VirSorter2\/master\/test\/8seq.fa<\/div><div class = \"text-block\"># identify viral sequences in testing dataset; it takes 10+ mins;<\/div><div class = \"text-block\">virsorter run -w autolyki-model-test.out -i test.fa --dbdir db --include-groups \"dsDNAphage,autolykiviridae\" -j 4 --min-score 0.8 all<\/div><div class = \"text-block\"># check the scores in two classifiers <\/div><div class = \"text-block\">cat autolyki-model-test.out\/final-viral-score.tsv<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":null,"changed_on":1594262083}