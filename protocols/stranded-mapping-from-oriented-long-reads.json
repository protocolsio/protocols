{"id":43345,"title":"Stranded Mapping from Oriented Long Reads","title_html":"Stranded Mapping from Oriented Long Reads","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi4jpt6.png","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi4jpt6.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bnjrmcm6","doi_status":2,"uri":"stranded-mapping-from-oriented-long-reads-bnjrmcm6","type_id":1,"template_id":1,"published_on":1603081141,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":5,"version_data":{"id":"5","code":"bnjrmcm6","parent_id":26614,"parent_uri":"stranded-mapping-from-oriented-long-reads-58wg9xe","is_same_owner":true,"has_pending_merge_request":false,"has_approved_merge_request":true},"created_on":1603078828,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"David A. Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[{"affiliation":"Malaghan Institute of Medical Research (NZ)","url":"http:\/\/www.malaghan.org.nz\/","is_default":1}],"username":"david-eccles","note":null,"link":"https:\/\/bioinformatics.stackexchange.com\/a\/3922\/73","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[{"id":4,"image":{"source":"\/img\/badges\/gold.svg","placeholder":"\/img\/badges\/gold.svg"},"name":"Gold power author!"},{"id":6,"image":{"source":"\/img\/badges\/accelerator.svg","placeholder":"\/img\/badges\/accelerator.svg"},"name":"Science accelerator"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":"https:\/\/bioinformatics.stackexchange.com\/a\/3922\/73","total_collections":0,"number_of_steps":7,"authors":[{"name":"David Eccles","affiliation":"Malaghan Institute of Medical Research (NZ)","affiliations":[],"username":"david-eccles","note":null,"link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/vi7jpt6.jpg"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/stranded-mapping-from-oriented-long-reads-bnjrmcm6","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"9C91DCC86787476D8905BCE73C0C92A5","state_version_id":209,"steps":[{"id":1054090,"guid":"4813BB20DEDA4A2199052E0D38763A04","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"94D88425AE0A4ADCAF7AC7EE7D895F9D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Orient Reads"}},{"id":1054724,"guid":"77119090591540299678B26A4134FFB3","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Orient reads as per protocol <\/div><div class = \"text-block\"><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.57hg9j6\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Preparing Reads for Stranded Mapping<\/span><\/a><\/div><div class = \"text-block\">.<\/div><div class = \"text-block\">If this has been done, then the following command should produce output without errors:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do ls oriented\/${bc}_reads_dirAdjusted.fq.gz;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Example output:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">oriented\/BC03_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">oriented\/BC04_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">oriented\/BC05_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">oriented\/BC06_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">oriented\/BC07_reads_dirAdjusted.fq.gz<\/div><div class = \"text-block\">oriented\/BC08_reads_dirAdjusted.fq.gz<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054091,"guid":"45E85987E9614723B1DE2929A9DB0190","previous_id":1054090,"previous_guid":"4813BB20DEDA4A2199052E0D38763A04","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"EE149C347FF24D7396A063DE663E5408","order_id":1,"type_id":6,"title":"Section","source":{"title":"Index Preparation"}},{"id":1054724,"guid":"C78160B1FDAF411B8529B511E85BC238","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Prepare genome index for spliced alignment\n <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">minimap2 -d mmus_ucsc_all-splice.idx -Q -t 10 -x splice mmus_ucsc_all.fa<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"44D4C535A3474BBF8AAD1BE36674BBFD","order_id":2,"type_id":8,"title":"software","source":{"name":"minimap2","developer":"Heng Li","repository":"https:\/\/github.com\/lh3\/minimap2","link":"https:\/\/github.com\/lh3\/minimap2\/releases","os_name":"Linux","os_version":""}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054092,"guid":"7093BD4564834EEE99E06372CDC16E5E","previous_id":1054091,"previous_guid":"45E85987E9614723B1DE2929A9DB0190","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D7EB3AD4EF384DF4A8FD463772837B25","order_id":1,"type_id":6,"title":"Section","source":{"title":"Read Mapping"}},{"id":1054724,"guid":"7A952C3FEC3D46CDA23B230899D6DDB5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Map the long reads to the genome using minimap2, using samtools to covert to a sorted BAM format. This is where the reverse complementing done during demultiplexing gives a big saving of effort. As this BAM file is one of the main outputs, the run name is added to the file name.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">runName=\"CHANGE_THIS\";<\/div><div class = \"text-block\">mkdir -p mapped;<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo ${bc};<\/div><div class = \"text-block\">  minimap2 -t 10 -a -x splice mmus_ucsc_all-splice.idx oriented\/${bc}_reads_dirAdjusted.fq.gz | \\<\/div><div class = \"text-block\">    samtools view -b | samtools sort > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bam;<\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"C4C15090662411E9AA96D559264EA12D","order_id":2,"type_id":8,"title":"software","source":{"name":"SAMtools","developer":"Wellcome Trust Sanger Institute","repository":"https:\/\/github.com\/samtools\/samtools","link":"http:\/\/www.htslib.org\/download\/","os_name":"Linux","os_version":""}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054093,"guid":"6B12E18192BA40EDA58FE6867B73591D","previous_id":1054092,"previous_guid":"7093BD4564834EEE99E06372CDC16E5E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9C009C8C13E3493BBC3254DE328DF4F8","order_id":1,"type_id":6,"title":"Section","source":{"title":"Creating BigWig Coverage Files"}},{"id":1054724,"guid":"7A6B613C213E4BAE902009C2E3052DE8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">A bedGraph of coverage is created using samtools mpileup and <\/div><div class = \"text-block\"><a href=\"https:\/\/gitlab.com\/gringer\/bioinfscripts\/blob\/master\/mpileupDC.pl\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">mpileupDC.pl<\/span><\/a><\/div><div class = \"text-block\">, excluding any skipped intronic sequence. When 'mpileupDC.pl' is provided with a single file, it will output a bedGraph file with a header line starting with '##'; this header line is removed. <\/div><div class = \"text-block\">To simplify output naming in later steps, the run name is added to the file name.<\/div><div class = \"text-block\"><span>The particular JBrowse plugin that I use for stranded display requires that the reverse strand have <\/span><span style = \"font-style:italic;\">negative<\/span><span> coverage values, so that file needs to be changed:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">runName=\"CHANGE_THIS\";<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo ${bc};<\/div><div class = \"text-block\">  samtools view -b -F 0x10 mapped\/mm2_called_${bc}_vs_MmusG.bam | \\<\/div><div class = \"text-block\">    samtools mpileup -A -B -Q 0 -q 0 -I -q 0 -Q 0 - | \\<\/div><div class = \"text-block\">    mpileupDC.pl | tail -n +2 > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.plus<\/div><div class = \"text-block\">  samtools view -b -f 0x10 mapped\/mm2_called_${bc}_vs_MmusG.bam | \\<\/div><div class = \"text-block\">    samtools mpileup -A -B -Q 0 -q 0 -I -q 0 -Q 0 - | \\<\/div><div class = \"text-block\">    mpileupDC.pl | tail -n +2 > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">  perl -i -pe 's\/([0-9]+)$\/-$1\/' mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">done;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">As an alternative, BEDTools can be used to generate coverage. The default options for BEDTools treat sequence deletions (which happen frequently in nanopore reads) as a drop in coverage, which can make exon hunting and coverage calculation more difficult. I have proposed a fix to this via a command-line option \"-ignoreD\", which is available from my BEDTools fork:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">runName=\"CHANGE_THIS\";<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo ${bc};<\/div><div class = \"text-block\">  samtools view -q 1 mapped\/mm2_called_${bc}_vs_MmusG.bam | \\<\/div><div class = \"text-block\">    bedtools genomecov -bga -strand '+' -split -ignoreD -ibam - > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.plus<\/div><div class = \"text-block\">    bedtools genomecov -bga -strand '-' -split -ignoreD -ibam - > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">  perl -i -pe 's\/([0-9]+)$\/-$1\/' mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">done;<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">With the standard version of BEDTools, the \"-ignoreD\" parameter can be excluded in order to generate a similar BedGraph output, but with drops in coverage at deletion points:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">runName=\"CHANGE_THIS\";<\/div><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo ${bc};<\/div><div class = \"text-block\">  samtools view -q 1 mapped\/mm2_called_${bc}_vs_MmusG.bam | \\<\/div><div class = \"text-block\">    bedtools genomecov -bga -strand '+' -split -ibam - > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.plus<\/div><div class = \"text-block\">    bedtools genomecov -bga -strand '-' -split -ibam - > mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">  perl -i -pe 's\/([0-9]+)$\/-$1\/' mapped\/mm2_${runName}_called_${bc}_vs_MmusG.bg.minus<\/div><div class = \"text-block\">done;<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"F3E77CB0662811E9973C7782266EF909","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bf7njpt6.pl","placeholder":"\/img\/extensions\/file.png","original_name":"mpileupDC.pl"}},{"id":1054726,"guid":"806B82C011BE11EBAEB58BB472A28524","order_id":3,"type_id":8,"title":"software","source":{"name":"BEDTools","developer":"Aaron Quinlan","repository":"https:\/\/github.com\/gringer\/bedtools2","link":"https:\/\/github.com\/gringer\/bedtools2\/tree\/ignoreD","os_name":"Linux","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054094,"guid":"6E0D4849E01F48629CF06F73C92DFF69","previous_id":1054093,"previous_guid":"6B12E18192BA40EDA58FE6867B73591D","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0413B7F35C144107A74CDE3582E7674B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Creating BigWig Coverage Files"}},{"id":1054724,"guid":"B7A31DC50B2B4F0898417BC35A3907B7","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Stranded bedgraph files are converted to bigwig. This requires BEDTools and a genome information file containing chromosome lengths (one for Mmus\/mm10 is attached to this step). As this bigwig file is one of the main outputs, the run name is added to the file name.<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">for bc in $(awk '{print $2}' barcode_counts.txt);<\/div><div class = \"text-block\">  do echo ${bc};<\/div><div class = \"text-block\">  basename=\"mapped\/mm2_${runName}_called_${bc}_vs_MmusG\"<\/div><div class = \"text-block\">  bedGraphToBigWig ${basename}.bg.plus Mmus_genome.chrInfo.txt ${basename}.bw.plus<\/div><div class = \"text-block\">  bedGraphToBigWig ${basename}.bg.minus Mmus_genome.chrInfo.txt ${basename}.bw.minus <\/div><div class = \"text-block\">done<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"269CE57721154A059DD356D4E1527D1F","order_id":2,"type_id":8,"title":"software","source":{"name":"BEDTools","developer":"Quinlan laboratory, University of Utah","repository":"https:\/\/github.com\/arq5x\/bedtools2\/","link":"http:\/\/omictools.com\/bedtools-tool","os_name":"","os_version":""}},{"id":1054726,"guid":"CCFDE7C06A0A11E9A2CFBDCCD36822E4","order_id":3,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/bgevjpt6.txt","placeholder":"https:\/\/www.protocols.io\/img\/extensions\/txt.png","original_name":"Mmus_genome.chrInfo.txt"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054095,"guid":"F5A36E9906D64E198FE2D34A0BC2E98E","previous_id":1054094,"previous_guid":"6E0D4849E01F48629CF06F73C92DFF69","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"23B91C70BAF141C3A157CD39BD8506B1","order_id":1,"type_id":6,"title":"Section","source":{"title":"JBrowse Configuration"}},{"id":1054724,"guid":"F84C536A317D4E09B5925953FD84F98C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Each track should have its own JBrowse configuration section using the <\/span><span style = \"font-style:italic;\">StrangedBigWig<\/span><span> class and <\/span><span style = \"font-style:italic;\">StrandedXYPlot<\/span><span> type. BAM tracks can also be added. An example is shown here:<\/span><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">[tracks.bam-CG005_Nov18_BC03-track]<\/div><div class = \"text-block\"># settings for what data is shown in the track<\/div><div class = \"text-block\">storeClass     = JBrowse\/Store\/SeqFeature\/BAM<\/div><div class = \"text-block\">urlTemplate    = raw\/mm2_called_CG005AB_BC03_vs_MmusG.bam<\/div><div class = \"text-block\">baiUrlTemplate = raw\/mm2_called_CG005AB_BC03_vs_MmusG.bam.bai<\/div><div class = \"text-block\">chunkSizeLimit = 10000000<\/div><div class = \"text-block\">maxHeight      = 3000<\/div><div class = \"text-block\"># settings for how the track looks<\/div><div class = \"text-block\">category = MinION \/ Alignments<\/div><div class = \"text-block\">type = JBrowse\/View\/Track\/Alignments2<\/div><div class = \"text-block\">key  = Minimap2 alignments from 4T1.\u03c10#C [CG005]<\/div><div class = \"text-block\">[tracks.bw-CG005_Nov18_BC03-both-track]<\/div><div class = \"text-block\">storeClass     = StrandedPlotPlugin\/Store\/SeqFeature\/StrandedBigWig<\/div><div class = \"text-block\">urlTemplate    = bw\/mm2_called_CG005AB_BC03_vs_MmusG.bw<\/div><div class = \"text-block\">category       = MinION \/ Coverage<\/div><div class = \"text-block\">type           = StrandedPlotPlugin\/View\/Track\/Wiggle\/StrandedXYPlot<\/div><div class = \"text-block\">key            = Minimap2 coverage from 4T1.\u03c10#C [CG005]<\/div><div class = \"text-block\">scale          = log<\/div><div class = \"text-block\">scoreType      = maxScore<\/div><div class = \"text-block\">autoscale      = global<\/div><div class = \"text-block\">style.pos_color = #228B22<\/div><div class = \"text-block\">style.neg_color = lightskyblue<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">[tracks.BWCG004-4T1-BC04-both-track ]<\/div><div class = \"text-block\"> storeClass     = StrandedPlotPlugin\/Store\/SeqFeature\/StrandedBigWig<\/div><div class = \"text-block\"> urlTemplate    = bw\/mm2_called_CG004_BC04_vs_MmusG.bw<\/div><div class = \"text-block\"> category       = MinION - Coverage<\/div><div class = \"text-block\"> type           = StrandedPlotPlugin\/View\/Track\/Wiggle\/StrandedXYPlot<\/div><div class = \"text-block\"> key            = MinION minimap2 coverage from CG004-4T1-WT (combined strands)<\/div><div class = \"text-block\"> scale          = log<\/div><div class = \"text-block\"> scoreType      = maxScore<\/div><div class = \"text-block\"> autoscale      = global<\/div><div class = \"text-block\"> style.pos_color = darkred<\/div><div class = \"text-block\"> style.neg_color = darkgreen<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">I have written my own helper scripts to reduce the effort required to generate these track sections. This is specific to my use case, but may help others for adapting to their own use. It takes three command-line parameters: the base file name, the internal ID for use in the track definition, and the label that appears within JBrowse. I use it as follows:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">.\/makeMinIONTemplate.sh mm2_called_CG005AB_BC03_vs_MmusG CG005_Nov18_BC03 '4T1.\u03c10#C [CG005]' >> tracks.conf<\/div><\/div><\/code><\/pre><\/div><\/div>"}},{"id":1054725,"guid":"39E90E6011C011EBAEB58BB472A28524","order_id":2,"type_id":23,"title":"file","source":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/cnn7jpt6.sh","placeholder":"","original_name":"makeMinIONTemplate.sh"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1054096,"guid":"F8CE0D23978B44399C2D230D114B0024","previous_id":1054095,"previous_guid":"F5A36E9906D64E198FE2D34A0BC2E98E","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"FF4D4E04A73C440EACA4439AFF3D4B22","order_id":1,"type_id":6,"title":"Section","source":{"title":"Sanity Check"}},{"id":1054724,"guid":"EA0D0E7CCF5A4700B6FEC7DC3A185FDD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span>If this has worked properly, then mapping human or mouse to the mitochondrial genome should show most expression appearing on the positive strand, with a small scattering of negative-strand expression, a bit like the <\/span><span style = \"font-style:italic;\">Expected Results<\/span><span> shown here.<\/span><\/div><div class = \"text-block\">If not, check for the following issues:<\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>Tracks not displaying at all in JBrowse -- make sure track IDs inside square brackets are of the form [ <\/span><span style = \"font-style:italic;\">tracks.<unique-id-without-dots>-track<\/span><span> ]<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">JBrowse track is reflected in the X axis -- make sure that the reverse bedgraph file is orientated the correct way; it should be created with the '-f 0x10' flag (no capitalisation).<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>JBrowse track only shows one direction -- make sure that the reverse bedgraph file has <\/span><span style = \"font-style:italic;\">negative<\/span><span> values, and re-generate the bigwig file<\/span><\/li><\/ul><\/div><\/div>"}},{"id":1054725,"guid":"AD88907133B74053B1194D43D9837D8C","order_id":2,"type_id":17,"title":"result","source":{"body":"<div class = \"text-blocks\"><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/public\/d3caf5d2f980d165712bb8262c51687a45460e9aedd9631ff736620da233c966\/cnn8jpt6.png\" \/><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":null,"section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":null,"materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">This protocol demonstrates how to map strand-oriented long reads to a genome, and visualise them in a genome browser.<\/div><div class = \"text-block\">The general idea is to use minimap2 to create stranded BAM files, which are split for forward\/reverse orientation then converted into BigWig format for display in a genome browser.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input(s)<\/span><span>: <\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\"><span>stranded fastq files (see protocol <\/span><a href=\"https:\/\/dx.doi.org\/10.17504\/protocols.io.57hg9j6\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Preparing Reads for Stranded Mapping<\/span><\/a><span style = \":;\">)<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">a FASTA file containing the genome \/ sequence of interest.\n <\/li><li style = \"counter-reset:ol0;list-style-type:disc;\"><span style = \"font-weight:bold;\">Output(s):<\/span><\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Genome-mapped stranded BAM files<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Genome-mapped stranded BigWig files<\/li><\/ul><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Output(s):<\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Genome-mapped stranded BAM files<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Genome-mapped stranded BigWig files<\/li><\/ul><\/div><\/div>","changed_on":1603081141}