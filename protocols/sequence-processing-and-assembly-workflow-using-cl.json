{"id":49797,"title":"Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0","title_html":"<p>Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0<\/p>","image":{"source":"https:\/\/www.protocols.io\/img\/default_protocol.png","placeholder":"https:\/\/www.protocols.io\/img\/default_protocol.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.buvdnw26","doi_status":2,"uri":"sequence-processing-and-assembly-workflow-using-cl-buvdnw26","type_id":1,"template_id":5,"published_on":1621614879,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"buvdnw26","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1620657828,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Helena Pound","affiliation":"University of Tennessee, Knoxville","affiliations":[{"affiliation":"University of Tennessee, Knoxville","url":null,"is_default":1}],"username":"helena-pound","note":null,"link":null,"image":{"source":"\/img\/avatars\/007.png","placeholder":"\/img\/avatars\/007.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":12,"authors":[{"name":"Helena Pound","affiliation":"The University of Tennessee, Knoxville","affiliations":[],"username":"helena-pound","note":"","link":null,"image":{"source":"\/img\/avatars\/007.png","placeholder":"\/img\/avatars\/007.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Steven Wilhelm","affiliation":"The University of Tennessee, Knoxville","affiliations":[],"username":"steven-wilhelm","note":"","link":null,"image":{"source":"https:\/\/s3.amazonaws.com\/zappy-avatars\/13177_avatar.jpg","placeholder":"https:\/\/s3.amazonaws.com\/zappy-avatars\/13177_avatar.jpg"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[{"id":184,"uri":"the-aquatic-microbial-ecology-research-group-amerg2","title":"The Aquatic Microbial Ecology Research Group - AMERG (The Buchan, Zinser and Wilhelm labs)","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/dw3dg8n.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/dw3dg8n.jpg"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"request":{"id":184,"uri":"the-aquatic-microbial-ecology-research-group-amerg2","title":"The Aquatic Microbial Ecology Research Group - AMERG (The Buchan, Zinser and Wilhelm labs)","image":{"source":"https:\/\/s3.amazonaws.com\/pr-journal\/dw3dg8n.jpg","placeholder":"https:\/\/s3.amazonaws.com\/pr-journal\/dw3dg8n.jpg"},"tech_support":{"email":null,"phone":null,"hide_contact":0,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0","title_html":"Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"sequence-processing-and-assembly-workflow-using-cl-buvdnw26","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1621614880,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}},{"id":941,"uri":"great-lakes-center-for-fresh-waters-and-human-health","title":"Great Lakes Center for Fresh Waters and Human Health","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":"wilhelm@utk.edu","phone":"","hide_contact":1,"use_email":0,"url":null},"is_member":1,"request":{"id":941,"uri":"great-lakes-center-for-fresh-waters-and-human-health","title":"Great Lakes Center for Fresh Waters and Human Health","image":{"source":"https:\/\/www.protocols.io\/img\/group_placeholder.png","placeholder":"https:\/\/www.protocols.io\/img\/group_placeholder.png"},"tech_support":{"email":"wilhelm@utk.edu","phone":"","hide_contact":1,"use_email":0,"url":null},"is_member":1,"description":null,"research_interests":null,"website":null,"location":null,"affiliation":null,"status":{"is_visible":true,"access_level":0},"stats":{"files":[],"total_members":0,"total_followers":0,"total_child_groups":0,"total_parent_groups":0,"has_collaborations":0},"user_status":{"is_member":true,"is_confirmed":true,"is_invited":false,"is_owner":false,"is_admin":false,"is_following":false},"join_link":null,"token":null,"owner":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"is_protocol_requested":0,"is_group_requested":0,"is_my":false,"is_request":false,"is_confirmed":1,"is_declined":0,"requester":{"name":" ","affiliation":null,"affiliation_url":null,"username":null,"link":null},"protocol":{"id":0,"title":"Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0","title_html":"Sequence processing and assembly workflow using\u00a0CLC workbench, SortMeRNA, and MegaHit.\u00a0","image":{"source":null,"placeholder":null},"doi":null,"doi_status":0,"uri":"sequence-processing-and-assembly-workflow-using-cl-buvdnw26","type_id":1,"template_id":0,"published_on":null,"stats":{"number_of_views":0,"number_of_steps":0,"number_of_bookmarks":0,"number_of_comments":0,"number_of_exports":0,"number_of_runs":0,"number_of_votes":0,"is_voted":0},"parent_protocols":[],"parent_collections":[],"cited_protocols":[]},"created_on":1621614880,"resolve_on":0,"resolved_user":{"name":" ","affiliation":null,"affiliations":[],"username":null,"note":null,"link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"shared":false}}],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/sequence-processing-and-assembly-workflow-using-cl-buvdnw26","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"1B07D7A0B19E11EB8B742516E2C17239","state_version_id":725,"steps":[{"id":1175879,"guid":"570F4620B19E11EB8B742516E2C17239","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C2C078BFD57E42CF967BF33AF622E5B3","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"7C5933AA658A40CE9A4A366B27A697BD","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Upload sequence files to CLC workbench, indicating whether the reads are paired-end or single-end. Choose quality control parameters.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176567,"guid":"1C371E10B28911EBB684276B6E6B5819","previous_id":1175879,"previous_guid":"570F4620B19E11EB8B742516E2C17239","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"438E9F312CE24CFFADF434F18D6C1EC8","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"420321EF00B1447189D0230431314AF9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We recommend removing failed reads and not demultiplexing.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176572,"guid":"78AB3810B28A11EBB684276B6E6B5819","previous_id":1176595,"previous_guid":"8F959260B28911EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0EA339D78F4643D986AFCB60190B7D78","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"FD1FEEBDA04842BA9D5647ADB77EF817","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Trimmed reads should then be exported as fastq files, maintaining 2 files for pair-end reads. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176575,"guid":"97322910B28A11EBB684276B6E6B5819","previous_id":1176567,"previous_guid":"1C371E10B28911EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B328C0B85975442F8B23166A4F395390","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"D980F2EC9E534CDEA2AFB11D26DC82E6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">If multiple lanes were run for a single sample and they have not yet been interleaved, now is the best time to create a new sequence list that contains all sequencing data from multiple lanes\/runs for a single sample. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176588,"guid":"FCAD3F30B28C11EBB684276B6E6B5819","previous_id":1176592,"previous_guid":"AFE23D50B28B11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D48E78E505014EDEB1E5175D3CB94636","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"91C12DBF17134110B52F899379B2A2F9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Assemble \"clean\" sequence files using MegaHit version 1.2.9. The clean files should be named sample_notaligned.fasta. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176589,"guid":"559F2CC0B28D11EBB684276B6E6B5819","previous_id":1176588,"previous_guid":"FCAD3F30B28C11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"65F337CCE65247829329F052869716F5","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"831DE11EC2374D9D86AD312E9FBCAE6C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">This example uses the interleaved paired-end \"clean\" sequence files generated by SortMeRNA. Additional assembly options for other sequence types and stringency parameters are available. The final assembly will be labeled final.contigs.fa in the assembly_folder indicated. <\/div><\/div>"}},{"id":1054725,"guid":"D2931700B28D11EBB684276B6E6B5819","order_id":2,"type_id":15,"title":"command","source":{"id":8792,"name":"megahit -12 sample1_notaligned.fasta, sample2_notaligned.fasta, sample3_notaligned.fasta -o assembly_folder","command_name":"MegaHit Example","command":"MegaHit example using interleaved paired-end reads from 3 files after SortMeRNA processing.","os_name":"Linux","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176592,"guid":"AFE23D50B28B11EBB684276B6E6B5819","previous_id":1176593,"previous_guid":"DA1464E0B28B11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"81DA68EBF23B4534B52F74D24A3D989D","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"1BC30C1F773346E5A42BA7AACCD99A36","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Kopylova E., No\u00e9 L. and Touzet H., \"SortMeRNA: Fast and accurate  filtering of ribosomal RNAs in metatranscriptomic data\", Bioinformatics (2012), doi: 10.1093\/bioinformatics\/bts611.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176593,"guid":"DA1464E0B28B11EBB684276B6E6B5819","previous_id":1176594,"previous_guid":"D5CC0240B28A11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"34B2BF4542564E7897892F27B0D87477","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"15EB145E3649492BBA79EF27959CE6B0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The example is for paired reads, denoted by the R1 and R2 read files and the -paired_in function. Read files can be compressed with .gz or uncompressed. Note that each run must have a new working directory or it will overwrite existing files. This is particularly important if you are running multiple terminals of SortMeRNA at once. The output file denoted as sample_notaligned.fasta is the remaining interleaved, pair-end \"clean\" sequences you will use to assemble.<\/div><\/div>"}},{"id":1054725,"guid":"AD6F2500B28C11EBB684276B6E6B5819","order_id":2,"type_id":15,"title":"command","source":{"id":8790,"name":"sortmerna -ref rfam-5.8s-database-id98.fasta -refrfam-5s-database-id98.fasta -ref silva-arc-16s-id95.fasta -ref silva-arc-23s-id98.fasta -ref silva-bac-16s-id90.fasta -ref silva-bac-23s-id98.fasta -ref silva-euk-18s-id95.fasta -ref silva-euk-28s-id98.fasta -reads sample_R1.fastq -reads sample_R2.fastq -workdir sample_folder -fastx -paired_in -other sample_notaligned.fasta","command_name":"SortMERNA example","command":"SortMeRNA example for paired-end reads","os_name":"Linux","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176594,"guid":"D5CC0240B28A11EBB684276B6E6B5819","previous_id":1176572,"previous_guid":"78AB3810B28A11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"07E5D45E4667406DA59C3E4D4D23D8A4","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"42CBE3E6E25A49E7A75564E9F585E14D","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Remove any residual rRNA from sequences using SortMeRNA version 4. Note, this is not necessary if you have sequenced DNA. We recommend using all 8 databases provided. See example code below.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176595,"guid":"8F959260B28911EBB684276B6E6B5819","previous_id":1176596,"previous_guid":"76733EE0B28911EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"12C9DB0E40544B9EB3B40C0B7BA63ECA","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"BE0973B94AA54ED0A9C742E112B0D362","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">We recommend using a quality score of 0.02 (the lower the score, the more stringent) and using ambiguous trimming with a limit of 2. Read length parameters varies based on the length of reads you requested from the sequencer. Adapter removal can either performed automatically or by uploading adapter list provided by sequencer. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176596,"guid":"76733EE0B28911EBB684276B6E6B5819","previous_id":1176575,"previous_guid":"97322910B28A11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3EF596AD62B64E87B6DEB2B2443AEDB8","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"520EA95FE8BD4C278586DAA71DBCD187","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Trim sequences and remove adapters in CLC.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1176597,"guid":"6CAD29C0B28E11EBB684276B6E6B5819","previous_id":1176589,"previous_guid":"559F2CC0B28D11EBB684276B6E6B5819","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"82CD71B3B5FA4B5CB858B98F71E7715F","order_id":1,"type_id":6,"title":"Section","source":{"title":""}},{"id":1054724,"guid":"6BA789AB43BD44649C05D279F44F1BC5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Li, D., Luo, R., Liu, C.M., Leung, C.M., Ting, H.F., Sadakane, K.,  Yamashita, H. and Lam, T.W. MEGAHIT v1.0: A Fast and Scalable Metagenome Assembler driven by Advanced Methodologies and Community  Practices. Methods (2016).<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">The protocol details one of many methods available to process and assemble sequence data using CLC workbench, SortMeRNA, and MegaHit.<\/div><\/div>","changed_on":1621614879}