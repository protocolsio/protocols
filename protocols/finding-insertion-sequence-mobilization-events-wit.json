{"id":47710,"title":"Finding insertion sequence mobilization events with ISCompare.","title_html":"<p>Finding insertion sequence mobilization events with ISCompare.<\/p>","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/c4ifhyce.png","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/files\/c4ifhyce.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bst6nere","doi_status":2,"uri":"finding-insertion-sequence-mobilization-events-wit-bst6nere","type_id":1,"template_id":5,"published_on":1614364952,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"bst6nere","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1614358593,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Mauricio Lozano","affiliation":null,"affiliations":[{"affiliation":null,"url":null,"is_default":1}],"username":"mauricio-lozano","note":null,"link":"https:\/\/github.com\/maurijlozano\/ISCompare","image":{"source":"\/img\/avatars\/008.png","placeholder":"\/img\/avatars\/008.png"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"},{"id":5,"image":{"source":"\/img\/badges\/star.svg","placeholder":"\/img\/badges\/star.svg"},"name":"Early adopter"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":"https:\/\/github.com\/maurijlozano\/ISCompare","total_collections":0,"number_of_steps":28,"authors":[{"name":"Ezequiel G. Mogro","affiliation":"Instituto de Biotecnolog\u00eda y Biolog\u00eda Molecular (IBBM)","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Nicolas Ambrosis","affiliation":"Instituto de Biotecnolog\u00eda y Biolog\u00eda Molecular (IBBM)","affiliations":[],"username":"nicolas-ambrosis","note":"","link":null,"image":{"source":"\/img\/avatars\/006.png","placeholder":"\/img\/avatars\/006.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Mauricio Lozano","affiliation":"Instituto de Biotecnolog\u00eda y Biolog\u00eda Molecular (IBBM)","affiliations":[],"username":"mauricio-lozano","note":"","link":null,"image":{"source":"\/img\/avatars\/008.png","placeholder":"\/img\/avatars\/008.png"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/finding-insertion-sequence-mobilization-events-wit-bst6nere","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"7911F210785311EBB8EEB922F54EE308","state_version_id":855,"steps":[{"id":1134379,"guid":"AA63B820785411EBB8EEB922F54EE308","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AACFDB83E1A24828BA8659FEEFA4A02D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Introduction"}},{"id":1054724,"guid":"82A2898F85594621980879A32C86A161","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><span>Bacteria accessory genome is composed, in its majority, of mobile genetic elements (MGE). MGEs are grouped into two classes: plasmids and bacteriophages, and transposable elements (TEs) (Siguier <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2014). Among the TEs, Insertion sequences (ISs) are the smallest, being only formed by a transposase coding region and imperfect terminal inverted repeats(Mahillon and Chandler, 1998). ISs can spread in a genome by transposition, and participate in genome evolution, being mediators of genomic rearrangements, gene inactivation, over-expression and modulation of the expression of neighbor genes (Siguier <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2014). In addition, ISs contribute to bacterial phenotypic variation (Schneider and Lenski, 2004), altering the resistance to antibacterial agents  (Mugnier <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2009), virulence, pathogenicity, catabolism (Vandecraen <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2017), defence against harmful genes (Fan <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2019) and adaptation of bacterial strains to vaccination strategies (Pawloski <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2014; Carriquiriborde <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2019; Zomer <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2018). Profiling IS insertion sites and their differential location within bacterial species is thus of great importance. <\/span><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><span>We developed a new program,<\/span><span style = \"font-weight:bold;\"> ISCompare<\/span><span> (Mogro EG <\/span><span style = \"font-style:italic;\">et al.<\/span><span>, 2020)\u2060, in order to automate the detection of IS mobilization events in related bacterial strains. Here we present a comprehensive description on how to use ISCompare, and interpret the obtained results.<\/span><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><span style = \"font-weight:bold;font-style:italic;\">Background Information<\/span><\/div><div class = \"text-block\">Insertion sequences are drivers of genome evolution and adaptability of microorganisms, which makes the analysis of ISs location of great importance. The principal methods used for IS profiling have been restriction fragment length polymorphism (Das et al., 1995), chromosomal DNA hybridization (Fan et al., 2019; Soria et al., 1994) and diverse PCR related methods (Bik et al., 1996; Lozano et al., 2010; Suzuki et al., 2004). With the increasing amount of whole genome sequencing projects for microorganisms, several bioinformatic tools were developed for the automatic identification of ISs (ISFinder, Siguier et al., 2006; ISEScan, Xie and Tang, 2017; Oasis, Robinson et al., 2012; ISQuest, Biswas et al., 2015). In addition, some tools are able to compare the location of ISs between bacterial strains (Breseq, Barrick et al., 2014; Transposon Insertion Finder, Nakagome et al., 2014; ISMapper, Hawkey et al., 2015; and panISa, Treepong et al., 2018). Most of these programs are based on the soft mapping of short reads from whole genome shotgun sequencing experiments to a reference genome. Some disadvantages of these programs are that they require a high enough genome coverage for an accurate detection of ISs, and that they are difficult to apply to the analysis of massive genomic datasets (Adams et al., 2016). Also, obtaining genome sequences with high sequence coverage for numerous bacterial strains is costly and laboratories in developing countries often do not have the required resources. To overcome some of these limitations, Adams et al. (2016) designed ISSeeker for the rapid and high-throughput mapping of ISs using whole genome sequence assemblies, including draft genomes. In draft genomes, contigs are typically broken at IS locations (Sohn and Nam, 2018) and contain partial IS sequences at their ends. ISSeeker uses Blast (Altschul et al., 1990) to identify the locations of a provided insertion sequence, then its flanks are extracted and mapped against a reference genome. Some of the limitations of ISSeeker are that it requires background knowledge on the ISs present in the test organism, that it can analyse one IS at a time, and that the comparison to establish differentially located ISs (DLIS) has to be manually done.<\/div><div class = \"text-block\">We developed ISCompare (Mogro EG et al., 2020) to improve on these issues, and to facilitate the interpretation and analysis of the results. ISCompare uses Blast to search simultaneously for all the ISs in a database in both the reference and query genomes, and to determine and compare their genomic location by analysing their flanking sequences. Briefly, in a first step ISCompare uses blast to search for ISs in the query genome. Then, the Query IS Flanks (QIF) are extracted and used in a blast search against the reference genome. The correct matches are analysed and their flanks (Reference Anchor Flanks, RAFs) tested for the presence of ISs. If a RAF presents an IS, then the location of that IS in both genomes is the same. Otherwise, a differentially located IS (DLIS) is informed. Further, we implemented a novel shift mode that allows the correct identification of DLISs which flanks present other ISs (i.e. the case of two or more adjacent IS) or repeated sequences (i.e. the case of multicopy genes). <\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\">ISCompare outputs several tables (see, Guideline for understanding the results) containing the mapping information, differential location status and the annotation data of the flanking sequences on both the query and reference genomes. In addition, with the -p argument, a graphic PDF report is generated, which can be used to confirm the results. <\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">LITERATURE CITED<\/span><\/div><div class = \"text-block\"><ul style = \"list-style-type:disc;\"><li style = \"counter-reset:ol0;list-style-type:disc;\">Adams,M.D. et al. (2016) Quantitative assessment of insertion sequence impact on bacterial genome architecture. Microb. Genomics, 2, e000062.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Afgan,E. et al. (2016) The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update. Nucleic Acids Res., 44, gkw343.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Altschul,S.F. et al. (1990) Basic local alignment search tool. J Mol Biol, 215, 403\u2013410.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Auch,A.F. et al. (2010) Standard operating procedure for calculating genome-to-genome distances based on high-scoring segment pairs. Stand. Genomic Sci., 2, 142\u2013148.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Bankevich,A. et al. (2012) SPAdes: A new genome assembly algorithm and its applications to single-cell sequencing. J. Comput. Biol., 19, 455\u2013477.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Barrick,J.E. et al. (2014) Identifying structural variation in haploid microbial genomes from short-read resequencing data using breseq. BMC Genomics, 15, 1039.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Bart,M.J. et al. (2014) Global population structure and evolution of Bordetella pertussis and their relationship with vaccination. MBio, 5, 1\u201313.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Belcher,T. and Preston,A. (2015) Bordetella pertussis evolution in the (functional) genomics era. Pathog. Dis., 73, ftv064.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Biswas,A. et al. (2015) ISQuest: Finding insertion sequences in prokaryotic sequence fragment data. Bioinformatics, 31, 3406\u20133412.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Carriquiriborde,F. et al. (2019) Rare Detection of Bordetella pertussis Pertactin-Deficient Strains in Argentina. Emerg. Infect. Dis., 25, 2048\u20132054.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Cock,P.J.A. et al. (2009) Biopython: Freely available Python tools for computational molecular biology and bioinformatics. Bioinformatics, 25, 1422\u20131423.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Dewan,K.K. et al. (2020) Acellular pertussis vaccine components: Today and tomorrow. Vaccines, 8.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Fan,C. et al. (2019) Defensive Function of Transposable Elements in Bacteria.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Goris,J. et al. (2007) DNA-DNA hybridization values and their relationship to whole-genome sequence similarities. Int. J. Syst. Evol. Microbiol., 57, 81\u201391.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Hawkey,J. et al. (2015) ISMapper: Identifying transposase insertion sites in bacterial genomes from short read sequence data. BMC Genomics, 16, 1\u201311.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Hiramatsu,Y. et al. (2017) Significant decrease in pertactin-deficient Bordetella pertussis isolates, Japan. Emerg. Infect. Dis., 23, 699\u2013701.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Inatsuka,C.S. et al. (2010) Pertactin is required for Bordetella species to resist neutrophil-mediated clearance. Infect. Immun., 78, 2901\u20132909.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Kitts,P.A. et al. (2016) Assembly: A resource for assembled genomes at NCBI. Nucleic Acids Res., 44, D73\u2013D80.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Letunic,I. and Bork,P. (2019) Interactive Tree of Life (iTOL) v4: Recent updates and new developments. Nucleic Acids Res., 47, W256\u2013W259.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">L\u00f3pez,J.L. et al. (2019) Codon Usage Heterogeneity in the Multipartite Prokaryote Genome: Selection-Based Coding Bias Associated with Gene Location, Expression Level, and Ancestry. MBio, 10, 1\u201320.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Mahillon,J. and Chandler,M. (1998) Insertion Sequences. Microbiol. Mol. Biol. Rev., 62, 725\u2013774.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Maruya,J. and Saeki,K. (2010) The bacA Gene Homolog, mlr7400, in Mesorhizobium loti MAFF303099 is Dispensable for Symbiosis with Lotus japonicus but Partially Capable of Supporting the Symbiotic Function of bacA in Sinorhizobium meliloti. Plant Cell Physiol., 51, 1443\u20131452.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Mechanize - Automate interaction with HTTP web servers. v0.4.5 2020.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Melvin,J.A. et al. (2014) Bordetella pertussis pathogenesis: Current and future challenges. Nat. Rev. Microbiol., 12, 274\u2013288.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Mogro EG et al. (2020) Easy identification of insertion sequence mobilization events in related bacterial strains with ISCompare. bioRxiv, 2020.10.16.342287.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Mugnier,P.D. et al. (2009) Functional analysis of insertion sequence ISAba1, responsible for genomic plasticity of acinetobacter baumannii. J. Bacteriol., 191, 2414\u20132418.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Nakagome,M. et al. (2014) Transposon Insertion Finder (TIF): A novel program for detection of de novo transpositions of transposable elements. BMC Bioinformatics, 15, 71.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Pawloski,L.C. et al. (2014) Prevalence and molecular characterization of pertactin-deficient Bordetella pertussis in the United States. Clin. Vaccine Immunol., 21, 119\u2013125.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Reback,J. et al. (2020) pandas-dev\/pandas: Pandas 1.1.2.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Robinson,D.G. et al. (2012) OASIS: An automated program for global investigation of bacterial and archaeal insertion sequences. Nucleic Acids Res., 40, e174\u2013e174.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Sallet,E. et al. (2013) Next-generation annotation of prokaryotic genomes with EuGene-P: application to Sinorhizobium meliloti 2011. DNA Res., 20, 339\u201354.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Schneider,D. and Lenski,R.E. (2004) Dynamics of insertion sequence elements during experimental evolution of bacteria. Res. Microbiol., 155, 319\u2013327.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Seemann,T. (2014) Prokka: Rapid prokaryotic genome annotation. Bioinformatics, 30, 2068\u20132069.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Siguier,P. et al. (2014) Bacterial insertion sequences: Their genomic impact and diversity. FEMS Microbiol. Rev., 38, 865\u2013891.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Siguier,P. et al. (2006) ISfinder: the reference centre for bacterial insertion sequences. Nucleic Acids Res., 34, D32.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Team,R.C. (2014) R: A language and environment for statistical computing.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Toro,N. et al. (2018) Contribution of mobile group II introns to Sinorhizobium meliloti genome evolution. Front. Microbiol., 9, 1\u20138.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Toro,N. et al. (2016) The early events underlying genome evolution in a localized Sinorhizobium meliloti population. BMC Genomics, 17, 1\u201314.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Treepong,P. et al. (2018) PanISa: Ab initio detection of insertion sequences in bacterial genomes from short read sequence data. Bioinformatics, 34, 3795\u20133800.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Vandecraen,J. et al. (2017) The impact of insertion sequences on bacterial genome plasticity and adaptability. Crit. Rev. Microbiol., 43, 709\u2013730.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Van Der Walt,S. et al. (2011) The NumPy array: A structure for efficient numerical computation. Comput. Sci. Eng., 13, 22\u201330.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Xie,Z. and Tang,H. (2017) ISEScan: automated identification of insertion sequence elements in prokaryotic genomes. Bioinformatics, 33, 3340\u20133347.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Zomer,A. et al. (2018) Bordetella pertussis population dynamics and phylogeny in Japan after adoption of acellular pertussis vaccines. Microb. genomics, 4, e000180.<\/li><li style = \"counter-reset:ol0;list-style-type:disc;\">Zulkower,V. and Rosser,S. (2020) DNA Features Viewer, a sequence annotations formatting and plotting library for Python. bioRxiv Prepr.<\/li><\/ul><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#204de7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134384,"guid":"1A956110785611EBB8EEB922F54EE308","previous_id":1134379,"previous_guid":"AA63B820785411EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A7335CBD0BCC4B6EAF5AC6513278A378","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"16DB2305756741EC8A0B684441AB0951","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\"><span style = \"font-weight:bold;\">ISCompare Requirements:<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Hardware<\/span><\/div><div class = \"text-block\">ISCompare can run on any modern laptop or desktop PC. <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Software<\/span><\/div><div class = \"text-block\">ISCompare was tested on Linux and Windows, although it should also run without problems on MacOS.<\/div><div class = \"text-block\">ISCompare is free and open source and can be downloaded from <\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/maurijlozano\/ISCompare\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/maurijlozano\/ISCompare<\/span><\/a><\/div><div class = \"text-block\"> with any internet browser (For download and install instruction see below).<\/div><div class = \"text-block\">ISCompare requires Python and NCBI-Blast+ programs. In addition the following python modules are required: Biopython, DNA_features_viewer, Pandas, Numpy and mechanize.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Input data<\/span><\/div><div class = \"text-block\">ISCompare requires the NCBI Assembly accession numbers of the reference and query genomes.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134385,"guid":"D431B4C0785611EBB8EEB922F54EE308","previous_id":1134384,"previous_guid":"1A956110785611EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"EC8EC54D85974DF08B969F97BF800F41","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"65138EA04AF740BFA6FF66C8C5AB6451","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Access <\/div><div class = \"text-block\"><a href=\"https:\/\/github.com\/maurijlozano\/ISCompare\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/maurijlozano\/ISCompare<\/span><\/a><\/div><div class = \"text-block\"> and click on code to clone repository (download as zip)<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134387,"guid":"2676CD60785711EBB8EEB922F54EE308","previous_id":1134396,"previous_guid":"A4CEB470785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7BC18693D0B4423FB780B4791CBE53C1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"14CBC4B71BFC4CDB82349031C19CFE3C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">In the automatic mode, ISCompare only require the accession numbers of the query and reference genomes. ISCompare uses Biopython module to download the genomes in genbank and fasta format. Then it runs an ISFinder server blast search, and downloads the sequences in fasta format of all the found ISs. Finaly, ISComapre algorithm is run to detect DLISs.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134389,"guid":"7F90B550785711EBB8EEB922F54EE308","previous_id":1134387,"previous_guid":"2676CD60785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"D9EF54E098644D22A9139F488FDFDBB5","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"31362DF1AD944906917B5B8C68D03874","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Open a terminal (command line window) and change to the ISCompare root folder.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134390,"guid":"81BBF9C0785711EBB8EEB922F54EE308","previous_id":1134389,"previous_guid":"7F90B550785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"7F677B75268C470B92CCB30AAF18081D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"4FB613370B9B4A01A30A14368CF685DE","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Make the ISCompare.py file executable. In linux it can be done by running the following command: <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">chmod +x ISCompare.py<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134391,"guid":"82CB6DF0785711EBB8EEB922F54EE308","previous_id":1134390,"previous_guid":"81BBF9C0785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"36C6626B227541B0A4C7991EA4FE5C7B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"A0D49D62DD8C4159B7EC16C2161DB33A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Type: <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">.\/ISCompare.py -h<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\"> to test the correct installation and display the program help.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134392,"guid":"8EAA5EB0785711EBB8EEB922F54EE308","previous_id":1134391,"previous_guid":"82CB6DF0785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"95685E01948A4C6EB878AE453CEDA197","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"05140973C07245518512FBF2E3390F12","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Accession numbers for the genomes to compare can be easily obtained from NCBI genomes (<\/div><div class = \"text-block\"><a href=\"https:\/\/www.ncbi.nlm.nih.gov\/genome\/browse\/#!\/overview\/\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">Link<\/span><\/a><\/div><div class = \"text-block\">).<\/div><div class = \"text-block\">For assemblies with multiple replicons or scaffolds, the assembly accession number should be used.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134393,"guid":"A340E880785711EBB8EEB922F54EE308","previous_id":1134385,"previous_guid":"D431B4C0785611EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"298B97A5E6084474A2BB7011FAC7809E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"4AB2CA523025481B91BDED640DD1CCCA","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Uncompresss and locate the extracted folder in the desired location.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134394,"guid":"A4121B30785711EBB8EEB922F54EE308","previous_id":1134393,"previous_guid":"A340E880785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"36600887B2A04CAAB3F8D1751C1CB41E","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"F3F199739D324B1A845C5667CBD18963","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Install Blast. Blast can be downloaded from <\/div><div class = \"text-block\"><a href=\"https:\/\/ftp.ncbi.nlm.nih.gov\/blast\/executables\/blast+\/LATEST\/.\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/ftp.ncbi.nlm.nih.gov\/blast\/executables\/blast+\/LATEST\/.<\/span><\/a><\/div><div class = \"text-block\"> In the case of Linux users Blast+ can be downloaded and installed as follows. Open a terminal and type: sudo apt install ncbi-blast+. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134395,"guid":"A47C27A0785711EBB8EEB922F54EE308","previous_id":1134394,"previous_guid":"A4121B30785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4F8DE2CCA1624D5189BFA183B090AFD4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"F31034255C974F06A96DD35EC2E35819","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Make sure that blast executables can be accessed from any folder (i.e. are on the PATH environment variable). <\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Windows users: <\/span><\/div><div class = \"text-block\">i. Open the Start Search, type in \u201cenv\u201d, and choose \u201cEdit the system environment variables\u201d<\/div><div class = \"text-block\">ii. Go to Environment variables<\/div><div class = \"text-block\">iii. Select PATH and edit<\/div><div class = \"text-block\">iv. Select New and add as value the complete path of blast binaries (e.g. C:\\Program Files\\NCBI\\blast-2.10.1+\\bin)<\/div><div class = \"text-block\">v. for blast to run correctly two extra environment variables must be created:<\/div><div class = \"text-block\">    \u2022  A new BLASTDB environment variable as pointer to database location, with \"blast_install_dir\\db\" as value (e.g. C:\\Program Files\\NCBI\\blast-2.10.1+\\db)<\/div><div class = \"text-block\">    \u2022 A new BLASTDB_LMDB_MAP_SIZE, with 1000000 as its value (needed to optimize makeblastdb operations when creating new database files)<\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Linux users:<\/span><\/div><div class = \"text-block\">If blast was installed using apt install, the binaries will be accessible from any folder with no further steps. Otherwise, following line \u2018export PATH=$PATH:\/blast_install_dir\/bin\u2019 should be edited or added to .bashrc file located on the home directory, where blast_install_dir is the blast install folder, and binaries are located on .\/bin child folder.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134396,"guid":"A4CEB470785711EBB8EEB922F54EE308","previous_id":1134395,"previous_guid":"A47C27A0785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A1CDE6CC30524832AA663F3C7BD7E864","order_id":1,"type_id":6,"title":"Section","source":{"title":"Downloading and installing ISCompare"}},{"id":1054724,"guid":"72B43354CB864BC3BCC279F0CD23C4C4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Install python and the required modules. Linux distributions usually have python preinstalled.<\/div><div class = \"text-block\">In the case of windows, Python can be downloaded from <\/div><div class = \"text-block\"><a href=\"https:\/\/www.python.org\/downloads\/windows\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.python.org\/downloads\/windows\/<\/span><\/a><\/div><div class = \"text-block\"> and installed as any other program. To install the required modules open a command line window and use: <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pip3 install \u2018module_name\u2019<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">where module_name is the required python module. In the case of windows, some modules need to be installed with pipwin. To install pipwin type:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pip install pipwin<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Then,to install the modules type:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">pipwin install \u2018module_name\u2019<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">If biopython was installed with pipwin, the error 'Bio module not found' could appear. In that case, go to your python install folder, \\Lib\\site-packages and verify that Biopython module folder is 'Bio' and not 'bio'.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#4a6de6","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134399,"guid":"9922C520785811EBB8EEB922F54EE308","previous_id":1134392,"previous_guid":"8EAA5EB0785711EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"8BDC75234C9D4092B7EF8D99CA603C1B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Basic protocol: Automatic search of Differentially Located Insertion Sequences (DLIS)"}},{"id":1054724,"guid":"36AF39E4A7064303BAD74976C28F5743","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To run ISCompare on the command line window type:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python ISCompare.py -Q ACC_NUM_Query -R ACC_NUM_Ref  -I -e your@email -o resultsDirName<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For linux command line you can also run:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">.\/ISCompare.py -Q ACC_NUM_Query -R ACC_NUM_Ref  -I -e your@email -o resultsDirName<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#899cdf","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134414,"guid":"AACB1330785911EBB8EEB922F54EE308","previous_id":1134428,"previous_guid":"6391A050785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"943A918E03EE4F61982C366B9EA457EB","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"BE17F20CB38F4F97A4F7A12996F62FCE","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Some bacterial genomes present regions with a high density of insertion sequences where it\u2019s common to find two or more adjacent ISs that are, in general, difficult to analyse since blast searches will yield more than one good match. The same happens in the case of ISs which are inserted into or near repeated sequences. For example, bacterial Group II introns are mobile elements that are inserted in most cases within ISs, and thus present repeated sequences on both flanks.  On such cases ISCompare can achieve better results using the shift mode.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134416,"guid":"1E2086D0785A11EBB8EEB922F54EE308","previous_id":1134399,"previous_guid":"9922C520785811EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"18EA304F077643AEAA64004717195A54","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"6F54E17C696044308027E643924857FF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">In this support protocol we are going to search for DLISs using a local IS database and local query and reference genome files in genbank format. In addition we will indicate ISCompare to clean temporal files and produce a PDF plot of the IS genomic surrounds.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134424,"guid":"63684660785A11EBB8EEB922F54EE308","previous_id":1134416,"previous_guid":"1E2086D0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"064AEA690A574EAB873A93B102C03AE7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"B787FFB03A1D4B889E6216BCB7728680","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download the sequence in fasta format of the ISs of interest. Concatenate those sequences in multifasta file.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134425,"guid":"63727F90785A11EBB8EEB922F54EE308","previous_id":1134424,"previous_guid":"63684660785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"23BE79AE1CB642CF93CAABD9EE6AF056","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"4C50234879304A1F9D55E5423AE2BF0C","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download the genomic sequence of both the reference and query genomes in genbank file format.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134426,"guid":"637C4390785A11EBB8EEB922F54EE308","previous_id":1134425,"previous_guid":"63727F90785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4BF324BA6FFE4DA59D4FFF5ED132ABE3","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"4861F56A25394F5DA9A212DDC16A8E70","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Place all the files in the ISCompare root folder (Otherwise a full path to the genome and IS database files will be required)<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134427,"guid":"6386A3D0785A11EBB8EEB922F54EE308","previous_id":1134426,"previous_guid":"637C4390785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B313BE72607C4294B4668FCE00AA119C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"D96857AE97BB48D1BD2E2F93582C9748","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Open a terminal (command line window) and change to the ISCompare root folder.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134428,"guid":"6391A050785A11EBB8EEB922F54EE308","previous_id":1134427,"previous_guid":"6386A3D0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"32D44499719B45738E3CFDCCBD3D98F7","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support Protocol 1: Search for differentially located ISs using local files"}},{"id":1054724,"guid":"C2BF399F7AF0498AA8C579B5C7BBD6C6","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">To run ISCompare on the command line window type:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python ISCompare.py -q Query_genome.gb -r Ref_genome.gb  -i ISdatabase.fasta -o ResultsDirName -c -p<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">For linux command line you can also run: <\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">.\/ISCompare.py -q Query_genome.gb -r Ref_genome.gb  -i ISdatabase.fasta -o ResultsDirName -c -p<\/div><\/div><\/code><\/pre><\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#09a2e0","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134430,"guid":"AB7D2FB0785A11EBB8EEB922F54EE308","previous_id":1134414,"previous_guid":"AACB1330785911EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"4A5E35B7CC974E83A9833953ADB17E58","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"4ED2D0A0BF824825B260B4232A978F6A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Compile a multifasta file containing the sequences of all variants of Group II introns which can be found on the genomes to analyse. This file will be used as the IS database.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134431,"guid":"ABE84D90785A11EBB8EEB922F54EE308","previous_id":1134430,"previous_guid":"AB7D2FB0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DEAE36E2FC8D4B80BA3DB65D4DEFD21A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"8320C06216884CEF9E520F04819BD12B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download the query and reference genomes in genbank format [or get the accession numbers]<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134432,"guid":"AC6593E0785A11EBB8EEB922F54EE308","previous_id":1134431,"previous_guid":"ABE84D90785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5E305021C74348A090CD29C9E32D5519","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"E93090E4152740C0B59C0CF011285CE2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Place all the files in the ISCompare root folder (Otherwise a full path to the genome and IS database files will be required)<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134433,"guid":"ACEB8CC0785A11EBB8EEB922F54EE308","previous_id":1134432,"previous_guid":"AC6593E0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6BE23D2580894CDEA2FB4A91809D85FF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"069BF47EF4AD4C949B9901000228FAD5","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Open a terminal (command line window) and change to the ISCompare root folder.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134434,"guid":"C8A776E0785A11EBB8EEB922F54EE308","previous_id":1134433,"previous_guid":"ACEB8CC0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6D629D0CEDC54DAD91DF17D34D6A5BFC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Support protocol 2: Using the shift mode to identify differentially located Group II Introns"}},{"id":1054724,"guid":"B95C8F457FBA4C11934D216ACF40362E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Run ISCompare with the following command:<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">python ISCompare.py -q Query_genome.gb -r Ref_genome.gb  -i Isdatabase(Group II Introns).fasta -o ResultsDirName -c -p -S 3000<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">or in linux<\/div><div class = \"text-block\"><pre><code><div class = \"text-blocks\"><div class = \"text-block\">.\/ISCompare.py -q Query_genome.gb -r Ref_genome.gb  -i Isdatabase(Group II Introns).fasta -o ResultsDirName -c -p -S 3000<\/div><\/div><\/code><\/pre><\/div><div class = \"text-block\">Here, the -S 3000 argument indicates ISCompare to shift the beginning and end of the blast hits for group II introns in 3000 basepairs. This allows ISCompare to get flanks that will not contain the ISs halfs located on both ends of the Group II introns. <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#6fc7e7","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134437,"guid":"F4B2CB40785A11EBB8EEB922F54EE308","previous_id":1134434,"previous_guid":"C8A776E0785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9FC66CC493ED485EBE130B094C5F8FC6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Guideline for understanding the results"}},{"id":1054724,"guid":"45201234C6C742D086381D8EA4B81E2B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">The main output of ISCompare is the FinalResults.csv table. In addition, the tables QueryIS.csv, RefIS.csv, ConsecutiveIS.csv and two optional files, SLIS.csv (-rs) and graphicReport.pdf (-p), are produced.<\/div><div class = \"text-block\">The FinalResults.csv table contains all the information related to the DLIS found on the query and reference genomes, their genomic coordinates and annotation. All the analysed ISs are classified in 8 selfexplicative categories: <\/div><div class = \"text-block\"><ol style = \"list-style-type: decimal;\"><li style = \"counter-reset:ol0;\">DLIS<\/li><li style = \"counter-reset:ol0;\">Verify manually, possible false positive caused by consecutive ISs<\/li><li style = \"counter-reset:ol0;\">Verify manually, Possible false positive produced by consecutive IS [2 RAFs found, only one with an IS]<\/li><li style = \"counter-reset:ol0;\">Verify manually, possible false positive produced by repeated sequences [Different QIFs match with same region]<\/li><li style = \"counter-reset:ol0;\">Verify manually, possible false positive produced by QIF match on scaffold end<\/li><li style = \"counter-reset:ol0;\">Discarded for analysis. There were multiple blastn hits, and left and right pairs could not be determined<\/li><li style = \"counter-reset:ol0;\">Discarded for analysis, blastn hits with low query coverage<\/li><li style = \"counter-reset:ol0;\">Not found by Blastn.'<\/li><\/ol><\/div><div class = \"text-block\">Of these, the DLIS category is the only one with a high confidence. All the other categories are reported, because their manual inspection could help improve the sensitivity of the method.<\/div><div class = \"text-block\"><span>The<\/span><span style = \"font-style:italic;font-weight:bold;\"> FinalResultsTable.csv<\/span><span> has the following fields:<\/span><\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Fields related to IS location<\/span><\/div><div class = \"text-block\">ISID: Name of the detected IS (Extracted from the headers of the ISDatabase.fasta file)<\/div><div class = \"text-block\">Isstart \/ Isend: genomic location of the IS in the query or reference genome.<\/div><div class = \"text-block\">Query.ID1: Accession number of the query sequence (Different scaffolds or replicons present a different ID) for the first\/left IS flank.<\/div><div class = \"text-block\">Start1 \/ End1: genomic location of the first\/left IS flanks<\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Fields related to flank locations<\/span><\/div><div class = \"text-block\">Query.ID2: Accession number of the query sequence (Different scaffolds or replicons present a different ID) for the second\/right flank (Only when the two IS flanks are mapped in two different scaffolds)<\/div><div class = \"text-block\">Start2 \/ End2: genomic location of the second\/right IS flanks<\/div><div class = \"text-block\">REF.ID1: Accession number of the reference sequence (Different scaffolds or replicons present a different ID) for the first\/left IS flank.<\/div><div class = \"text-block\">REF.Start1 \/ REF.End1: genomic location of the first\/left IS flanks<\/div><div class = \"text-block\">REF.ID2: Accession number of the query reference (Different scaffolds or replicons present a different ID) for the second\/right IS flank.<\/div><div class = \"text-block\">REF.Start2 \/ REF.End2: genomic location of the second\/right IS flanks<\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Fields related to DLIS description<\/span><\/div><div class = \"text-block\">Description: indicates whether the DLIS was detected in the query or reference genome<\/div><div class = \"text-block\">Observations: DLIS category [1 to 8, as previously described]<\/div><div class = \"text-block\">IS_Match_Type: complete IS hit \/ partial IS hit <\/div><div class = \"text-block\"><span style = \"font-style:italic;font-weight:bold;\">Fields related to flanks annotation<\/span><\/div><div class = \"text-block\">QUERY_Flank1.locus_tag: locus tag of the genes present in the left IS flank in the query genome.<\/div><div class = \"text-block\">QUERY_Flank1.Product: description of the protein product for the genes in the left IS flank in the query genome.<\/div><div class = \"text-block\">QUERY_Flank2.locus_tag: locus tag of the genes present in the right IS flank in the query genome.<\/div><div class = \"text-block\">QUERY_Flank2.Product: description of the protein product for the genes in the right IS flank in the query genome.<\/div><div class = \"text-block\">REF_Flank1.locus_tag:locus tag of the genes present in the left IS flank in the reference genome.<\/div><div class = \"text-block\">REF.Product_Flank1: description of the protein product for the genes in the left IS flank in the reference genome.<\/div><div class = \"text-block\">REF_Flank2.locus_tag: locus tag of the genes present in the right IS flank in the reference genome.<\/div><div class = \"text-block\">REF.Product_Flank2: description of the protein product for the genes in the right IS flank in the reference genome.<\/div><div class = \"text-block\">Scaffold_Size: size of the scaffold analysed.<\/div><div class = \"text-block\">Using the -p option, the information of the main table is used to generate a PDF document containing, for each of the ISs found, a figure of the genomic context of the query genome with the IS location and the corresponding QIFs  (Figure 1).<\/div><div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/c4ichyce.jpg\" \/><\/div><div class = \"text-block\">In addition, the context of the reference genome corresponding to the matched QIFs is shown. Several cases may arise: first, if the two QIFs were unequivocally matched to two positions in the reference genome separated by less than 10,000 basepairs a single reference genome context plot will be drawn (Figure 1.B); second, if the two QIFs were unequivocally matched to two positions in the reference genome separated by more than 10,000 basepairs or located on different scaffolds or replicons, two reference genome context plot will be drawn (Figure 1.C); third, if only one of the QIFs was unequivocally matched to a single position in the reference genome, a single reference genome context plot will be drawn (Figure 1.D); and last, if the QIFs were not matched to positions in the reference genome, only the query genome context will be drawn (Figure 1.E).<\/div><div class = \"text-block\">These plots can be used to easily verify that the predicted DLIS are correct, and to try to manually assign DLISs that the program could not resolve (See Commentary, Critical Parameters and troubleshooting).<\/div><\/div>"}},{"id":1054725,"guid":"6E1BF1D627CD4F318A60DB5E62051372","order_id":2,"type_id":1,"title":"description","source":{"description":"<div style = \"text-align :; float : ;\"><img style = \"\" src = \"https:\/\/s3.amazonaws.com\/protocols-files\/files\/c4ichyce.jpg\" \/><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#46cc8c","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134438,"guid":"E51D93D0785B11EBB8EEB922F54EE308","previous_id":1134437,"previous_guid":"F4B2CB40785A11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0B7816C069024A1EBFC7E117F74A36C6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Critical Parameters and troubleshooting."}},{"id":1054724,"guid":"6CA218D83D3E40EF9D090EE40B34D294","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">ISCompare works very good for the pairwise comparison of complete genomes of different strains from the same bacterial specie, achieving a high sensitivity and precision for the detection of DLISs. However, in the case of draft assemblies, the sensitivity could be significantly lower, in special for highly fragmented assemblies. In those cases a manual inspection of the graphic report is recommended, since it could improve the results. The results of a first ISCompare run could show many ISs under the \u2018verify manually\u2019 or \u2018discarded\u2019 categories, which are related to the presence of consecutive IS, repeated sequences or cases where there were no significant blast hits. If there were many consecutive ISs or repeated sequences an ISCompare run in the shift mode is recommended as a complementary analysis.  The presence of many ISs in the \u2018discarded\u2019 category in general means that the analysed genomes are too different.<\/div><div class = \"text-block\">Although few, false positive predictions could arise as a result of differences in the genomic context. On such cases, both QIFs could match correctly to positions in the reference genome that are close together and do not have ISs, but which presents differences in their distant genomic context.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#cf8f23","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":1134439,"guid":"EDC0BA80785B11EBB8EEB922F54EE308","previous_id":1134438,"previous_guid":"E51D93D0785B11EBB8EEB922F54EE308","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9856D634149A4D958768B9B53D6A1E1D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Advanced parameters"}},{"id":1054724,"guid":"3C1C9E1214524014AC4AEDBDF7C1B255","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Although ISCompare arguments were adjusted to obtain the best results, there are several options to fine tune the analysis. A description of all the settable options is displayed with the -h option and explained on the ISCompare github webpage.<\/div><div class = \"text-block\"><span style = \"font-weight:bold;font-style:italic;\">The most relevant options that can be fine tuned are:<\/span><\/div><div class = \"text-block\">-E  evalue cutoff for Blast searches<\/div><div class = \"text-block\">-s  the Query ISs flank length to extract (QIF length) in basepairs. By default is set to 500 basepairs, however in some cases increasing this value can achieve better results.<\/div><div class = \"text-block\">-s2  Reference genome Anchor Flank length (RAF length). By default this value is set to 500 basepairs. Bigger values could increment the number of false negatives. In general a value smaller or equal to the QIF length is recommended.<\/div><div class = \"text-block\">-S  Shift mode. Expands the IS blast hit coordinates in a defined number of nucleotides. This mode is recommended when the analysed genomes contain high density of insertion sequences, or to correctly identify DLISs which are adjacent to multicopy genes. The Shift value must be greater than the length of the repeated sequence.<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\">Insertion sequences (ISs) are small transposable elements composed only by a transposase and imperfect terminal inverted repeats, which have an important role in genome evolution and contribute to bacterial genome plasticity and adaptability. Bacterial strains from a same species usually present genome rearrangements and variation in the location of insertion sequences and other transposable elements, which might produce phenotypic variations, including antibiotic resistance and adaptation to vaccination strategies. We developed ISCompare to profile IS mobilization events in related bacterial strains. Here we present a comprehensive description on how to use ISCompare, and interpret the obtained results.<\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><\/div><\/div><div class = \"text-block\"><div class = \"justify\" style = \"text-align:left\"><span style = \"font-weight:bold;\">Basic protocol:<\/span><span> Automatic search of Differentially located Insertion Sequences (DLIS)<\/span><\/div><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Support protocol 1: <\/span><span>Search for differentially located ISs using local files<\/span><\/div><div class = \"text-block\"><span style = \"font-weight:bold;\">Support protocol 2:<\/span><span> Using the shift mode to identify differentially located Group II introns<\/span><\/div><\/div>","changed_on":1614365161}