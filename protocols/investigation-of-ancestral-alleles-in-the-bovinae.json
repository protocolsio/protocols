{"id":38945,"title":"Investigation of ancestral alleles in the Bovinae subfamily","title_html":"<p>Investigation of ancestral alleles in the Bovinae subfamily<\/p>","image":{"source":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/3bd6d20f83a601d936fd74bf00049ea0a2638bb54d5f6302ea47655b66db1d63\/cd5rberfx.png","placeholder":"https:\/\/s3.amazonaws.com\/protocols-files\/public\/3bd6d20f83a601d936fd74bf00049ea0a2638bb54d5f6302ea47655b66db1d63\/cd5rberfx.png"},"doi":"dx.doi.org\/10.17504\/protocols.io.bh99j996","doi_status":2,"uri":"investigation-of-ancestral-alleles-in-the-bovinae-bh99j996","type_id":1,"template_id":5,"published_on":1608021246,"parent_protocols":[],"parent_collections":[],"cited_protocols":[],"version_id":0,"version_data":{"id":"0","code":"bh99j996","parent_id":0,"parent_uri":null,"is_same_owner":false,"has_pending_merge_request":false,"has_approved_merge_request":false},"created_on":1594114443,"modified_on":null,"categories":null,"public":1,"is_unlisted":0,"creator":{"name":"Maulana Naji","affiliation":null,"affiliations":[],"username":"maulana-naji","note":null,"link":null,"image":{"source":"https:\/\/lh3.googleusercontent.com\/a-\/AOh14Gh3yihyo1P9Hj2tOGuaGsJmlNtI0up_lCdrKKw5TA=s96-c","placeholder":"https:\/\/lh3.googleusercontent.com\/a-\/AOh14Gh3yihyo1P9Hj2tOGuaGsJmlNtI0up_lCdrKKw5TA=s96-c"},"badges":[{"id":2,"image":{"source":"\/img\/badges\/bronze.svg","placeholder":"\/img\/badges\/bronze.svg"},"name":"Author"}],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"journal":null,"journal_name":null,"journal_link":null,"article_citation":null,"has_versions":0,"link":null,"total_collections":0,"number_of_steps":33,"authors":[{"name":"Maulana Naji","affiliation":"University of Natural Resources and Life Sciences Vienna, Austria","affiliations":[],"username":"maulana-naji","note":"Main contact","link":null,"image":{"source":"https:\/\/lh3.googleusercontent.com\/a-\/AOh14Gh3yihyo1P9Hj2tOGuaGsJmlNtI0up_lCdrKKw5TA=s96-c","placeholder":"https:\/\/lh3.googleusercontent.com\/a-\/AOh14Gh3yihyo1P9Hj2tOGuaGsJmlNtI0up_lCdrKKw5TA=s96-c"},"badges":[],"verified":1,"is_verified_user":true,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Yuri Utsunomiya","affiliation":"Sao Paulo State University, Brazil","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Johann S\u00f6lkner","affiliation":"University of Natural Resources and Life Sciences Vienna, Austria","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"Benjamin Rosen","affiliation":"Agricultural Research Service USDA, USA","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},{"name":"G\u00e1bor M\u00e9sz\u00e1ros","affiliation":"University of Natural Resources and Life Sciences Vienna, Austria","affiliations":[],"username":null,"note":"","link":null,"image":{"source":null,"placeholder":null},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false}],"versions":[],"groups":[],"is_owner":1,"has_subprotocols":0,"is_subprotocol":0,"is_bookmarked":0,"can_claim_authorship":0,"can_accept_authorship":0,"can_be_copied":1,"can_remove_fork":1,"fork_id":null,"url":"https:\/\/www.protocols.io\/view\/investigation-of-ancestral-alleles-in-the-bovinae-bh99j996","forks_count":{"private":0,"public":0},"access":{"can_view":1,"can_remove":0,"can_add":0,"can_edit":0,"can_publish":0,"can_get_doi":0,"can_share":1,"can_move":1,"can_move_outside":1,"can_transfer":1,"can_download":1,"is_locked":0},"guid":"F8FDDAC0C03411EA8FE555AC4A340D81","state_version_id":3971,"steps":[{"id":975199,"guid":"15D287E0C03511EA8FE555AC4A340D81","previous_id":null,"previous_guid":null,"modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"31D9821C52F2438BB0FEA4DD317342DC","order_id":1,"type_id":6,"title":"Section","source":{"title":"Reads alignment and variant calling on individuals separately"}},{"id":1054724,"guid":"EEF09013CAAF40AF9418A9D7810EA5FC","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Download Read Sequences in format of SRA FASTQ<\/div><\/div>"}},{"id":1054725,"guid":"1F9A0420C05211EA8BD9D95DA483575A","order_id":2,"type_id":15,"title":"command","source":{"id":7568,"name":"wget ftp:\/\/ftp.sra.ebi.ac.uk\/vol1\/fastq\/SRR201\/006\/SRR2016766\/SRR2016766_1.fastq.gz \nwget ftp:\/\/ftp.sra.ebi.ac.uk\/vol1\/fastq\/SRR201\/006\/SRR2016766\/SRR2016766_2.fastq.gz","command_name":"Linux - wget","command":"This script using wget for fetching sequence reads from NCBI.\nFurther details on downloading dataset refers to https:\/\/www.ncbi.nlm.nih.gov\/home\/tools\/\nPlease refer to table 2 and additional file for list of SRA reads used in our study.\nExample for retrieve SRR2016766, paste the command below:","os_name":"","os_version":""}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":975202,"guid":"32A60710C03611EA8FE555AC4A340D81","previous_id":975199,"previous_guid":"15D287E0C03511EA8FE555AC4A340D81","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"50459F3645464F30908DD81DE49B0634","order_id":1,"type_id":6,"title":"Section","source":{"title":"Reads alignment and variant calling on individuals separately"}},{"id":1054724,"guid":"EA00419AC076477098F9DD3B4D888AE9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Mapping with BWA-Mem<\/div><\/div>"}},{"id":1054725,"guid":"9B0E36C0C05311EA8BD9D95DA483575A","order_id":2,"type_id":15,"title":"command","source":{"id":7569,"name":"#!\/bin\/bash\n#\n## usage:  sbatch  .\/BWA_Gen.sbmt.scrpt\n#\n#SBATCH -J BWA$1\n#SBATCH -N 1 \n#SBATCH --partition mem_0064\n#SBATCH --qos normal_0064\n#SBATCH --ntasks-per-node 16\n\nmodule purge\nmodule load gcc\/5.3 R\/3.4.0 java\/1.8.0_121 python\/3.6\n\n~masagis\/bwa-0.7.17\/bwa mem -t 8 ~masagis\/REF\/ARS-UCD1.2_Btau5.0.1Y.fa ~masagis\/FASTQ\/SRR$1_1.fastq.gz ~masagis\/FASTQ\/SRR$1_2.fastq.gz | ~masagis\/samtools-1.10\/samtools sort -@8 -o ~masagis\/SORT\/SRR$1.bam\nwait\n~masagis\/gatk-4.1.0.0\/gatk MarkDuplicates --INPUT ~masagis\/SORT\/SRR$1.bam --METRICS_FILE ~masagis\/MARKDUP\/MF_SRR$1 --OUTPUT ~masagis\/MARKDUP\/MD_SRR$1.bam --CREATE_INDEX true\nwait\n~masagis\/gatk-4.1.0.0\/gatk AddOrReplaceReadGroups --INPUT ~masagis\/MARKDUP\/MD_SRR$1.bam --OUTPUT ~masagis\/MARKDUP\/RG_MD_SRR$1.bam  --RGID $1 -LB lib$1 -PL illumina -PU unit$1 -SM SRR$1\nwait\n~masagis\/gatk-4.1.0.0\/gatk BaseRecalibrator --reference ~masagis\/ResourceBundle\/Galaxy47-[ARS-UCD1.2_Btau5.0.1Y.fa.gz].fasta --input ~masagis\/MARKDUP\/RG_MD_SRR$1.bam --known-sites ~masagis\/ResourceBundle\/ARS1.2PlusY_BQSR.vcf --output ~masagis\/BQSR\/BQSR_$1.table  \nwait\n~masagis\/gatk-4.1.0.0\/gatk ApplyBQSR -I ~masagis\/MARKDUP\/RG_MD_SRR$1.bam -bqsr ~masagis\/BQSR\/BQSR_$1.table -O ~masagis\/BQSR\/$1.bam","command_name":"Linux - HPC_Slurm","command":"We do subsequent process of mapping paired reads by using BWA Mem http:\/\/bio-bwa.sourceforge.net\/bwa.shtml and piped it to samtools http:\/\/www.htslib.org\/doc\/samtools.html for sorting by chromosome and then pipe it for MarkDuplicates, AddOrReplaceGroups, BaseRecalibrator and ApplyBQSR using GATK https:\/\/gatk.broadinstitute.org\/hc\/en-us. \nAbove script is saved as single file named \"script.sh\".\nThe script is then submitted as slurm in HPC for each individual dataset using command \"sbatch .\/script.sh 2016766\" for respective SRR2016766 individuals","os_name":"","os_version":""}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":975311,"guid":"C7B88A40C05311EA8BD9D95DA483575A","previous_id":975202,"previous_guid":"32A60710C03611EA8FE555AC4A340D81","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"446DA4360AE148BB9E774F78FBF83D3A","order_id":1,"type_id":6,"title":"Section","source":{"title":"Reads alignment and variant calling on individuals separately"}},{"id":1054724,"guid":"8927322092F44F88B1EE0B81D6876B5F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Individual Haplotype Calling<\/div><\/div>"}},{"id":1054725,"guid":"78774650C05411EA8BD9D95DA483575A","order_id":2,"type_id":15,"title":"command","source":{"id":7570,"name":"#!\/bin\/bash\n#\n## usage:  sbatch  .\/HapCalGen.scrpt\n#\n#SBATCH -J Brahman$1\n#SBATCH -N 1 \n#SBATCH --partition mem_0064\n#SBATCH --qos normal_0064\n#SBATCH --ntasks-per-node 16\n\nmodule purge\nmodule load gcc\/5.3 R\/3.4.0 java\/1.8.0_121 python\/3.6\n\n~masagis\/gatk-4.1.0.0\/gatk HaplotypeCaller -R ~masagis\/ResourceBundle\/Galaxy47-[ARS-UCD1.2_Btau5.0.1Y.fa.gz].fasta -I ~masagis\/BQSR\/$1.bam -O ~masagis\/BQSR\/$1.g.vcf.gz -ERC GVCF --native-pair-hmm-threads 28","command_name":"Linux - GATK_HaplotypeCaller","command":"Calling variants for each individual BAM file after subsequent previous steps. The script is submitted as slurm in HPC using command \"sbatch .\/HapCal.sh 2016766\" outputting file in format of 2016766.g.vcf.gz","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":975321,"guid":"900A9560C05411EA8BD9D95DA483575A","previous_id":975311,"previous_guid":"C7B88A40C05311EA8BD9D95DA483575A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"F439E9757BF6407A964D45E46493D834","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"BA99FEDCBF584464AF7917C1E241C1EF","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Combine GVCFs<\/div><\/div>"}},{"id":1054725,"guid":"7A5C8BA0C05511EA8BD9D95DA483575A","order_id":2,"type_id":15,"title":"command","source":{"id":7571,"name":".\/gatk CombineGVCFs -R ~\/data\/Cattle\/ResourceBundle\/Galaxy47-[ARS-UCD1.2_Btau5.0.1Y.fa.gz].fasta --variant ~\/data\/Cattle\/BQSR\/2016766.g.vcf.gz --variant .......  \n-O ~\/data\/Cattle\/Large\/cohort4.g.vcf.gz","command_name":"Linux - GATK_CombineGVCFs","command":"We combine GVCFs from each individual .g.vcf.gz with output cohort4.g.vcf.gz.\nIn the command above, each individual with .g.vcf.gz file name is specified after \"--variant \" represented by empty dots.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":975331,"guid":"7E3C5DE0C05511EA8BD9D95DA483575A","previous_id":975321,"previous_guid":"900A9560C05411EA8BD9D95DA483575A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"9E963C2419F944698ADDC3A41B12EB2B","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"5A490F5F1D5D46238538B4C019E7BDD8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Genotype GVCFs<\/div><\/div>"}},{"id":1054725,"guid":"1313B6F0C0EE11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7572,"name":".\/gatk GenotypeGVCFs -R ~\/data\/Cattle\/ResourceBundle\/Galaxy47-[ARS-UCD1.2_Btau5.0.1Y.fa.gz].fasta -V ~\/data\/Cattle\/Large\/cohort4.g.vcf.gz   -O ~\/data\/Cattle\/Large\/cohort4.vcf.gz","command_name":"Linux - GATK_GenotypeGVCFs","command":"Calling variants in single file for all individuals","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976084,"guid":"2CCFD970C0EE11EA8C48CB07E85362CD","previous_id":975331,"previous_guid":"7E3C5DE0C05511EA8BD9D95DA483575A","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"500E08C53FCD484E9DFC1D398C245075","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"2EAD1343235B44F78106DDBB9D69A2F9","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Split VCF<\/div><\/div>"}},{"id":1054725,"guid":"4EAB73B0C0EE11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7573,"name":".\/gatk SplitVcfs -I ~\/data\/Cattle\/Large\/cohort4.vcf.gz --SNP_OUTPUT ~\/data\/Cattle\/Large\/SNP_cohort4.vcf --INDEL_OUTPUT ~\/data\/Cattle\/Large\/Indel_cohort4.vcf.gz --STRICT false","command_name":"Linux - GATK_SplitVcfs","command":"Split VCF file to indel vcf and SNP vcf","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976085,"guid":"503A9F30C0EE11EA8C48CB07E85362CD","previous_id":976084,"previous_guid":"2CCFD970C0EE11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0ABCBCE8FB854E60898907C62AE2F508","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"872F91F03E7E444F8D574596C4038DC1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Getting name of individuals in vcf<\/div><\/div>"}},{"id":1054725,"guid":"70196290C0EF11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7574,"name":"bcftools query -l  ~\/data\/Cattle\/Large\/SNP_cohort4.vcf > ~\/data\/Cattle\/Large\/list_samples.txt","command_name":"Linux - bcftools","command":"Above script generates list of individuals in SNP_cohort4.vcf and stored it in list_samples.txt\nWe then manually changed to initial name as intended using the correct order and save it into list_samples_new.txt  \nFor example: \n$ cat list_samples.txt\nSRR2016766\nSRR2016789\n$ cat list_samples_new.txt\nHols1\nHols2\nBcftools is provided in http:\/\/samtools.github.io\/bcftools\/bcftools.html","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976090,"guid":"741436E0C0EF11EA8C48CB07E85362CD","previous_id":976085,"previous_guid":"503A9F30C0EE11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B47D3014EEEF44518DF7ACFAB822F51D","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"2763D602E4E841BBB331CB51091447B1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reheader VCF files with new individuals name<\/div><\/div>"}},{"id":1054725,"guid":"8EE8CE40C0EF11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7575,"name":"bcftools reheader -s ~\/data\/Cattle\/Large\/list_samples_new.txt ~\/data\/Cattle\/Large\/SNP_cohort4.vcf -o ~\/data\/Cattle\/Large2\/reheader_SNP_cohort4.vcf","command_name":"Linux - bcftools","command":"Above script will rename each individuals in input file SNP_cohort4.vcf. \nlist_samples_new.txt is simple txt file containing intended new name for each individual corresponding to previously generated list_samples.txt in step 7.\nOutput file is reheader_SNP_cohort4.vcf","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976091,"guid":"BE70C640C0EF11EA8C48CB07E85362CD","previous_id":976103,"previous_guid":"106323A0C0F311EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"5DC74FA27EC7472CA80ECC7179C10176","order_id":1,"type_id":6,"title":"Section","source":{"title":"Principal Component Analysis"}},{"id":1054724,"guid":"1A8B916DEBD24968808035EBE3610589","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Creating PCA Plot using PLINK <\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976093,"guid":"D4206130C0EF11EA8C48CB07E85362CD","previous_id":976091,"previous_guid":"BE70C640C0EF11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"38A9F6AC88664099BC2F53AFFC743E27","order_id":1,"type_id":6,"title":"Section","source":{"title":"Principal Component Analysis"}},{"id":1054724,"guid":"FF73B213536F494CBF5935E6F566DE10","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Convert VCF file into plink format using VCFTools <\/div><\/div>"}},{"id":1054725,"guid":"0504DBF0C0F011EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7576,"name":"vcftools  --vcf ~\/data\/Cattle\/Large2\/filteredSNP.vcf --keep ~\/data\/Cattle\/Large\/list_samples_new.txt --plink --out ~\/data\/Cattle\/Large2\/Plink_cohort5","command_name":"Linux - vcftools","command":"Script above is converting filteredSNP.vcf file into Plink_cohort5.ped format by keeping all individuals listed in list_samples_new.txt","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976095,"guid":"1D0FCC00C0F011EA8C48CB07E85362CD","previous_id":976093,"previous_guid":"D4206130C0EF11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"3B2B87848D624C8E8E3CBA37BDB97823","order_id":1,"type_id":6,"title":"Section","source":{"title":"Principal Component Analysis"}},{"id":1054724,"guid":"F09F2CBD56C6403B8E6E1361C5CB6445","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Pruning Plink file and create mds plot with four components<\/div><\/div>"}},{"id":1054725,"guid":"72E22A10C0F011EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7577,"name":"plink --file Plink_Cohort5 --chr 1:29 --make-bed --out B_cohort5 \n\nplink --bfile B_cohort5 --indep-pairwise 50 5 0.7 \n\nplink --bfile B_cohort5 --extract plink.prune.in --make-bed --out pruneddata5\n\nplink --bfile pruneddata5 --genome --out Cohort5\n\nplink --bfile pruneddata5 --read-genome Cohort5.genome --cluster --mds-plot 4","command_name":"Linux - Plink","command":"We use plink command http:\/\/zzz.bwh.harvard.edu\/plink\/ to prune .ped file generated from step 10.1 and to create .mds file with four components. \nEach line in the above script must be executed as a single command. Next line, should be executed after the current command is finished.\nThese commands are executed in linux terminal","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976096,"guid":"A1154070C0F011EA8C48CB07E85362CD","previous_id":976095,"previous_guid":"1D0FCC00C0F011EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"30C8DC6FB6184AA9B15F02DA8E7527C4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Principal Component Analysis"}},{"id":1054724,"guid":"BA73A9416E5A4A3E95EF2E513416C92B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Plotting the output of plink mds us<\/div><\/div>"}},{"id":1054725,"guid":"F0F0AC10C0F011EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7578,"name":"setwd(\"D:\/maulana\/Cattle\/Large2\")\nlibrary(ggplot2)\n\ndf<-read.table(\"plink.mds\", header=TRUE) #data with 4 principal components\nhead(df)\n\ndf$FID <- as.character(df$FID)\ndf$FID[c(36,37,54:58,72)] <- (\"Zebu\")\ndf$FID[c(17:28,67)] <- (\"Yak\")\ndf$FID[c(2,38:40)] <- (\"Gayal\")\ndf$FID[c(41,42,69:71)] <- (\"Eur.Bison\")\ndf$FID[c(43:47)] <- (\"Banteng\")\ndf$FID[c(48:51)] <- (\"Gaur\")\ndf$FID[c(31,32,52,53)] <- (\"Ame.Bison\")\ndf$FID[c(29,30)] <- (\"Aurochs\")\ndf$FID[c(1,4:5,10:15,33:35,7:9,16,6,62,63:66,68)] <- (\"Taurus\")\ndf <- df[-c(3,60,61,59),] \n\ncolnames(df)[1] <- \"Species\"\ndf$Species <- as.factor(df$Species)\n\nggplot(df, aes(x = C1, y = C2)) + geom_point(aes(colour = Species, shape= Species), size=2) + \n   labs(title = \"Principle Component Analysis\", x = \"Component 1\", y= \"Component 2\")","command_name":"R","command":"This script utilizing plink.mds file, output of plink in step 10.2. \nAfter reading the data, we add a new column of group name in df$FID manually according to individuals set. For example, we add label \"taurus\" for individuals of holstein, jersey, angus and simmental.\nThen, we change the column name to 'species' and plot using ggplot.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#84CE84","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976097,"guid":"27C0F5B0C0F111EA8C48CB07E85362CD","previous_id":976096,"previous_guid":"A1154070C0F011EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6F57764F3C0748E792C03578DDA43310","order_id":1,"type_id":6,"title":"Section","source":{"title":"Phylogenetic analysis"}},{"id":1054724,"guid":"154B13B101EC483C954FD0FF7D52C345","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Creating Phylogenetic Trees<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976098,"guid":"59E6A300C0F111EA8C48CB07E85362CD","previous_id":976097,"previous_guid":"27C0F5B0C0F111EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"380E93DF6E3747138457E58EA2AEC5BA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Phylogenetic analysis"}},{"id":1054724,"guid":"4E20C42382BB4D5A98927EE858E8A7B7","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Splitting VCF by chromosome<\/div><\/div>"}},{"id":1054725,"guid":"AB8CBC80C0F111EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7579,"name":"for i in {1..29};\ndo vcftools  --vcf ~\/data\/Cattle\/Large2\/filteredSNP.vcf --keep ~\/data\/Cattle\/Large\/list_samples_new.txt --chr $i  --recode --recode-INFO-all --out ~\/data\/Cattle\/Large2\/VCF5_$i;\ndone","command_name":"Linux - vcftools","command":"We utilized vcftools to split filteredSNP.vcf by chromosome one to twenty-nine using for loop function.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976099,"guid":"AFCE0FB0C0F111EA8C48CB07E85362CD","previous_id":976098,"previous_guid":"59E6A300C0F111EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"2D20CA494DF44ACA92FBBFB470E7A4F6","order_id":1,"type_id":6,"title":"Section","source":{"title":"Phylogenetic analysis"}},{"id":1054724,"guid":"B0E0C831F12D47AFB1596E5906CCEEB0","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Reducing redundant variants by LD <\/div><\/div>"}},{"id":1054725,"guid":"0F54DD60C0F211EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7580,"name":"for i in {1..29};\ndo \/home\/masagis\/data\/snphylo\/SNPhylo\/snphylo.sh -v VCF5_$i.recode.vcf -p 10 -c 2 -P chr$i -a 30 -l 0.9 -m 0.1 -M 0.1 ;\ndone","command_name":"Linux - SNPhylo","command":"We run SNPhylo from http:\/\/chibba.pgml.uga.edu\/snphylo\/ for reducing number of variants based on its LD using parameters specified above. \nWe do for loop for each chromosome one to twenty-nine.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976100,"guid":"1298BDC0C0F211EA8C48CB07E85362CD","previous_id":976099,"previous_guid":"AFCE0FB0C0F111EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"AF211D74D9684DD9B5006BCDAE5CD031","order_id":1,"type_id":6,"title":"Section","source":{"title":"Phylogenetic analysis"}},{"id":1054724,"guid":"127FC3005F10434DA4B469AA9E5C7CE8","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Visualize the tree per chromosome wise<\/div><\/div>"}},{"id":1054725,"guid":"B79BA76B70394DBFB70E1D97C7A8B6C5","order_id":2,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\"><span>Manually visualize the trees using MEGAX <\/span><a href=\"https:\/\/www.megasoftware.net\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/www.megasoftware.net\/<\/span><\/a><span> using SNPhylo outputs with intial tree built using maximum parsimony method and bootstrap 200 using maximum likelihood of Jukes Cantor Model<\/span><\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#FFED92","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976101,"guid":"D5DD9A30C0F211EA8C48CB07E85362CD","previous_id":976100,"previous_guid":"1298BDC0C0F211EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"733251330B7F465C99E61FB984E92BF9","order_id":1,"type_id":6,"title":"Section","source":{"title":"Inferring Ancestral Alleles"}},{"id":1054724,"guid":"5D445840B0274BD2A5F8F0D8FED8AC77","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Defining ancestral alleles<\/div><\/div>"}},{"id":1054725,"guid":"F225A87E614C44679E4E64007B2E6096","order_id":2,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\"><span>We defined ancestral alleles of cattle as alleles fixed in at least two outgroup of bison, yak and gayal-gaur-banteng. In the steps of 12, 13, and 14, R-scripts used several in-house functions written in <\/span><a href=\"https:\/\/github.com\/mas-agis\/ances-al\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/github.com\/mas-agis\/ances-al<\/span><\/a><span> . Simply copy and run the functions in the R-environment before running the intended script, we will put description on which function to be loaded on the description.<\/span><\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976102,"guid":"FAFA55B0C0F211EA8C48CB07E85362CD","previous_id":976101,"previous_guid":"D5DD9A30C0F211EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"17164B6849BA4FF2A4A94CA440D9C252","order_id":1,"type_id":6,"title":"Section","source":{"title":"Inferring Ancestral Alleles"}},{"id":1054724,"guid":"9E872AFFFD6847ABA5B2ED752FB0267A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Getting allele frequency for chromosome 1 to 29<\/div><\/div>"}},{"id":1054725,"guid":"09AF37E0C0F511EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7582,"name":"for i in {1..29};\ndo vcftools --vcf ~\/data\/Cattle\/Large2\/filteredSNP.vcf --chr $i --freq --keep ~\/data\/Cattle\/Large\/Yak_List.txt --out ~\/data\/Cattle\/Large3\/yak_Chr_$i;\ndone","command_name":"Linux - vcftools","command":"Command above is for outputting allele frequency of yak individuals. \nFor bison and gayal-gaur-banteng, one just need to change the list of individual belong to particular group in '--keep' parameter and output name in '--out' parameter for each respective group. \nAdditionally, \"all\" group is combination of all individuals within these three groups.","os_name":"","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976103,"guid":"106323A0C0F311EA8C48CB07E85362CD","previous_id":976090,"previous_guid":"741436E0C0EF11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"0E493A31F9F041DD9DFA441C50A77FEE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Joint analysis of individuals"}},{"id":1054724,"guid":"11F0B68F77A94B4BAE13F81C15BE8A78","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Variant Filtration<\/div><\/div>"}},{"id":1054725,"guid":"266E9A30C0F311EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7581,"name":".\/gatk VariantFiltration -R ~\/data\/Cattle\/ResourceBundle\/Galaxy47-[ARS-UCD1.2_Btau5.0.1Y.fa.gz].fasta -V ~\/data\/Cattle\/Large2\/reheader_SNP_cohort4.vcf -O ~\/data\/Cattle\/Large2\/filteredSNP.vcf -filter \"MQ < 40.0\" --filter-name \"MQfil\" -filter \"QD < 3.0\" --filter-name \"QDfil\" -filter \"QUAL < 30.0\" --filter-name \"QUAfil\"","command_name":"Linux - GATK_VariantFiltration","command":"Filter SNP file with intended parameters. Here, we applied the default as found in GATK webpage.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#94EBFF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976201,"guid":"91A66370C0F611EA8C48CB07E85362CD","previous_id":976102,"previous_guid":"FAFA55B0C0F211EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"69F458CD4FA24826BC23C649BBBDFA46","order_id":1,"type_id":6,"title":"Section","source":{"title":"Inferring Ancestral Alleles"}},{"id":1054724,"guid":"8B1FC591DCBA43EABBFD43475B95151A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Filtering sites with allele frequency of 1 for each group and then combined between bison, yak and gayal-gaur-banteng.<\/div><\/div>"}},{"id":1054725,"guid":"221DB9D0C0F711EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7583,"name":"setwd(\"D:\/maulana\/Cattle\/Large3\/\")\n#getting sites with frequency 1\nbis <- ancealls(\"Bison\",n=9,cr=1:29)\nyk <- ancealls(\"yak\",n=13,cr=1:29)\nggb <- ancealls(\"gagaba\",n=13,cr=1:29)\nal <- ancealls(\"all\",n=35,cr=1:29)\nbison <- bis$Ances_Allele\nyak <- yk$Ances_Allele\ngagaba <- ggb$Ances_Allele\nAll <- al$Ances_Allele\n\n#label fixation in new column\nBison$Fixed_In <- \"Bison\"\nYak$Fixed_In <- \"Yak\"\nGagaba$Fixed_In <- \"Gagaba\"\nAll$Fixed_In <- \"Bison,Gagaba,Yak\"\n\n#Joining steps\nYagaba <- inner_join(Yak,Gagaba, by=c(\"Chr\",\"Pos\",\"AA\"))\nBigaba <- inner_join(Bison,Gagaba, by=c(\"Chr\",\"Pos\",\"AA\"))\nBiyak <- inner_join(Bison,Yak, by=c(\"Chr\",\"Pos\",\"AA\"))\nAlles <- rbind(Yagaba,Bigaba)\nAlles <- rbind(Alles,Biyak)\n\nAllesa <- Alles\nAllesa$Alleles_n <- Allesa$Alleles_n.x\nAllesa$Fixed_In <- paste0(Allesa$Fixed_In.x,\",\",Allesa$Fixed_In.y)\nAllesa$Freq <- Allesa$Freq.x\nAllesa <- Allesa[c(1,2,10,4,12,11)]\nAllesa <- arrange(Allesa)\nAll$Pos <- as.factor(All$Pos)\nfinal <- union(All,Allesa)\nfinal <- arrange(final, Chr, Pos)\nFinalis <- final\nFinalis$sort <- paste0(Finalis$Chr,\"+\",Finalis$Pos)\nFinalis <- Finalis[!duplicated(Finalis$sort),]\nFinalis$Pos <- as.integer(Finalis$Pos)\nFinalis <- arrange(Finalis, Chr, Pos)\nFinalis$Group <- as.factor(Finalis$Fixed_In)\n\n#Writing output files\nsetwd(\"D:\/maulana\/Cattle\/Large3\/\")\nwrite.table(Finalis[1:6],\"Additional file 2.txt\",quote = F)","command_name":"R","command":"Load R function of \"ancealls\" from https:\/\/github.com\/mas-agis\/ances-al . Then run the above script. \nThis ancealls function will calling putative ancestral alleles from frequency files generated in step 12.1 by its group name (such as \"Bison\", \"yak\", etc.) independently, add new label of defined group, join the defined ancestral allele from each two group combination as stated in our paper, removing duplicate positions and arrange columns order. \nFinal list of cattle ancestral allele is saved as \"Additional file 2.txt\"","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA9F6C","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976218,"guid":"86957ED0C0FB11EA8C48CB07E85362CD","previous_id":976201,"previous_guid":"91A66370C0F611EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"1E08D4457539457B8745F599290032F4","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"95A1D96311554CC0A934B94C2D2D69B4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Comparisons ancestral allele in subset of taurus and indicus group<\/div><\/div>"}},{"id":1054725,"guid":"6CB689C752424A55A27450266AFA4E4B","order_id":2,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\">We compared the frequency file of cattle to the ancestral allele file named as \"Additional file 2.txt\" generated in step 12.2. <\/div><div class = \"text-block\">Example below is only demonstration script for taurine cattle comprising of 23 individuals. <\/div><div class = \"text-block\">For zebu cattle, should be done in similar manner with changing respective parameters.<\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976219,"guid":"C5BA32E0C0FB11EA8C48CB07E85362CD","previous_id":976218,"previous_guid":"86957ED0C0FB11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"907CF85E6B53468BA173EB8CB9BA5A67","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"025BD0EF3C6D480DB7690AF39E858A8A","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Getting alele frequency for taurine cattle<\/div><\/div>"}},{"id":1054725,"guid":"AC5EAA20C0FF11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7584,"name":"for i in {1..29};\ndo vcftools --vcf ~\/data\/Cattle\/Large2\/filteredSNP.vcf --chr $i --freq --keep ~\/data\/Cattle\/Large\/Taurus_List.txt --out ~\/data\/Cattle\/Large3\/taurus_Chr_$i;\ndone","command_name":"Linux - vcftools","command":"Taurus_List.txt is list of individual names of the 23 taurine cattle. \nThis script is run in the linux terminal.","os_name":"","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976235,"guid":"AEA0D1F0C0FF11EA8C48CB07E85362CD","previous_id":976219,"previous_guid":"C5BA32E0C0FB11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"662B1D56717A44E9AFF39261D69F6237","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"C97CFF048CFE46B19F480B33CC40902F","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Persisting ancestral allele in taurine<\/div><\/div>"}},{"id":1054725,"guid":"FEB85C30C0FF11EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7585,"name":"setwd(\"D:\/maulana\/Cattle\/Large3\/\")\nancestor<- read.table(\"Additional file 2.txt\")\n#calling persisting ancestral allele\ntaurus <- persist.ancesA(ancestor, gr=\"taurus\",n=23,cr=1:29)\n\n#Writing persisting ancestral alleles\nwrite.table(taurus$AACounts, \"Taurus_AACounts_3Groups.txt\", col.names = T, row.names = F, quote = F)\nwrite.table(taurus$treshold, \"TaurusTreshold_Null_Changes_3Groups.txt\", col.names = T, row.names = F, quote = F)","command_name":"R","command":"Ancestor is file of cattle ancestral alleles loaded from \"additional file 2.txt\" defined in previous step 12.2.\nWe use \"persist.ancesA\" function to count sum of ancestral alleles from frequency file of taurus generated in step 13.1 within fixed size of scanning window. Here, we use default parameter of persist.ancesA.\nResults is written in \"taurus\" list.\nWriting results to local directory is optional.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976236,"guid":"DAABBBB0C10011EA8C48CB07E85362CD","previous_id":976240,"previous_guid":"8BECBFC0C10411EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"138C78F26F15421BA22EC27CB7FBDA9C","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"FDBB0A7D0DF148C78B7769592C060EC1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Preparing for annovar input<\/div><\/div>"}},{"id":1054725,"guid":"DC72FC40C10211EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7586,"name":"#Using AAcounts and threshold dataset of ancestral allele from previous step\ntaurine <- annv.ances(taurus$AACounts, taurus$treshold)\n#writing for annovar input\n#High AA regions\nwrite.table(taurine$Above, \"Taurus_High_Region.txt\", col.names = F, row.names = F, quote = F) \n#Regions without AA\nwrite.table(taurine$Zero, \"Taurus_Null_Region.txt\", col.names = F, row.names = F, quote = F)\n#Ratio of regions without AA to all scanning windows\nwrite.table(taurine$Ratio, \"Taurus_ratio.txt\", col.names = T, row.names = F, quote = F)","command_name":"R","command":"Using \"annv.ances\" function, we separate scanning windows from outputs of function in step 13.2 based on its ancestral alleles count. \nThis step will produces three dataframes, i.e. Above, Zero, and Ratio. \nDataframe Above and Zero are complied as input for annovar gene annotation, for regions of interest due to high or without ancestral allele counts. While, Ratio dataframe is ratio of windows without ancestral alleles to total scanning windows per chromosome.\nThen, we write each dataframe in local directory.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976238,"guid":"639EDE00C10311EA8C48CB07E85362CD","previous_id":976244,"previous_guid":"EABB6100C10411EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"6C362E28419E4F99A9C43E73E7C37606","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"935F4C7A9E8A45D6B2BAD6E4B5404D47","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Checking whether regions without AA due to non-existing defined AA or reckoned mutation<\/div><\/div>"}},{"id":1054725,"guid":"68CDC580C10311EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7587,"name":"CheckTaurusnull <- CheckNullRegion(ancestor,taurine$Zero,cr=1:29)\nwrite.table(CheckTaurusnull, \"CheckTaurusnull.txt\", col.names = T, row.names = F, quote = F)","command_name":"R","command":"In this step we use \"CheckNullRegion\" function. It is checking whether scanning windows without ancestral allele are due to change of ancestral allele or there were no ancestral alleles defined within the scanning windows.\nThe fifth column generated from this function called \"Actual_AA_Sites\". It contains actual number of sites with defined ancestral allele. Supposed it contains any number than zero, than non-existing ancestral allele in scanning window is due to mutation.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976240,"guid":"8BECBFC0C10411EA8C48CB07E85362CD","previous_id":976235,"previous_guid":"AEA0D1F0C0FF11EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"49CED4F21B6E40C09D616C6E377636CE","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"3E03962616864437B918392246EFEA08","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Creating manhattan plot based on ancestral allele<\/div><\/div>"}},{"id":1054725,"guid":"A5AD9D30C10411EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7588,"name":"for (i in 1:29) {\n  plt.ances(taurus$AACounts,taurus$treshold,cr=i)\n  ggsave(paste0(\"Manhattan_\",i,\"taurus.png\"), width = 7.57, height = 3.99)\n}","command_name":"R","command":"We do loop over chromosome 1 to 29 to generate manhattan plots such in our paper. \nWe use \"plt.ances\" function with two dataframe from step 13.2 as input files, and then run with default parameters. \nImages will be saved in the current directory named as specified in ggsave part.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976244,"guid":"EABB6100C10411EA8C48CB07E85362CD","previous_id":976236,"previous_guid":"DAABBBB0C10011EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DA9E78D8027F41379AF775B8E40FC1B0","order_id":1,"type_id":6,"title":"Section","source":{"title":"Comparisons to cattle group"}},{"id":1054724,"guid":"58CB080178CA4EF6B8A155669D407079","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Getting average of ancestral allele<\/div><\/div>"}},{"id":1054725,"guid":"0D4C6890C10511EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7589,"name":"AverageTaurus <- AverageAA(taurus$AACounts,taurus$treshold)\nwrite.table(AverageTaurus, \"TaurusAverageAAcount.txt\", col.names = T, row.names = F, quote = F)","command_name":"R","command":"We use \"averageAA\" function in this step. As its name, we want to get mean of ancestral allele counts per chromosome. \nThen, we write it to the local directory.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#E57785","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976247,"guid":"A6437F20C10511EA8C48CB07E85362CD","previous_id":976238,"previous_guid":"639EDE00C10311EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B1647B82CCDE48B9BAFE879EE57C04EA","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene annotation using annovar"}},{"id":1054724,"guid":"64411B513A0A42BA95BFE3297312EB4B","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Gene annotation using annovar <\/div><div class = \"text-block\"><a href=\"https:\/\/doc-openbio.readthedocs.io\/projects\/annovar\/en\/latest\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/doc-openbio.readthedocs.io\/projects\/annovar\/en\/latest\/<\/span><\/a><\/div><div class = \"text-block\"> with input from previous step 13.4<\/div><\/div>"}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976248,"guid":"C9088F00C10511EA8C48CB07E85362CD","previous_id":976247,"previous_guid":"A6437F20C10511EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"C2639C39537F4D6DA04BFFAE6E7943DF","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene annotation using annovar"}},{"id":1054724,"guid":"9BAE626AC88B4ECD8460B5E99959DEB2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Moving input files to annovar directory<\/div><\/div>"}},{"id":1054725,"guid":"55C72320C10611EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7590,"name":"mv ~data\/Cattle\/Large3\/*Region.txt ~\/data\/annovar\/Region\/","command_name":"Linux","command":"Moving files generated in step 13.4 containing regions information with high and no ancestral alleles for annovar analysis.","os_name":"","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976251,"guid":"5AC42530C10611EA8C48CB07E85362CD","previous_id":976248,"previous_guid":"C9088F00C10511EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"B3B11B8173144EFB82EB40F423D92190","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene annotation using annovar"}},{"id":1054724,"guid":"F6ECDEF5B6AB4116A662E61B294A904E","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Gene annotation with respective regions with high and without ancestral allele<\/div><\/div>"}},{"id":1054725,"guid":"A420F7D0C10611EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7591,"name":"#Taurus high AA\nannotate_variation.pl -out Sites19 -build bosTau9 Region\/Taurus_High_Region.txt cattledb\/ \n#Taurus without AA\nannotate_variation.pl -out Sites21 -build bosTau9 Region\/Taurus_Null_Region.txt cattledb\/","command_name":"Linux - annovar","command":"This script respectively does gene annotation for regions with high and null counts of ancestral alleles","os_name":"","os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976252,"guid":"CB009900C10611EA8C48CB07E85362CD","previous_id":976251,"previous_guid":"5AC42530C10611EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"A66F425580384518BBED620AAE470CE8","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene annotation using annovar"}},{"id":1054724,"guid":"E67C73DBAB18425DB1C2B22C3244D8E2","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Listing genes without indel and duplication<\/div><\/div>"}},{"id":1054725,"guid":"F6C128C0C10611EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7592,"name":"#genes from regions high ancestral allele\ngrep -v 'intergenic' Sites19.variant_function | grep -v 'upstream' | grep -v 'downstream' | cut -f2 | sed 's\/\\,\/\\n\/g' | grep -v 'ins' | grep -v 'del' > Sites19Gene.txt\n\n#genes from regions without ancestral allele\ngrep -v 'intergenic' Sites21.variant_function | grep -v 'upstream' | grep -v 'downstream' | cut -f2 | sed 's\/\\,\/\\n\/g' | grep -v 'ins' | grep -v 'del' > Sites21Gene.txt","command_name":"Linux","command":"In this script respectively we output only list of genes without duplication.\nWe save it with Sites19Gene.txt and Sites21Gene.txt for genes found within regions with high and null counts of ancestral allele, respectively.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976253,"guid":"2A2EE670C10711EA8C48CB07E85362CD","previous_id":976252,"previous_guid":"CB009900C10611EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"DFFFE58B8E064D9391D6FFD4CA56ABA1","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene annotation using annovar"}},{"id":1054724,"guid":"BE8211886FE54E23A21EC39C1B4CE4E4","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Filtered out genes found in regions without AA from regions with high AA<\/div><\/div>"}},{"id":1054725,"guid":"9A39C2F0C10711EA8C48CB07E85362CD","order_id":2,"type_id":15,"title":"command","source":{"id":7593,"name":"setwd(\"D:\/maulana\/annovar\/\")\nlibrary(dplyr)\nsites19 <- read.table(\"Sites19Gene.txt\")\nsites21 <- read.table(\"Sites21Gene.txt\")\nwrite.table(setdiff(sites19,sites21),\"Sites19GeneEdit.txt\",quote = F, row.names = F,col.names = F)","command_name":"R","command":"As scanning window might cut off gene transcripts, sites19GeneEdit is a list of genes with high ancestral alleles after being filtered out from genes that also found in regions without ancestral allele.","os_name":null,"os_version":null}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#EA94FF","section_duration":0,"critical":null,"critical_id":null,"duration":0},{"id":976254,"guid":"C0254020C10711EA8C48CB07E85362CD","previous_id":976253,"previous_guid":"2A2EE670C10711EA8C48CB07E85362CD","modified_on":0,"protocol_id":0,"components":[{"id":1054723,"guid":"06C2238484E344538C52E01F49F7294F","order_id":1,"type_id":6,"title":"Section","source":{"title":"Gene Ontology analysis"}},{"id":1054724,"guid":"A57378CF298144D884ECC2682ED8BCE1","order_id":1,"type_id":1,"title":"description","source":{"description":"<div class = \"text-blocks\"><div class = \"text-block\">Gene Ontology analysis using <\/div><div class = \"text-block\"><a href=\"https:\/\/david.ncifcrf.gov\/summary.jsp\" style = \"text-decoration:underline;color:blue;cursor:pointer;\"><span style = \":;\">https:\/\/david.ncifcrf.gov\/summary.jsp<\/span><\/a><\/div><\/div>"}},{"id":1054725,"guid":"643F3728D4174DCAAA01442B76ACF7DA","order_id":2,"type_id":26,"title":"notes","source":{"id":0,"parent_id":0,"uri":"","title":"","body":"<div class = \"text-blocks\"><div class = \"text-block\">Running GO analysis by pasting gene names from Sites21Gene.txt in step 14.3 for regions without ancestral allele and Sites19GeneEdit.txt in step 14.4 for regions with high count of ancestral alleles. Our interests were Biological Process (BP) related to GO term. <\/div><\/div>","created_on":0,"changed_on":0,"creator":{"name":" ","affiliation":null,"affiliations":[],"username":"","note":null,"link":null,"image":{"source":"","placeholder":""},"badges":[],"verified":0,"is_verified_user":false,"research_interests":null,"blocked_by_you":false,"blocked_you":false,"hide_following":false},"comments":[]}}],"cases":[],"data":null,"html":null,"section":null,"section_color":"#A492FF","section_duration":0,"critical":null,"critical_id":null,"duration":0}],"document":"","materials":[],"description":"<div class = \"text-blocks\"><div class = \"text-block\">In evolutionary theory, divergence and speciation can arise from long periods of reproductive isolation, genetic mutation, selection and environmental adaptation. After divergence, alleles can either persist in their initial state (ancestral allele - AA), co-exist or be replaced by a mutated state (derived alleles -DA). Defining AA and DA at polymorphic sites is useful to test hypotheses regarding molecular evolutionary processes, including estimation of allelic age, formation of linkage disequilibrium patterns and selection signatures. In this study, we aligned whole genome sequences of individuals from the Bovinae subfamily (gaur, yak, bison, wisent, gayal, and cattle) to the cattle reference genome (ARS.UCD-1.2). We then identified sequence variants in three outgroups, i.e. yak, bison and gayal-gaur-banteng. Accommodating independent divergent of each lineage from the initial ancestral state, AA were defined based on fixed alleles on at least two groups resulting in ~32.4 million variants. Using non-overlapping scanning windows of 10 Kb, we counted the AA observed within taurine and zebu cattle. We focused on the extreme points, regions with top 0.1% (high count) and regions without any occurrence of AA (null count). As mutation occurs across autosome independently, high count regions preserved gene functions from ancestral states that are still beneficial in the current condition, while null counts regions were linked to mutated ones. Gene ontology terms were inferred for functionality of referred regions. For both cattle, high count regions were associated to basal lipid metabolism which is essential on surviving of various condition pressures. Mutated regions were associated to productive traits in taurine such as higher metabolism, cell development and behaviors. While for zebu, mutation appeared for adaptation to marginal environment showed mainly by function in immune response domain. Our findings suggest that retaining and losing AA in some genes or regions are varied and made it species-specific with possibility of overlapping as it depends on the selective pressure they had to experience.<\/div><\/div>","changed_on":1608021246}